"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiniProtocol = void 0;
exports.isMiniProtocolStr = isMiniProtocolStr;
exports.isMiniProtocolNum = isMiniProtocolNum;
exports.miniProtocolToNumber = miniProtocolToNumber;
exports.miniProtocolToString = miniProtocolToString;
exports.isMiniProtocol = isMiniProtocol;
var MiniProtocol;
(function (MiniProtocol) {
    MiniProtocol[MiniProtocol["Handshake"] = 0] = "Handshake";
    /** Node-to-Node ChainSync */
    MiniProtocol[MiniProtocol["ChainSync"] = 2] = "ChainSync";
    /** Node-to-Client ChainSync */
    MiniProtocol[MiniProtocol["LocalChainSync"] = 5] = "LocalChainSync";
    MiniProtocol[MiniProtocol["BlockFetch"] = 3] = "BlockFetch";
    /** Node-to-Node TxSubmission */
    MiniProtocol[MiniProtocol["TxSubmission"] = 4] = "TxSubmission";
    /** Node-to-Client TxSubmission */
    MiniProtocol[MiniProtocol["LocalTxSubmission"] = 6] = "LocalTxSubmission";
    MiniProtocol[MiniProtocol["LocalStateQuery"] = 7] = "LocalStateQuery";
    MiniProtocol[MiniProtocol["KeepAlive"] = 8] = "KeepAlive";
    MiniProtocol[MiniProtocol["LocalTxMonitor"] = 9] = "LocalTxMonitor";
    MiniProtocol[MiniProtocol["PeerSharing"] = 10] = "PeerSharing";
})(MiniProtocol || (exports.MiniProtocol = MiniProtocol = {}));
Object.freeze(MiniProtocol);
function isMiniProtocolStr(thing) {
    return (thing === "Handshake" ||
        thing === "ChainSync" ||
        thing === "LocalChainSync" ||
        thing === "BlockFetch" ||
        thing === "TxSubmission" ||
        thing === "LocalTxSubmission" ||
        thing === "LocalStateQuery" ||
        thing === "KeepAlive" ||
        thing === "LocalTxMonitor" ||
        thing === "PeerSharing");
}
function isMiniProtocolNum(thing) {
    return (thing === 0 || // "Handshake"
        thing === 2 || // "ChainSync"
        thing === 5 || // "LocalChainSync"
        thing === 3 || // "BlockFetch"
        thing === 4 || // "TxSubmission"
        thing === 6 || // "LocalTxSubmission"
        thing === 7 || // "LocalStateQuery"
        thing === 8 || // "KeepAlive";
        thing === 9 || // "LocalTxMonitor";
        thing === 10 // "PeerSharing";
    );
}
function miniProtocolToNumber(protocol) {
    return typeof protocol === "string" ? MiniProtocol[protocol] : Number(protocol);
}
function miniProtocolToString(protocol) {
    return typeof protocol === "number" ? MiniProtocol[protocol] : String(protocol);
}
function isMiniProtocol(protocol) {
    if (typeof protocol === "number") {
        return (protocol === MiniProtocol.BlockFetch ||
            protocol === MiniProtocol.ChainSync ||
            protocol === MiniProtocol.Handshake ||
            protocol === MiniProtocol.KeepAlive ||
            protocol === MiniProtocol.LocalChainSync ||
            protocol === MiniProtocol.LocalStateQuery ||
            protocol === MiniProtocol.LocalTxSubmission ||
            protocol === MiniProtocol.TxSubmission ||
            protocol === MiniProtocol.LocalTxMonitor ||
            protocol === MiniProtocol.PeerSharing);
    }
    else if (typeof protocol === "string") {
        return isMiniProtocol(miniProtocolToNumber(protocol));
    }
    return false;
}
