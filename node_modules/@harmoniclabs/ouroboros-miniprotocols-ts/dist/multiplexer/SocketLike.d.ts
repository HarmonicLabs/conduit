import type { AddressInfo } from "net";
export interface NodeSocketLike {
    /**
     * used to understand if TCP or IPC
     */
    address: () => AddressInfo | {};
    /**
     * used to check if we should retry to connect.
     * used to check if the socket is ready when calling `isReady()`.
     */
    readonly destroyed: boolean;
    /**
     * used to check if the socket is ready when calling `isReady()`.
     *
     * If `true`,`socket.connect(options[, connectListener])` was
     * called and has not yet finished. It will stay `true` until the socket becomes
     * connected, then it is set to `false` and the `'connect'` event is emitted. Note
     * that the `socket.connect(options[, connectListener])` callback is a listener for the `'connect'` event.
     * @since v6.1.0
     */
    readonly connecting: boolean;
    /**
     * used to check if the socket is ready when calling `isReady()`.
     *
     * This is `true` if the socket is not connected yet, either because `.connect()`has not yet been called or because it is still in the process of connecting
     * (see `socket.connecting`).
     * @since v11.2.0, v10.16.0
     */
    readonly pending: boolean;
    /**
     * Half-closes the socket. i.e., it sends a FIN packet. It is possible the
     * server will still send some data.
     *
     * See [`writable.end()`](https://nodejs.org/api/stream.html#writableendchunk-encoding-callback) for further details.
     * @since v0.1.90 (node)
     * @param [encoding="utf8"] Only used when data is `string`.
     * @param callback Optional callback for when the socket is finished.
     * @return The socket itself.
    **/
    end(callback?: () => void): this;
    end(buffer: Uint8Array | string, callback?: () => void): this;
    end(str: Uint8Array | string, encoding?: BufferEncoding, callback?: () => void): this;
    /**
     * Sends data on the socket. The second parameter specifies the encoding in the
     * case of a string. It defaults to UTF8 encoding.
     *
     * Returns `true` if the entire data was flushed successfully to the kernel
     * buffer. Returns `false` if all or part of the data was queued in user memory.`"drain"` will be emitted when the buffer is again free.
     *
     * The optional `callback` parameter will be executed when the data is finally
     * written out, which may not be immediately.
     *
     * See `Writable` stream `write()` method for more
     * information.
     * @since v0.1.90 (node)
     * @param [encoding="utf8"] Only used when data is `string`.
    **/
    write(buffer: Uint8Array | string, cb?: (err?: Error) => void): boolean;
    write(str: Uint8Array | string, encoding?: BufferEncoding, cb?: (err?: Error) => void): boolean;
    /**
     * subscribe to an event
    **/
    on(event: "close", listener: (hadError: any) => void): this;
    on(event: "error", listener: (err: Error) => void): this;
    on(event: "data", listener: (data: Buffer) => void): this;
    on(event: "connect", listener: () => void): this;
    /**
     * unsubscribe to an event
    **/
    removeListener(event: "close", listener: (hadError: boolean) => void): this;
    removeListener(event: "error", listener: (err: Error) => void): this;
    removeListener(event: "data", listener: (data: Buffer) => void): this;
    removeListener(event: "connect", listener: () => void): this;
}
export declare function isNodeSocketLike(s: any): s is NodeSocketLike;
export type NodeSocketLikeEvt = "close" | "connect" | "data" | "drain" | "end" | "error" | "lookup" | "ready" | "timeout";
export interface WebSocketLike {
    /**
     * Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/send)
    **/
    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;
    /**
     * Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close)
     */
    close(code?: number, reason?: string): void;
    /**
     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
     *
     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
     *
     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
     *
     * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.
     *
     * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
     *
     * If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
     *
     * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
     */
    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    /**
     * Removes the event listener in target's event listener list with the same type, callback, and options.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
     */
    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    /**
     * [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState)
     *
     * @returns
     * One of the following unsigned short values:
     *
     * Value |	State     |	Description
     * ------|------------|-----------
     * 0	 | CONNECTING |	Socket has been created. The connection is not yet open.
     * 1	 | OPEN	      |  The connection is open and ready to communicate.
     * 2	 | CLOSING	  |  The connection is in the process of closing.
     * 3	 | CLOSED	  |  The connection is closed or couldn't be opened.
    **/
    readonly readyState: 0 | 1 | 2 | 3;
}
export declare function isWebSocketLike(s: any): s is WebSocketLike;
export type WebSocketLikeEvt = "close" | "error" | "message" | "open";
export type SocketLike = NodeSocketLike | WebSocketLike;
export declare function isNode2NodeSocket(socketLike: SocketLike): boolean;
/**
 * any `SocketLike` but with a common interface
**/
export interface WrappedSocket {
    send: (data: Uint8Array) => void;
    /**
     * close the comunication
     */
    close: () => void;
    /**
     * subscribe to an event
    **/
    on(event: "close", listener: (hadError: boolean) => void): void;
    on(event: "error", listener: (thing: Error | Event) => void): void;
    on(event: "data", listener: (data: Uint8Array) => void): void;
    on(event: "connect", listener: () => void): void;
    /**
     * unsubscribe to an event
    **/
    off(event: "close", listener: (hadError: boolean) => void): void;
    off(event: "error", listener: (thing: Error | Event) => void): void;
    off(event: "data", listener: (data: Uint8Array) => void): void;
    off(event: "connect", listener: () => void): void;
    /**
     * used to retry connecting the socket in the event is needed after it has been closed
    **/
    reconnect: () => SocketLike;
    isClosed: () => boolean;
    isReady: () => boolean;
    unwrap: <S extends SocketLike>() => S;
}
export type WrappedSocketEvt = "close" | "error" | "data" | "connect";
export declare function wrapSocket(socketLike: SocketLike, reconnect: (this: SocketLike) => SocketLike): WrappedSocket;
