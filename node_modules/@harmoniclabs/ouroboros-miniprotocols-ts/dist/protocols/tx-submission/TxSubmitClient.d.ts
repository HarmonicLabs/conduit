import { TxSubmitMessage } from "./TxSubmitMessage.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { TxSubmitRequestTxs } from "./messages/TxSubmitRequestTxs.js";
import { TxSubmitRequestIds } from "./messages/TxSubmitRequestIds.js";
import { Multiplexer } from "../../multiplexer/Multiplexer.js";
import { IMempool } from "./interfaces/index.js";
import { MempoolTxHashLike } from "./interfaces/types/index.js";
type TxSubmitClientEvt = keyof TxSubmitClientEvtListeners & string;
type TxSubmitClientEvtListeners = {
    requestTxIds: TxSubmitClientEvtListener[];
    requestTxs: TxSubmitClientEvtListener[];
};
type TxSubmitClientEvtListener = (msg: TxSubmitMessage) => void;
type MsgOf<EvtName extends TxSubmitClientEvt> = EvtName extends "requestTxIds" ? TxSubmitRequestIds : EvtName extends "requestTxs" ? TxSubmitRequestTxs : never;
type EvtListenerOf<Evt extends TxSubmitClientEvt> = (...args: any[]) => any;
export declare class TxSubmitClient {
    readonly mplexer: Multiplexer;
    readonly mempool: IMempool;
    private _eventListeners;
    private _onceEventListeners;
    constructor(thisMultiplexer: Multiplexer, thisMempool: IMempool);
    hasEventListeners(): boolean;
    private _hasEventListeners;
    addEventListenerOnce<EvtName extends TxSubmitClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    once<EvtName extends TxSubmitClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    addEventListener<EvtName extends TxSubmitClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts): typeof self;
    addListener<Evt extends TxSubmitClientEvt>(evt: Evt, callback: (data: MsgOf<Evt>) => void): this;
    on<Evt extends TxSubmitClientEvt>(evt: Evt, callback: (data: MsgOf<Evt>) => void): this;
    removeEventListener<EvtName extends TxSubmitClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    removeListener(evt: TxSubmitClientEvt, callback: (data: any) => void): this;
    off(evt: TxSubmitClientEvt, callback: (data: any) => void): this;
    emit<EvtName extends TxSubmitClientEvt>(evt: EvtName, msg: MsgOf<EvtName>): boolean;
    dispatchEvent(evt: TxSubmitClientEvt, msg: TxSubmitMessage): boolean;
    removeAllListeners(event?: TxSubmitClientEvt): void;
    clearListeners(evt?: TxSubmitClientEvt): void;
    replyTxs(requestedIds: MempoolTxHashLike[]): Promise<void>;
    replyTxIdsBlocking(knownTxCount: number, requestedTxCount: number): Promise<void>;
    replyTxIds(knownTxCount: number, requestedTxCount: number): Promise<void>;
}
export {};
