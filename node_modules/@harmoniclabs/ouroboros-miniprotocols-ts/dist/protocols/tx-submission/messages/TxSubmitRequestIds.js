"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSubmitRequestIds = void 0;
exports.isITxSubmitRequestIds = isITxSubmitRequestIds;
var cbor_1 = require("@harmoniclabs/cbor");
var ints_1 = require("../../types/ints.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxSubmitRequestIds(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        typeof stuff.blocking === "boolean" &&
        (0, ints_1.canBeUInteger)(stuff.knownTxCount) &&
        (0, ints_1.canBeUInteger)(stuff.requestedTxCount));
}
/**
 * Server request of available transactions ids
**/
var TxSubmitRequestIds = /** @class */ (function () {
    function TxSubmitRequestIds(_a) {
        var blocking = _a.blocking, knownTxCount = _a.knownTxCount, requestedTxCount = _a.requestedTxCount;
        if (!isITxSubmitRequestIds({
            blocking: blocking,
            knownTxCount: knownTxCount,
            requestedTxCount: requestedTxCount
        }))
            throw new Error("invalid TxSubmitRequestIds");
        this.blocking = Boolean(blocking);
        this.knownTxCount = (0, ints_1.forceUInteger)(knownTxCount);
        this.requestedTxCount = (0, ints_1.forceUInteger)(requestedTxCount);
    }
    TxSubmitRequestIds.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxSubmitRequestIds.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxSubmitRequestIds.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            new cbor_1.CborSimple(this.blocking ? 1 : 0),
            new cbor_1.CborUInt(this.knownTxCount),
            new cbor_1.CborUInt(this.requestedTxCount)
        ]);
    };
    TxSubmitRequestIds.fromCbor = function (cbor) {
        return TxSubmitRequestIds.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxSubmitRequestIds.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 4))
            throw new Error("invalid CBOR for 'TxSubmitRequestIds");
        var _a = __read(cbor.array, 4), cborMsgTag = _a[0], cborBlocking = _a[1], cborKnownTxCount = _a[2], cborRequestedTxCount = _a[3];
        if (!(cborMsgTag instanceof cbor_1.CborUInt &&
            Number(cborMsgTag.num) === 0 &&
            cborBlocking instanceof cbor_1.CborSimple &&
            cborKnownTxCount instanceof cbor_1.CborUInt &&
            cborRequestedTxCount instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for 'TxSubmitRequestIds");
        return new TxSubmitRequestIds({
            blocking: cborBlocking.simple === 1 ? true : false,
            knownTxCount: cborKnownTxCount.num,
            requestedTxCount: cborRequestedTxCount.num,
        });
    };
    return TxSubmitRequestIds;
}());
exports.TxSubmitRequestIds = TxSubmitRequestIds;
