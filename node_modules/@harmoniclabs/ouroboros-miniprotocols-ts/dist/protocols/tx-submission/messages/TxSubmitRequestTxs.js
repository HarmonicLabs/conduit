"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSubmitRequestTxs = void 0;
exports.isITxSubmitRequestTxs = isITxSubmitRequestTxs;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var assert_1 = require("../../utils/assert.js");
function isITxSubmitRequestTxs(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        Array.isArray(stuff.ids) &&
        stuff.ids.every(function (thing) { return thing instanceof Uint8Array; }));
}
/**
 * Server request of available transactions
**/
var TxSubmitRequestTxs = /** @class */ (function () {
    function TxSubmitRequestTxs(_a) {
        var ids = _a.ids;
        (0, assert_1.assert)(!isITxSubmitRequestTxs({ ids: ids }), "invalid interface for 'TxSubmitRequestTxs'");
        this.ids = ids;
    }
    TxSubmitRequestTxs.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxSubmitRequestTxs.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxSubmitRequestTxs.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(2),
            new cbor_1.CborArray(this.ids.map(function (id) { return new cbor_1.CborBytes(id); }), {
                // CDDL specification comment
                // ; The codec only accepts infinit-length list encoding for tsIdList!
                indefinite: true
            })
        ]);
    };
    TxSubmitRequestTxs.fromCbor = function (cbor) {
        return TxSubmitRequestTxs.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxSubmitRequestTxs.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2))
            throw new Error("invalid CBOR for 'TxSubmitRequestTxs");
        var _a = __read(cbor.array, 2), cborMsgTag = _a[0], cborIds = _a[1];
        if (!(cborMsgTag instanceof cbor_1.CborUInt &&
            Number(cborMsgTag.num) === 2 &&
            cborIds instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'TxSubmitRequestTxs");
        return new TxSubmitRequestTxs({
            ids: cborIds.array.map(function (id) { return id.bytes; })
        });
    };
    return TxSubmitRequestTxs;
}());
exports.TxSubmitRequestTxs = TxSubmitRequestTxs;
