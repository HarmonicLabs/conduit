"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSubmitReplyTxs = void 0;
exports.isITxSubmitReplyTx = isITxSubmitReplyTx;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
function isITxSubmitReplyTx(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (Array.isArray(stuff.txs) && stuff.txs.every(function (thing) { return thing instanceof Uint8Array; }));
}
var TxSubmitReplyTxs = /** @class */ (function () {
    function TxSubmitReplyTxs(msg, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var txs = msg.txs;
        if (!isITxSubmitReplyTx({ txs: txs }))
            throw new Error("invalid interface for 'TxSubmitReplyTx'");
        this.txs = txs;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(msg);
    }
    TxSubmitReplyTxs.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    TxSubmitReplyTxs.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxSubmitReplyTxs.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(3),
            new cbor_1.CborArray(this.txs.map(function (id) { return new cbor_1.CborBytes(id); }), {
                // CDDL specification comment
                // ; The codec only accepts infinit-length list encoding for tsIdList!
                indefinite: true
            })
        ]);
    };
    TxSubmitReplyTxs.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return TxSubmitReplyTxs.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    TxSubmitReplyTxs.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(3) &&
            cbor.array[1] instanceof cbor_1.CborArray &&
            cbor.array[1].array.every(function (thing) { return thing instanceof cbor_1.CborBytes; })))
            throw new Error("invalid CBOR for 'TxSubmitReplyTx");
        return new TxSubmitReplyTxs({
            txs: cbor.array[1].array.map(function (id) { return id.bytes; })
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return TxSubmitReplyTxs;
}());
exports.TxSubmitReplyTxs = TxSubmitReplyTxs;
