"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSubmitReplyTx = exports.isITxSubmitReplyTx = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxSubmitReplyTx(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (Array.isArray(stuff.txs) && stuff.txs.every(function (thing) { return thing instanceof Uint8Array; }));
}
exports.isITxSubmitReplyTx = isITxSubmitReplyTx;
var TxSubmitReplyTx = /** @class */ (function () {
    function TxSubmitReplyTx(_a) {
        var txs = _a.txs;
        if (!isITxSubmitReplyTx({ txs: txs }))
            throw new Error("invalid interface for 'TxSubmitReplyTx'");
        Object.defineProperty(this, "txs", {
            value: Object.freeze(txs.slice()),
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    TxSubmitReplyTx.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxSubmitReplyTx.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(3),
            new cbor_1.CborArray(this.txs.map(function (id) { return new cbor_1.CborBytes(id); }), {
                // CDDL specification comment
                // ; The codec only accepts infinit-length list encoding for tsIdList!
                indefinite: true
            })
        ]);
    };
    TxSubmitReplyTx.fromCbor = function (cbor) {
        return TxSubmitReplyTx.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxSubmitReplyTx.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(3) &&
            cbor.array[1] instanceof cbor_1.CborArray &&
            cbor.array[1].array.every(function (thing) { return thing instanceof cbor_1.CborBytes; })))
            throw new Error("invalid CBOR for 'TxSubmitReplyTx");
        return new TxSubmitReplyTx({
            txs: cbor.array[1].array.map(function (id) { return id.buffer; })
        });
    };
    return TxSubmitReplyTx;
}());
exports.TxSubmitReplyTx = TxSubmitReplyTx;
