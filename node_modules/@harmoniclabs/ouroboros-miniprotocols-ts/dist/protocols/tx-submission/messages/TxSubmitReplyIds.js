"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSubmitReplyIds = void 0;
exports.isITxIdAndSize = isITxIdAndSize;
exports.txIdAndSizeToCborObj = txIdAndSizeToCborObj;
exports.txIdAndSizeFromCborObj = txIdAndSizeFromCborObj;
exports.isITxSubmitReplyIds = isITxSubmitReplyIds;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ints_1 = require("../../types/ints.js");
function isITxIdAndSize(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff.txId instanceof Uint8Array &&
        (0, ints_1.canBeUInteger)(stuff.txSize));
}
function txIdAndSizeToCborObj(_a) {
    var txId = _a.txId, txSize = _a.txSize;
    return new cbor_1.CborArray([
        new cbor_1.CborBytes(txId),
        new cbor_1.CborUInt(txSize)
    ]);
}
function txIdAndSizeFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 2 &&
        cbor.array[0] instanceof cbor_1.CborBytes &&
        cbor.array[1] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for 'ITxIdAndSize'");
    return {
        txId: cbor.array[0].bytes,
        txSize: Number(cbor.array[1].num)
    };
}
function isITxSubmitReplyIds(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (typeof stuff.blocking === "boolean" &&
        Array.isArray(stuff.response) && stuff.response.every(isITxIdAndSize));
}
/**
 * The server requests aviable transactions ids
**/
var TxSubmitReplyIds = /** @class */ (function () {
    function TxSubmitReplyIds(_a) {
        var response = _a.response;
        if (!(Array.isArray(response) &&
            response.every(isITxIdAndSize)))
            throw new Error("invalid interface for 'TxSubmitReplyIds'");
        Object.defineProperties(this, {
            response: {
                value: Object.freeze(response.map(Object.freeze)),
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    TxSubmitReplyIds.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxSubmitReplyIds.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxSubmitReplyIds.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(1),
            new cbor_1.CborArray(this.response.map(txIdAndSizeToCborObj))
        ]);
    };
    TxSubmitReplyIds.fromCbor = function (cbor) {
        return TxSubmitReplyIds.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxSubmitReplyIds.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(1) &&
            cbor.array[1] instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'TxSubmitReplyIds");
        return new TxSubmitReplyIds({
            response: cbor.array[1].array.map(txIdAndSizeFromCborObj)
        });
    };
    return TxSubmitReplyIds;
}());
exports.TxSubmitReplyIds = TxSubmitReplyIds;
