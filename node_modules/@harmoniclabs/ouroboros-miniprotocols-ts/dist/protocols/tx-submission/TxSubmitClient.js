"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSubmitClient = void 0;
var messages_1 = require("./messages/index.js");
var TxSubmitMessage_1 = require("./TxSubmitMessage.js");
var TxSubmitRequestTxs_1 = require("./messages/TxSubmitRequestTxs.js");
var TxSubmitRequestIds_1 = require("./messages/TxSubmitRequestIds.js");
var types_1 = require("./interfaces/types/index.js");
var cbor_1 = require("@harmoniclabs/cbor");
var MiniProtocol_1 = require("../../MiniProtocol/index.js");
function msgToName(msg) {
    if (msg instanceof TxSubmitRequestIds_1.TxSubmitRequestIds)
        return "requestTxIds";
    if (msg instanceof TxSubmitRequestTxs_1.TxSubmitRequestTxs)
        return "requestTxs";
    return undefined;
}
function isTxSubClientEvtName(stuff) {
    return (stuff === "requestTxIds" ||
        stuff === "requestTxs");
}
var TxSubmitClient = /** @class */ (function () {
    function TxSubmitClient(thisMultiplexer, thisMempool) {
        var _this = this;
        this._eventListeners = Object.freeze({
            requestTxIds: [],
            requestTxs: []
        });
        this._onceEventListeners = Object.freeze({
            requestTxIds: [],
            requestTxs: []
        });
        var self = this;
        this.mplexer = thisMultiplexer;
        this.mempool = thisMempool;
        var prevBytes = undefined;
        var queque = [];
        this.mplexer.on(MiniProtocol_1.MiniProtocol.TxSubmission, function (chunk) {
            if (!self.hasEventListeners())
                return;
            var offset = -1;
            var thing;
            var msg;
            if (prevBytes) {
                var tmp = new Uint8Array(prevBytes.length + chunk.length);
                tmp.set(prevBytes, 0);
                tmp.set(chunk, prevBytes.length);
                chunk = tmp;
                prevBytes = undefined;
            }
            while (true) {
                try {
                    thing = cbor_1.Cbor.parseWithOffset(chunk);
                }
                catch (_a) {
                    prevBytes = chunk.slice();
                    break;
                }
                offset = thing.offset;
                msg = (0, TxSubmitMessage_1.txSubmitMessageFromCborObj)(thing.parsed);
                queque.unshift(msg);
                if (offset < chunk.length) {
                    chunk = chunk.subarray(offset);
                    continue;
                }
                else {
                    prevBytes = undefined;
                    break;
                }
            }
            var msgStr;
            while (msg = queque.pop()) {
                msgStr = msgToName(msg);
                if (!msgStr)
                    continue;
                self.dispatchEvent(msgStr, msg);
            }
        });
        this.on("requestTxs", function (msg) { return self.replyTxs(msg.ids); });
        this.on("requestTxIds", function (msg) { return msg.blocking ?
            _this.replyTxIdsBlocking(msg.knownTxCount, msg.requestedTxCount) :
            _this.replyTxIds(msg.knownTxCount, msg.requestedTxCount); });
    }
    TxSubmitClient.prototype.hasEventListeners = function () {
        return this._hasEventListeners(this._eventListeners) || this._hasEventListeners(this._onceEventListeners);
    };
    TxSubmitClient.prototype._hasEventListeners = function (listeners) {
        return (listeners.requestTxIds.length > 0 ||
            listeners.requestTxs.length > 0);
    };
    TxSubmitClient.prototype.addEventListenerOnce = function (evt, listener) {
        var listeners = this._onceEventListeners[evt];
        if (!Array.isArray(listeners))
            return self;
        listeners.push(listener);
        return self;
    };
    TxSubmitClient.prototype.once = function (evt, listener) {
        return this.addEventListenerOnce(evt, listener);
    };
    TxSubmitClient.prototype.addEventListener = function (evt, listener, options) {
        if (options === null || options === void 0 ? void 0 : options.once)
            return this.addEventListenerOnce(evt, listener);
        var listeners = this._eventListeners[evt];
        if (!Array.isArray(listeners))
            return self;
        listeners.push(listener);
        return self;
    };
    TxSubmitClient.prototype.addListener = function (evt, callback) {
        return this.on(evt, callback);
    };
    TxSubmitClient.prototype.on = function (evt, callback) {
        var listeners = this._eventListeners[evt];
        if (!listeners)
            return this;
        listeners.push(callback);
        return this;
    };
    TxSubmitClient.prototype.removeEventListener = function (evt, listener) {
        var listeners = this._eventListeners[evt];
        if (!Array.isArray(listeners))
            return self;
        this._eventListeners[evt] = listeners.filter(function (fn) { return fn !== listener; });
        this._onceEventListeners[evt] = this._onceEventListeners[evt].filter(function (fn) { return fn !== listener; });
        return self;
    };
    TxSubmitClient.prototype.removeListener = function (evt, callback) {
        return this.off(evt, callback);
    };
    TxSubmitClient.prototype.off = function (evt, callback) {
        var listeners = this._eventListeners[evt];
        if (!listeners)
            return this;
        var idx = listeners.findIndex(function (cb) { return callback === cb; });
        if (idx < 0)
            return this;
        void listeners.splice(idx, 1);
        return this;
    };
    TxSubmitClient.prototype.emit = function (evt, msg) {
        return this.dispatchEvent(evt, msg);
    };
    TxSubmitClient.prototype.dispatchEvent = function (evt, msg) {
        var e_1, _a;
        var listeners = this._eventListeners[evt];
        try {
            for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
                var cb_1 = listeners_1_1.value;
                cb_1(msg);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        listeners = this._onceEventListeners[evt];
        var cb;
        while (cb = listeners.shift())
            cb(msg);
        return true;
    };
    TxSubmitClient.prototype.removeAllListeners = function (event) {
        return this.clearListeners(event);
    };
    TxSubmitClient.prototype.clearListeners = function (evt) {
        _clearListeners(this._eventListeners, evt);
        _clearListeners(this._onceEventListeners, evt);
    };
    // tx-submission client messages
    TxSubmitClient.prototype.replyTxs = function (requestedIds) {
        return __awaiter(this, void 0, void 0, function () {
            var mempoolTxs, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mempool.getTxs(requestedIds)];
                    case 1:
                        mempoolTxs = _a.sent();
                        response = mempoolTxs.map(function (_a) {
                            var bytes = _a.bytes;
                            return bytes;
                        });
                        this.mplexer.send(new messages_1.TxSubmitReplyTxs({ txs: response }).toCbor().toBuffer(), {
                            hasAgency: true,
                            protocol: MiniProtocol_1.MiniProtocol.TxSubmission
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    TxSubmitClient.prototype.replyTxIdsBlocking = function (knownTxCount, requestedTxCount) {
        return __awaiter(this, void 0, void 0, function () {
            var nAttempts, delay, txCount, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nAttempts = 4;
                        delay = 10000;
                        return [4 /*yield*/, this.mempool.getTxCount()];
                    case 1:
                        txCount = _a.sent();
                        if (txCount > 0)
                            return [2 /*return*/, this.replyTxIds(knownTxCount, requestedTxCount)];
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < nAttempts)) return [3 /*break*/, 7];
                        if (!(txCount <= 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, delay); })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.mempool.getTxCount()];
                    case 4:
                        txCount = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        this.replyTxIds(0, requestedTxCount + knownTxCount);
                        return [2 /*return*/];
                    case 6:
                        i++;
                        return [3 /*break*/, 2];
                    case 7:
                        this.mplexer.send(new messages_1.TxSubmitDone().toCbor().toBuffer(), {
                            hasAgency: true,
                            protocol: MiniProtocol_1.MiniProtocol.TxSubmission
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    TxSubmitClient.prototype.replyTxIds = function (knownTxCount, requestedTxCount) {
        return __awaiter(this, void 0, void 0, function () {
            var hashesAndSizes, response, filteredResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mempool.getTxHashesAndSizes()];
                    case 1:
                        hashesAndSizes = _a.sent();
                        response = hashesAndSizes.map(function (_a) {
                            var hash = _a.hash, size = _a.size;
                            return ({
                                txId: (0, types_1.forceMempoolTxHashU8)(hash),
                                txSize: size
                            });
                        });
                        filteredResponse = response.slice(knownTxCount, knownTxCount + requestedTxCount);
                        this.mplexer.send(new messages_1.TxSubmitReplyIds({ response: filteredResponse }).toCbor().toBuffer(), {
                            hasAgency: true,
                            protocol: MiniProtocol_1.MiniProtocol.TxSubmission
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return TxSubmitClient;
}());
exports.TxSubmitClient = TxSubmitClient;
function _clearListeners(listeners, evt) {
    if (isTxSubClientEvtName(evt)) {
        listeners[evt].length = 0;
    }
    else {
        for (var key in listeners) {
            listeners[key].length = 0;
        }
    }
}
