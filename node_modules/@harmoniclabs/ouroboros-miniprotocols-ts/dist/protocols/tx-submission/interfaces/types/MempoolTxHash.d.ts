export type U8Arr<Len extends number> = Uint8Array & {
    readonly length: Len;
};
export type U8Arr32 = U8Arr<32>;
export type MempoolTxHashBI = BigUint64Array & {
    length: 4;
};
export type MempoolTxHash = Int32Array & {
    length: 8;
};
export type MempoolTxHashLike = Uint8Array | Int32Array | BigUint64Array;
export declare function mempoolTxHashToString(hash: MempoolTxHashLike): string;
export declare function mempoolTxHashFromString(hash: string): MempoolTxHash;
export declare function isMempoolTxHashLike(hashLike: any): hashLike is MempoolTxHashLike;
export declare function forceMempoolTxHash(hashLike: MempoolTxHashLike): MempoolTxHash;
export declare function forceMempoolTxHashU8(hashLike: MempoolTxHashLike): U8Arr32;
export declare function isMempoolTxHash(hash: any): hash is MempoolTxHash;
export declare function eqMempoolTxHash(a: MempoolTxHash, b: MempoolTxHash): boolean;
