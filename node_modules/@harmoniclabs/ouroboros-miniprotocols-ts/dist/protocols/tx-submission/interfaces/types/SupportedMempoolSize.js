"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MempoolSize = void 0;
exports.isSupportedMempoolSize = isSupportedMempoolSize;
exports.getMaxTxAllowed = getMaxTxAllowed;
var MempoolSize;
(function (MempoolSize) {
    MempoolSize[MempoolSize["kb32"] = 32768] = "kb32";
    MempoolSize[MempoolSize["kb64"] = 65536] = "kb64";
    MempoolSize[MempoolSize["kb128"] = 131072] = "kb128";
    MempoolSize[MempoolSize["kb256"] = 262144] = "kb256";
})(MempoolSize || (exports.MempoolSize = MempoolSize = {}));
Object.freeze(MempoolSize);
function isSupportedMempoolSize(value) {
    return (value === 32768 ||
        value === 65536 ||
        value === 131072 ||
        value === 262144);
}
function getMaxTxAllowed(size) {
    // only odd max txs
    // to always allign memory as multiple of 8 ( 64 bit reads )
    // the first index is awlays omitted ( implicit )
    // so odd max txs => even n of indexes
    switch (size) {
        case 32768: return 63;
        case 65536: return 127;
        case 131072:
        case 262144: return 255;
        default: throw new Error("Invalid SupportedMempoolSize: ".concat(size));
    }
}
