"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mempoolTxHashToString = mempoolTxHashToString;
exports.mempoolTxHashFromString = mempoolTxHashFromString;
exports.isMempoolTxHashLike = isMempoolTxHashLike;
exports.forceMempoolTxHash = forceMempoolTxHash;
exports.forceMempoolTxHashU8 = forceMempoolTxHashU8;
exports.isMempoolTxHash = isMempoolTxHash;
exports.eqMempoolTxHash = eqMempoolTxHash;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
function mempoolTxHashToString(hash) {
    return (0, uint8array_utils_1.toHex)(forceMempoolTxHashU8(hash));
}
function mempoolTxHashFromString(hash) {
    var u8 = (0, uint8array_utils_1.fromHex)(hash);
    return new Int32Array(u8.buffer);
}
function isMempoolTxHashLike(hashLike) {
    return ((hashLike instanceof Uint8Array &&
        hashLike.length === 32) ||
        (hashLike instanceof Int32Array &&
            hashLike.length === 8) ||
        (hashLike instanceof BigUint64Array &&
            hashLike.length === 4));
}
function forceMempoolTxHash(hashLike) {
    return new Int32Array(hashLike.buffer, 0, 8);
}
function forceMempoolTxHashU8(hashLike) {
    var buff = new ArrayBuffer(32);
    var u8 = new Uint8Array(buff);
    var i32 = new Int32Array(buff);
    i32.set(forceMempoolTxHash(hashLike));
    return u8;
}
function isMempoolTxHash(hash) {
    return hash instanceof Int32Array && hash.length === 8;
}
function eqMempoolTxHash(a, b) {
    return (a[0] === b[0] &&
        a[1] === b[1] &&
        a[2] === b[2] &&
        a[3] === b[3] &&
        a[4] === b[4] &&
        a[5] === b[5] &&
        a[6] === b[6] &&
        a[7] === b[7]);
}
