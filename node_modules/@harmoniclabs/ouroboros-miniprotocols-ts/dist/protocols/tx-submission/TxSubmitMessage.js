"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTxSubmitMessage = isTxSubmitMessage;
exports.txSubmitSubmitMessageFromCbor = txSubmitSubmitMessageFromCbor;
exports.txSubmitMessageFromCborObj = txSubmitMessageFromCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var TxSubmitDone_1 = require("./messages/TxSubmitDone.js");
var TxSubmitInit_1 = require("./messages/TxSubmitInit.js");
var TxSubmitReplyIds_1 = require("./messages/TxSubmitReplyIds.js");
var TxSubmitReplyTxs_1 = require("./messages/TxSubmitReplyTxs.js");
var TxSubmitRequestIds_1 = require("./messages/TxSubmitRequestIds.js");
var TxSubmitRequestTxs_1 = require("./messages/TxSubmitRequestTxs.js");
var cbor_1 = require("@harmoniclabs/cbor");
function isTxSubmitMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff instanceof TxSubmitInit_1.TxSubmitInit ||
        stuff instanceof TxSubmitRequestIds_1.TxSubmitRequestIds ||
        stuff instanceof TxSubmitReplyIds_1.TxSubmitReplyIds ||
        stuff instanceof TxSubmitRequestTxs_1.TxSubmitRequestTxs ||
        stuff instanceof TxSubmitReplyTxs_1.TxSubmitReplyTxs ||
        stuff instanceof TxSubmitDone_1.TxSubmitDone);
}
function txSubmitSubmitMessageFromCbor(cbor) {
    var buff = cbor instanceof Uint8Array ?
        cbor :
        (0, cbor_1.forceCborString)(cbor).toBuffer();
    var msg = txSubmitMessageFromCborObj(cbor_1.Cbor.parse(buff));
    // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
    msg.cborBytes = buff;
    return msg;
}
function txSubmitMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for `TxSubmitMessage`");
    var idx = Number(cbor.array[0].num);
    if (idx === 6)
        return TxSubmitInit_1.TxSubmitInit.fromCborObj(cbor);
    if (idx === 0)
        return TxSubmitRequestIds_1.TxSubmitRequestIds.fromCborObj(cbor);
    if (idx === 1)
        return TxSubmitReplyIds_1.TxSubmitReplyIds.fromCborObj(cbor);
    if (idx === 2)
        return TxSubmitRequestTxs_1.TxSubmitRequestTxs.fromCborObj(cbor);
    if (idx === 3)
        return TxSubmitReplyTxs_1.TxSubmitReplyTxs.fromCborObj(cbor);
    if (idx === 4)
        return TxSubmitDone_1.TxSubmitDone.fromCborObj(cbor);
    throw new Error("invalid CBOR for `TxSubmitMessage`; unknown index: " + idx);
}
