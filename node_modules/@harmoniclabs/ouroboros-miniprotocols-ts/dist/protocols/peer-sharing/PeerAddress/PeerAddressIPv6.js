"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerAddressIPv6 = void 0;
exports.isRawIPv6 = isRawIPv6;
exports.isIPeerAddressIPv6 = isIPeerAddressIPv6;
var cbor_1 = require("@harmoniclabs/cbor");
var isWord16_1 = require("../../utils/isWord16.js");
var isWord32_1 = require("../../utils/isWord32.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isRawIPv6(stuff) {
    if (!Array.isArray(stuff) &&
        stuff.length >= 4)
        return false;
    return ((0, isWord32_1.isWord32)(stuff[0]) &&
        (0, isWord32_1.isWord32)(stuff[1]) &&
        (0, isWord32_1.isWord32)(stuff[2]) &&
        (0, isWord32_1.isWord32)(stuff[3]));
}
function isIPeerAddressIPv6(peerAddress) {
    return (isRawIPv6(peerAddress.address) &&
        ((0, obj_utils_1.hasOwn)(peerAddress, "flowInfo") ?
            (0, isWord32_1.isWord32)(peerAddress.flowInfo) :
            peerAddress.flowInfo === undefined) &&
        ((0, obj_utils_1.hasOwn)(peerAddress, "scopeId") ?
            (0, isWord32_1.isWord32)(peerAddress.scopeId) :
            peerAddress.scopeId === undefined) &&
        (0, isWord16_1.isWord16)(peerAddress.portNumber));
}
var PeerAddressIPv6 = /** @class */ (function () {
    function PeerAddressIPv6(newPeerAddress) {
        if (!(isIPeerAddressIPv6(newPeerAddress)))
            throw new Error("invalid new `IPeerAddressIPv6` data provided");
        Object.defineProperties(this, {
            address: {
                value: newPeerAddress.address,
                writable: false,
                enumerable: true,
                configurable: false
            },
            portNumber: {
                value: Number(newPeerAddress.portNumber),
                writable: false,
                enumerable: true,
                configurable: false
            },
            flowInfo: {
                value: newPeerAddress.flowInfo ? Number(newPeerAddress.flowInfo) : undefined,
                writable: false,
                enumerable: true,
                configurable: false
            },
            scopeId: {
                value: newPeerAddress.scopeId ? Number(newPeerAddress.scopeId) : undefined,
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    PeerAddressIPv6.prototype.isV13 = function () {
        return (typeof this.flowInfo === "undefined" ||
            typeof this.scopeId === "undefined");
    };
    PeerAddressIPv6.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    PeerAddressIPv6.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    PeerAddressIPv6.prototype.toCborObj = function () {
        var _a, _b;
        if (this.isV13()) {
            return new cbor_1.CborArray([
                new cbor_1.CborUInt(1),
                new cbor_1.CborUInt(this.address[0]),
                new cbor_1.CborUInt(this.address[1]),
                new cbor_1.CborUInt(this.address[2]),
                new cbor_1.CborUInt(this.address[3]),
                new cbor_1.CborUInt(this.portNumber)
            ]);
        }
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(1),
            new cbor_1.CborUInt(this.address[0]),
            new cbor_1.CborUInt(this.address[1]),
            new cbor_1.CborUInt(this.address[2]),
            new cbor_1.CborUInt(this.address[3]),
            new cbor_1.CborUInt((_a = this.flowInfo) !== null && _a !== void 0 ? _a : 0),
            new cbor_1.CborUInt((_b = this.scopeId) !== null && _b !== void 0 ? _b : 0),
            new cbor_1.CborUInt(this.portNumber)
        ]);
    };
    PeerAddressIPv6.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 6 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[1] instanceof cbor_1.CborUInt &&
            cbor.array[2] instanceof cbor_1.CborUInt &&
            cbor.array[3] instanceof cbor_1.CborUInt &&
            cbor.array[4] instanceof cbor_1.CborUInt &&
            cbor.array[5] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for `PeerAddressIPv6`");
        var isV12OrBelow = cbor.array.length >= 8;
        if (isV12OrBelow && !(cbor.array[6] instanceof cbor_1.CborUInt &&
            cbor.array[7] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for `PeerAddressIPv6`");
        return new PeerAddressIPv6({
            address: [
                Number(cbor.array[1].num),
                Number(cbor.array[2].num),
                Number(cbor.array[3].num),
                Number(cbor.array[4].num)
            ],
            flowInfo: isV12OrBelow ? cbor.array[5].num : undefined,
            scopeId: isV12OrBelow ? cbor.array[6].num : undefined,
            portNumber: isV12OrBelow ? cbor.array[7].num : cbor.array[5].num
        });
    };
    return PeerAddressIPv6;
}());
exports.PeerAddressIPv6 = PeerAddressIPv6;
