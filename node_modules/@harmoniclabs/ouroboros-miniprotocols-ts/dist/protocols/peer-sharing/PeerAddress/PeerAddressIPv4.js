"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerAddressIPv4 = void 0;
exports.isIPeerAddressIPv4 = isIPeerAddressIPv4;
var cbor_1 = require("@harmoniclabs/cbor");
var isWord16_1 = require("../../utils/isWord16.js");
var isWord32_1 = require("../../utils/isWord32.js");
function isIPeerAddressIPv4(peerAddress) {
    return ((0, isWord32_1.isWord32)(peerAddress.address) &&
        (0, isWord16_1.isWord16)(peerAddress.portNumber));
}
var PeerAddressIPv4 = /** @class */ (function () {
    function PeerAddressIPv4(newPeerAddress) {
        if (!(isIPeerAddressIPv4(newPeerAddress)))
            throw new Error("invalid new `IPeerAddressIPv4` data provided");
        this.address = Number(newPeerAddress.address) >>> 0;
        this.portNumber = newPeerAddress.portNumber;
    }
    PeerAddressIPv4.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    PeerAddressIPv4.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    PeerAddressIPv4.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            new cbor_1.CborUInt(this.address),
            new cbor_1.CborUInt(this.portNumber)
        ]);
    };
    PeerAddressIPv4.fromCbor = function (cbor) {
        return PeerAddressIPv4.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    PeerAddressIPv4.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[1] instanceof cbor_1.CborUInt &&
            cbor.array[2] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for `PeerAddressIPv4`");
        return new PeerAddressIPv4({
            address: cbor.array[1].num,
            portNumber: cbor.array[2].num
        });
    };
    return PeerAddressIPv4;
}());
exports.PeerAddressIPv4 = PeerAddressIPv4;
