"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerSharingRequest = void 0;
exports.isIPeerSharingRequest = isIPeerSharingRequest;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var isByte_1 = require("../../utils/isByte.js");
function isIPeerSharingRequest(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
var PeerSharingRequest = /** @class */ (function () {
    function PeerSharingRequest(_a) {
        var amount = _a.amount;
        if (!(0, isByte_1.isByte)(amount))
            throw new Error("peer sharing amount is not a number within a byte");
        this.amount = Number(amount) & 0xff;
    }
    PeerSharingRequest.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    PeerSharingRequest.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    PeerSharingRequest.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            new cbor_1.CborUInt(this.amount)
        ]);
    };
    PeerSharingRequest.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[1] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(0)))
            throw new Error("invalid CBOR for 'PeerSharingRequest'");
        return new PeerSharingRequest({
            amount: cbor.array[1].num
        });
    };
    PeerSharingRequest.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        var msg = PeerSharingRequest.fromCborObj(cbor_1.Cbor.parse(buff));
        // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
        msg.cborBytes = buff;
        return msg;
    };
    return PeerSharingRequest;
}());
exports.PeerSharingRequest = PeerSharingRequest;
