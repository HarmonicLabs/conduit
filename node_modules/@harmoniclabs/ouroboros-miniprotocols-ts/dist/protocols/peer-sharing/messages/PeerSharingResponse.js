"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerSharingResponse = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var PeerAddress_1 = require("../PeerAddress/PeerAddress.js");
var PeerSharingResponse = /** @class */ (function () {
    function PeerSharingResponse(_a) {
        var peerAddresses = _a.peerAddresses;
        if (!(Array.isArray(peerAddresses) &&
            peerAddresses.every(PeerAddress_1.isValidPeerAddress)))
            throw new Error("invalid `IPeerSharingResponse`");
        this.peerAddresses = peerAddresses;
    }
    PeerSharingResponse.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    PeerSharingResponse.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    PeerSharingResponse.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(1),
            new cbor_1.CborArray(this.peerAddresses.map(function (peer) { return peer.toCborObj(); }))
        ]);
    };
    PeerSharingResponse.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return PeerSharingResponse.fromCborObj(cbor_1.Cbor.parse(buff));
    };
    PeerSharingResponse.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length === 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(1) &&
            cbor.array[1] instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for `PeerSharingResponse`");
        return new PeerSharingResponse({
            peerAddresses: cbor.array[1].array.map(PeerAddress_1.peerAddressFromCborObj)
        });
    };
    return PeerSharingResponse;
}());
exports.PeerSharingResponse = PeerSharingResponse;
