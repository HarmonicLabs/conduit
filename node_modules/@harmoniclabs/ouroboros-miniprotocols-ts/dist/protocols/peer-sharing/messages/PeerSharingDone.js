"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerSharingDone = void 0;
exports.isIPeerSharingDone = isIPeerSharingDone;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isIPeerSharingDone(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
var PeerSharingDone = /** @class */ (function () {
    function PeerSharingDone() {
    }
    ;
    PeerSharingDone.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    PeerSharingDone.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    PeerSharingDone.prototype.toCborObj = function () {
        return new cbor_1.CborArray([new cbor_1.CborUInt(2)]);
    };
    PeerSharingDone.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return PeerSharingDone.fromCborObj(cbor_1.Cbor.parse(buff));
    };
    PeerSharingDone.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(2)))
            throw new Error("invalid CBOR for 'PeerSharingDone");
        return new PeerSharingDone();
    };
    return PeerSharingDone;
}());
exports.PeerSharingDone = PeerSharingDone;
