import { Multiplexer } from "../../multiplexer/index.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { PeerSharingMessage } from "./PeerSharingMessage.js";
import { PeerSharingResponse } from "./messages/index.js";
type PeerSharingClientEvtListener = (msg: PeerSharingMessage) => void;
type PeerSharingClientEvtListeners = {
    request: PeerSharingClientEvtListener[];
    response: PeerSharingClientEvtListener[];
    done: PeerSharingClientEvtListener[];
    error: ((err: Error) => void)[];
};
type PeerSharingClientEvt = keyof PeerSharingClientEvtListeners;
type EvtListenerOf<Evt extends PeerSharingClientEvt> = (...args: any[]) => any;
type MsgOf<Evt extends PeerSharingClientEvt> = {};
export declare class PeerSharingClient {
    readonly multiplexer: Multiplexer;
    clearListeners: () => this;
    addEventListener: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts) => this;
    addListener: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    on: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    once: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeEventListener: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeListener: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    off: <EvtName extends PeerSharingClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeAllListeners: (event?: PeerSharingClientEvt) => this;
    emit: <EvtName extends PeerSharingClientEvt>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    dispatchEvent: <EvtName extends PeerSharingClientEvt>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    constructor(thisMultiplexer: Multiplexer);
    done(): void;
    request(amount: number | bigint): Promise<PeerSharingResponse>;
}
export {};
