"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerSharingClient = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var MiniProtocol_1 = require("../../MiniProtocol/index.js");
var PeerSharingMessage_1 = require("./PeerSharingMessage.js");
var messages_1 = require("./messages/index.js");
var roDescr = {
    writable: false,
    enumerable: true,
    configurable: false
};
var agencyHeader = {
    hasAgency: true,
    protocol: MiniProtocol_1.MiniProtocol.PeerSharing
};
function _clearListeners(listeners, evt) {
    if (typeof evt === "string" && Array.isArray(listeners[evt])) {
        listeners[evt].length = 0;
        return;
    }
    listeners.done.length = 0;
    listeners.request.length = 0;
    listeners.response.length = 0;
    listeners.error.length = 0;
}
function _hasListeners(listeners) {
    return (listeners.done.length > 0 ||
        listeners.request.length > 0 ||
        listeners.response.length > 0 ||
        listeners.error.length > 0);
}
function msgToName(msg) {
    if (msg instanceof messages_1.PeerSharingDone)
        return "done";
    if (msg instanceof messages_1.PeerSharingRequest)
        return "request";
    if (msg instanceof messages_1.PeerSharingResponse)
        return "response";
    return undefined;
}
var PeerSharingClient = /** @class */ (function () {
    function PeerSharingClient(thisMultiplexer) {
        var self = this;
        var eventListeners = {
            done: [],
            request: [],
            response: [],
            error: []
        };
        var onceEventListeners = {
            done: [],
            request: [],
            response: [],
            error: []
        };
        function hasEventListeners() {
            return _hasListeners(eventListeners) || _hasListeners(onceEventListeners);
        }
        function clearListeners(evt) {
            _clearListeners(eventListeners, evt);
            _clearListeners(onceEventListeners, evt);
        }
        function addEventListenerOnce(evt, listener) {
            var listeners = onceEventListeners[evt];
            if (!Array.isArray(listeners))
                return self;
            listeners.push(listener);
            return self;
        }
        function addEventListener(evt, listener, options) {
            if (options === null || options === void 0 ? void 0 : options.once)
                return addEventListenerOnce(evt, listener);
            var listeners = eventListeners[evt];
            if (!Array.isArray(listeners))
                return self;
            listeners.push(listener);
            return self;
        }
        function removeEventListener(evt, listener) {
            var listeners = eventListeners[evt];
            if (!Array.isArray(listeners))
                return self;
            eventListeners[evt] = listeners.filter(function (fn) { return fn !== listener; });
            onceEventListeners[evt] = onceEventListeners[evt].filter(function (fn) { return fn !== listener; });
            return self;
        }
        function dispatchEvent(evt, msg) {
            var e_1, _a;
            var listeners = eventListeners[evt];
            if (!listeners)
                return;
            try {
                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
                    var cb_1 = listeners_1_1.value;
                    cb_1(msg);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            listeners = onceEventListeners[evt];
            var cb;
            while (cb = listeners.shift())
                cb(msg);
            return true;
        }
        Object.defineProperties(this, {
            multiplexer: __assign({ value: thisMultiplexer }, roDescr),
            clearListeners: __assign({ value: clearListeners }, roDescr),
            removeAllListeners: __assign({ value: clearListeners }, roDescr),
            addEventListener: __assign({ value: addEventListener }, roDescr),
            addListener: __assign({ value: addEventListener }, roDescr),
            on: __assign({ value: addEventListener }, roDescr),
            once: __assign({ value: addEventListenerOnce }, roDescr),
            removeEventListener: __assign({ value: removeEventListener }, roDescr),
            removeListener: __assign({ value: removeEventListener }, roDescr),
            off: __assign({ value: removeEventListener }, roDescr),
            dispatchEvent: __assign({ value: dispatchEvent }, roDescr),
            emit: __assign({ value: dispatchEvent }, roDescr),
        });
        var prevBytes = undefined;
        var queque = [];
        thisMultiplexer.on(MiniProtocol_1.MiniProtocol.PeerSharing, function (chunk) {
            if (!hasEventListeners())
                return;
            var offset = -1;
            var thing;
            var msg;
            if (prevBytes) {
                var tmp = new Uint8Array(prevBytes.length + chunk.length);
                tmp.set(prevBytes, 0);
                tmp.set(chunk, prevBytes.length);
                chunk = tmp;
                prevBytes = undefined;
            }
            while (true) {
                var originalSTLimit = Error.stackTraceLimit;
                Error.stackTraceLimit = 0;
                try {
                    thing = cbor_1.Cbor.parseWithOffset(chunk);
                }
                catch (_a) {
                    Error.stackTraceLimit = originalSTLimit;
                    // assume the error is of "missing bytes";
                    prevBytes = chunk.slice();
                    break;
                }
                finally {
                    Error.stackTraceLimit = originalSTLimit;
                }
                offset = thing.offset;
                msg = (0, PeerSharingMessage_1.peerSharingMessageFromCborObj)(thing.parsed);
                queque.unshift(msg);
                if (offset < chunk.length) {
                    // reference same memory (`subarray`)
                    // ignore the parsed bytes
                    chunk = chunk.subarray(offset);
                    continue;
                }
                else {
                    prevBytes = offset === chunk.length ? undefined : Uint8Array.prototype.slice.call(chunk);
                    break;
                }
            }
            var msgStr;
            while (msg = queque.pop()) {
                msgStr = msgToName(msg);
                if (!msgStr)
                    continue; // ingore messages not expected by the client
                dispatchEvent(msgStr, msg);
            }
        });
    }
    PeerSharingClient.prototype.done = function () {
        this.multiplexer.send(new messages_1.PeerSharingDone().toCbor().toBuffer(), agencyHeader);
    };
    PeerSharingClient.prototype.request = function (amount) {
        var self = this;
        return new Promise(function (resolve) {
            function handleResponse(response) {
                self.removeEventListener("response", handleResponse);
                resolve(response);
            }
            self.addEventListener("response", handleResponse);
            self.multiplexer.send(new messages_1.PeerSharingRequest({ amount: amount }).toCbor().toBuffer(), agencyHeader);
        });
    };
    return PeerSharingClient;
}());
exports.PeerSharingClient = PeerSharingClient;
