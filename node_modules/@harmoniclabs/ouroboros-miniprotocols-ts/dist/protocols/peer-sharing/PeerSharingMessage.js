"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPeerSharingMessage = isPeerSharingMessage;
exports.isIPeerSharingMessage = isIPeerSharingMessage;
exports.peerSharingMessageFromCbor = peerSharingMessageFromCbor;
exports.peerSharingMessageFromCborObj = peerSharingMessageFromCborObj;
var PeerSharingRequest_1 = require("./messages/PeerSharingRequest.js");
var PeerSharingResponse_1 = require("./messages/PeerSharingResponse.js");
var PeerSharingDone_1 = require("./messages/PeerSharingDone.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
function isPeerSharingMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff instanceof PeerSharingRequest_1.PeerSharingRequest ||
        stuff instanceof PeerSharingResponse_1.PeerSharingResponse ||
        stuff instanceof PeerSharingDone_1.PeerSharingDone);
}
function isIPeerSharingMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
function peerSharingMessageFromCbor(cbor) {
    var buff = cbor instanceof Uint8Array ?
        cbor :
        (0, cbor_1.forceCborString)(cbor).toBuffer();
    var msg = peerSharingMessageFromCborObj(cbor_1.Cbor.parse(buff));
    // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
    msg.cborBytes = buff;
    return msg;
}
function peerSharingMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for `PeerSharingMessage`");
    var idx = Number(cbor.array[0].num);
    if (idx === 0)
        return PeerSharingRequest_1.PeerSharingRequest.fromCborObj(cbor);
    if (idx === 1)
        return PeerSharingResponse_1.PeerSharingResponse.fromCborObj(cbor);
    if (idx === 2)
        return new PeerSharingDone_1.PeerSharingDone();
    throw new Error("invalid CBOR for `PeerSharingMessage`; unknown index: " + idx);
}
