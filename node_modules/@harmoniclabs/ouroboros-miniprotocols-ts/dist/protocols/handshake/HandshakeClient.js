"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandshakeClient = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var MiniProtocol_1 = require("../../MiniProtocol/MiniProtocol.js");
var HandshakeVersionTable_1 = require("./HandshakeVersionTable/HandshakeVersionTable.js");
var VersionData_1 = require("./HandshakeVersionTable/VersionData.js");
var HandshakeAcceptVersion_1 = require("./messages/HandshakeAcceptVersion.js");
var HandshakeMessage_1 = require("./messages/HandshakeMessage.js");
var HandshakeProposeVersion_1 = require("./messages/HandshakeProposeVersion.js");
var HandshakeQueryReply_1 = require("./messages/HandshakeQueryReply.js");
var HandshakeRefuse_1 = require("./messages/HandshakeRefuse.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var defaultProposeOpts = Object.freeze({
    includeN2COldVersions: false
});
function msgToName(msg) {
    if (msg instanceof HandshakeProposeVersion_1.HandshakeProposeVersion)
        return "propose";
    if (msg instanceof HandshakeAcceptVersion_1.HandshakeAcceptVersion)
        return "accept";
    if (msg instanceof HandshakeRefuse_1.HandshakeRefuse)
        return "refuse";
    if (msg instanceof HandshakeQueryReply_1.HandshakeQueryReply)
        return "queryReply";
    return undefined;
}
function isAnyHandshakeClientEvtName(str) {
    return isHandshakeClientEvtName(str) || str === "error";
}
function isHandshakeClientEvtName(str) {
    return (str === "propose" ||
        str === "accept" ||
        str === "refuse" ||
        str === "queryReply");
}
var mplexerHeader = Object.freeze({
    hasAgency: true,
    protocol: MiniProtocol_1.MiniProtocol.Handshake
});
var HandshakeClient = /** @class */ (function () {
    function HandshakeClient(multiplexer) {
        this._mplexerListener = undefined;
        this._listeners = {
            propose: [],
            accept: [],
            refuse: [],
            queryReply: [],
            error: []
        };
        this._onceListeners = {
            propose: [],
            accept: [],
            refuse: [],
            queryReply: [],
            error: []
        };
        var self = this;
        this.mplexer = multiplexer;
        var prevBytes = undefined;
        var queque = [];
        this._mplexerListener = function (chunk) {
            if (!self.hasEventListeners())
                return;
            var offset = -1;
            var thing;
            var msg;
            // const dbg_chunk = Uint8Array.prototype.slice.call( chunk );
            // const dbg_prev = prevBytes ? Uint8Array.prototype.slice.call( prevBytes ) : prevBytes;
            if (prevBytes) {
                var tmp = new Uint8Array(prevBytes.length + chunk.length);
                tmp.set(prevBytes, 0);
                tmp.set(chunk, prevBytes.length);
                chunk = tmp;
                prevBytes = undefined;
            }
            while (offset < chunk.length) {
                var originalSTLimit = Error.stackTraceLimit;
                Error.stackTraceLimit = 0;
                try {
                    thing = cbor_1.Cbor.parseWithOffset(chunk);
                }
                catch (_a) {
                    Error.stackTraceLimit = originalSTLimit;
                    // assume the error is of "missing bytes";
                    prevBytes = Uint8Array.prototype.slice.call(chunk);
                    break;
                }
                // finally {
                //     Error.stackTraceLimit = originalSTLimit;
                // }
                offset = thing.offset;
                try {
                    msg = (0, HandshakeMessage_1.handshakeMessageFromCborObj)(thing.parsed);
                    // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
                    msg.cborBytes = Uint8Array.prototype.slice.call(chunk, 0, offset);
                    queque.unshift(msg);
                }
                catch (e) {
                    // before dispatch event
                    Error.stackTraceLimit = originalSTLimit;
                    // console.error("-------------------------------------------------------");
                    // console.error( "dbg_chunk", toHex( dbg_chunk ) );
                    // console.error( "dbg_prev", dbg_prev ? toHex( dbg_prev ) : dbg_prev );
                    // console.error("-------------------------------------------------------");
                    var err = new Error((typeof (e === null || e === void 0 ? void 0 : e.message) === "string" ? e.message : "") +
                        "\ndata: " + (0, uint8array_utils_1.toHex)(chunk) + "\n");
                    self.dispatchEvent("error", err);
                }
                finally {
                    Error.stackTraceLimit = originalSTLimit;
                }
                if (offset < chunk.length) {
                    // reference same memory (`subarray`)
                    // ignore the parsed bytes
                    chunk = chunk.subarray(offset);
                    offset = -1;
                }
            }
            var msgStr;
            while (msg = queque.pop()) {
                msgStr = msgToName(msg);
                if (!msgStr)
                    continue; // ingore messages not expected by the client
                self.dispatchEvent(msgStr, msg);
            }
        };
        multiplexer.on(MiniProtocol_1.MiniProtocol.Handshake, this._mplexerListener);
    }
    /**
     * removes the listener on the multiplexer added on contructor call
     *
     * after this method is called, the instance is useless.
     **/
    HandshakeClient.prototype.terminate = function () {
        this.clearListeners();
        if (typeof this._mplexerListener === "function") {
            this.mplexer.off(MiniProtocol_1.MiniProtocol.Handshake, this._mplexerListener);
        }
        this._mplexerListener = undefined;
    };
    HandshakeClient.prototype.propose = function (
    /** @default versionTable defaults to all the known versions (depending by n2n or n2c) */
    arg, opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        opts = (0, obj_utils_1.isObject)(opts) ? opts : {};
        opts = __assign(__assign({}, defaultProposeOpts), opts);
        var self = this;
        var isN2N = self.mplexer.isN2N;
        var versionTable = normalizeProposeArg(arg, isN2N);
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            function handleAll(msg) {
                self.off("accept", handleAll);
                self.off("refuse", handleAll);
                self.off("queryReply", handleAll);
                resolve(msg);
            }
            return __generator(this, function (_a) {
                self.on("accept", handleAll);
                self.on("refuse", handleAll);
                self.on("queryReply", handleAll);
                this.mplexer.send(new HandshakeProposeVersion_1.HandshakeProposeVersion({ versionTable: versionTable }, this.mplexer.isN2N).toCbor().toBuffer(), mplexerHeader);
                return [2 /*return*/];
            });
        }); });
    };
    HandshakeClient.prototype.hasEventListeners = function (includeError) {
        if (includeError === void 0) { includeError = false; }
        return (includeError ? (this._listeners.error.length > 0 ||
            this._onceListeners.error.length > 0) : true) && (this._listeners.propose.length > 0 ||
            this._listeners.accept.length > 0 ||
            this._listeners.refuse.length > 0 ||
            this._listeners.queryReply.length > 0 ||
            this._listeners.error.length > 0 ||
            this._onceListeners.propose.length > 0 ||
            this._onceListeners.accept.length > 0 ||
            this._onceListeners.refuse.length > 0 ||
            this._onceListeners.queryReply.length > 0 ||
            this._onceListeners.error.length > 0);
    };
    HandshakeClient.prototype.clearListeners = function (evt) {
        if (isAnyHandshakeClientEvtName(evt)) {
            this._listeners[evt].length = 0;
            this._onceListeners[evt].length = 0;
            return this;
        }
        this._listeners.propose.length = 0;
        this._listeners.accept.length = 0;
        this._listeners.refuse.length = 0;
        this._listeners.queryReply.length = 0;
        this._listeners.error.length = 0;
        this._onceListeners.propose.length = 0;
        this._onceListeners.accept.length = 0;
        this._onceListeners.refuse.length = 0;
        this._onceListeners.queryReply.length = 0;
        this._onceListeners.error.length = 0;
        return this;
    };
    HandshakeClient.prototype.removeAllListeners = function (evt) {
        return this.clearListeners(evt);
    };
    HandshakeClient.prototype.once = function (evt, listener) {
        if (!isAnyHandshakeClientEvtName(evt))
            return this;
        this._onceListeners[evt].push(listener);
        return this;
    };
    HandshakeClient.prototype.addEventListenerOnce = function (evt, listener) {
        return this.once(evt, listener);
    };
    HandshakeClient.prototype.on = function (evt, listener, opts) {
        if ((opts === null || opts === void 0 ? void 0 : opts.once) === true)
            return this.addEventListenerOnce(evt, listener);
        if (!isAnyHandshakeClientEvtName(evt))
            return this;
        this._listeners[evt].push(listener);
        return this;
    };
    HandshakeClient.prototype.addEventListener = function (evt, listener) {
        return this.on(evt, listener);
    };
    HandshakeClient.prototype.addListener = function (evt, listener) {
        return this.on(evt, listener);
    };
    HandshakeClient.prototype.off = function (evt, listener) {
        if (!isAnyHandshakeClientEvtName(evt))
            return this;
        this._listeners[evt] = this._listeners[evt].filter(function (fn) { return fn !== listener; });
        this._onceListeners[evt] = this._onceListeners[evt].filter(function (fn) { return fn !== listener; });
        return this;
    };
    HandshakeClient.prototype.removeEventListener = function (evt, listener) {
        return this.off(evt, listener);
    };
    HandshakeClient.prototype.removeListener = function (evt, listener) {
        return this.off(evt, listener);
    };
    HandshakeClient.prototype.dispatchEvent = function (evt, msg) {
        if (!isAnyHandshakeClientEvtName(evt))
            return true;
        if (evt !== "error" && !(0, HandshakeMessage_1.isHandshakeMessage)(msg))
            return true;
        var listeners = this._listeners[evt];
        var nListeners = listeners.length;
        for (var i = 0; i < nListeners; i++) {
            listeners[i](msg);
        }
        var onceListeners = this._onceListeners[evt];
        if (evt === "error" && nListeners + onceListeners.length === 0) {
            throw msg instanceof Error ? msg : new Error("Unhandled error: " + msg);
        }
        var cb;
        while (cb = onceListeners.shift()) {
            cb(msg);
        }
        return true;
    };
    HandshakeClient.prototype.emit = function (evt, msg) {
        return this.dispatchEvent(evt, msg);
    };
    return HandshakeClient;
}());
exports.HandshakeClient = HandshakeClient;
function normalizeProposeArg(arg, isN2N, opts) {
    var e_1, _a;
    if (opts === void 0) { opts = defaultProposeOpts; }
    if (typeof arg === "number")
        return normalizeProposeArg({ networkMagic: arg }, isN2N);
    if ((0, HandshakeVersionTable_1.isVersionTableMap)(arg))
        return (0, HandshakeVersionTable_1.normalizeVersionTableMap)(arg);
    var allVersions = isN2N ? [
        7, 8, 9, 10, 11, 12, 13, 14
    ] : [
        16, 17, 18, 19
    ];
    var versionData = arg === undefined ? VersionData_1.VersionData.mainnet() : (arg instanceof VersionData_1.VersionData ? arg.clone() :
        new VersionData_1.VersionData(arg, {
            includePeerSharing: isN2N,
            includeQuery: true,
        }));
    var result = {};
    try {
        for (var allVersions_1 = __values(allVersions), allVersions_1_1 = allVersions_1.next(); !allVersions_1_1.done; allVersions_1_1 = allVersions_1.next()) {
            var version = allVersions_1_1.value;
            result[version] = versionData.clone();
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (allVersions_1_1 && !allVersions_1_1.done && (_a = allVersions_1.return)) _a.call(allVersions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return (0, HandshakeVersionTable_1.normalizeVersionTableMap)(result);
}
