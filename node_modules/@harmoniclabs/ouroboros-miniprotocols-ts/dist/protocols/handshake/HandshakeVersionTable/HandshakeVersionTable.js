"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVersionTableMap = isVersionTableMap;
exports.isIVersionTableMap = isIVersionTableMap;
exports.getSortedVersions = getSortedVersions;
exports.normalizeVersionTableMap = normalizeVersionTableMap;
exports.versionTableFromCbor = versionTableFromCbor;
exports.versionTableFromCborObj = versionTableFromCborObj;
exports.versionTableToCbor = versionTableToCbor;
exports.versionTableToCborObj = versionTableToCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var safeParseInt_1 = require("../../utils/safeParseInt.js");
var VersionData_1 = require("./VersionData.js");
var VersionNumber_1 = require("./VersionNumber.js");
var cbor_1 = require("@harmoniclabs/cbor");
function isVersionTableMap(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        Object.keys(stuff).every(function (k) {
            return (0, VersionNumber_1.isExtendedVersionNumber)(k) &&
                stuff[(0, VersionNumber_1.VersionNumber)(k)] instanceof VersionData_1.VersionData;
        }));
}
function isIVersionTableMap(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        Object.keys(stuff).every(function (k) {
            return (0, VersionNumber_1.isVersionNumber)(k) &&
                (0, VersionData_1.isIVersionData)(stuff[(0, VersionNumber_1.VersionNumber)(k)]);
        }));
}
function getSortedVersions(versionTable) {
    return Object.keys(versionTable)
        .map(safeParseInt_1.safeParseInt)
        .filter((function (v) { return typeof v === "number"; }))
        .map(VersionNumber_1.VersionNumber)
        .sort(function (a, b) { return a - b; });
}
function normalizeVersionTableMap(versionTable) {
    var e_1, _a;
    var normalized = {};
    var versions = getSortedVersions(versionTable);
    try {
        for (var versions_1 = __values(versions), versions_1_1 = versions_1.next(); !versions_1_1.done; versions_1_1 = versions_1.next()) {
            var version = versions_1_1.value;
            var data = versionTable[version];
            normalized[version] =
                data instanceof VersionData_1.VersionData ? data.clone() :
                    new VersionData_1.VersionData(versionTable[version]);
            if (version <= 10) {
                var data_1 = normalized[version];
                normalized[version] = new VersionData_1.VersionData(data_1, {
                    includePeerSharing: false,
                    includeQuery: false
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (versions_1_1 && !versions_1_1.done && (_a = versions_1.return)) _a.call(versions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return normalized;
}
function versionTableFromCbor(cbor, n2n) {
    if (n2n === void 0) { n2n = true; }
    return versionTableFromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)), n2n);
}
function versionTableFromCborObj(cbor, n2n) {
    var e_2, _a;
    if (n2n === void 0) { n2n = true; }
    if (!(cbor instanceof cbor_1.CborMap))
        throw new Error("invalid CBOR for 'N2NVersionTable'");
    var entries = cbor.map;
    var result = {};
    try {
        for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var _b = entries_1_1.value, k = _b.k, v = _b.v;
            if (!(k instanceof cbor_1.CborUInt))
                throw new Error("invalid CBOR for 'VersionTableMap'; invalid 'VersionNumber'");
            var n = Number(k.num);
            if (!(0, VersionNumber_1.isExtendedVersionNumber)(n))
                throw new Error("invalid CBOR for 'VersionTableMap'; invalid 'OldN2NVersionNumber'");
            n = (0, VersionNumber_1.VersionNumber)(n);
            var isNode2clientVersion = (n >>> 15 === 1);
            // up to client version 14 only the network magic was stored
            if (isNode2clientVersion && n <= 32782) {
                if (!(v instanceof cbor_1.CborUInt))
                    throw new Error("invalid CBOR for 'VersionTableMap'; invalid 'VersionData'");
                result[n] = new VersionData_1.VersionData({
                    networkMagic: Number(v.num),
                });
            }
            else {
                result[n] = VersionData_1.VersionData.fromCborObj(v, n2n);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return normalizeVersionTableMap(result);
}
function versionTableToCbor(versionTable, n2n) {
    if (n2n === void 0) { n2n = true; }
    return cbor_1.Cbor.encode(versionTableToCborObj(versionTable));
}
function versionTableToCborObj(versionTable, n2n) {
    if (n2n === void 0) { n2n = true; }
    return new cbor_1.CborMap(getSortedVersions(versionTable)
        .map(function (ver) {
        var versionNumber = n2n ? ver : (0, VersionNumber_1.toClientVersionNumber)(ver);
        var entryData = versionTable[ver].toCborObj();
        if (!n2n && ver <= 14) {
            // node to client versions up to 14 only store the network magic
            entryData = new cbor_1.CborUInt(versionTable[ver].networkMagic);
        }
        return {
            k: new cbor_1.CborUInt(versionNumber),
            v: entryData
        };
    }));
}
