import { NetworkMagic } from "./NetworkMagic.js";
import { OptField } from "../../types/OptField.js";
import { CborObj, CanBeCborString, CborString } from "@harmoniclabs/cbor";
import { Definitely } from "../../types/Definitely.js";
export interface IVersionData {
    networkMagic: number;
    initiatorOnlyDiffusionMode?: boolean;
    peerSharing?: boolean;
    query?: boolean;
}
export declare function isIVersionData(stuff: any): stuff is IVersionData;
export interface VersionDataOptions {
    includePeerSharing?: boolean;
    includeQuery?: boolean;
}
export declare class VersionData implements Definitely<IVersionData>, Definitely<VersionDataOptions> {
    readonly networkMagic: NetworkMagic;
    readonly initiatorOnlyDiffusionMode: boolean;
    readonly peerSharing: boolean;
    readonly query: boolean;
    readonly includePeerSharing: boolean;
    readonly includeQuery: boolean;
    constructor({ networkMagic, initiatorOnlyDiffusionMode, peerSharing, query }: IVersionData, { includePeerSharing, includeQuery }?: VersionDataOptions);
    clone(): VersionData;
    static mainnet({ initiatorOnlyDiffusionMode, peerSharing, query }?: OptField<IVersionData, "networkMagic">): VersionData;
    static preview({ initiatorOnlyDiffusionMode, peerSharing, query }?: OptField<IVersionData, "networkMagic">): VersionData;
    static preprod({ initiatorOnlyDiffusionMode, peerSharing, query }?: OptField<IVersionData, "networkMagic">): VersionData;
    static testnet: typeof VersionData.preprod;
    static sanchonet({ initiatorOnlyDiffusionMode, peerSharing, query }?: OptField<IVersionData, "networkMagic">): VersionData;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cbor: CanBeCborString, n2n?: boolean): VersionData;
    static fromCborObj(cbor: CborObj, n2n?: boolean): VersionData;
}
