"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionData = void 0;
exports.isIVersionData = isIVersionData;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var NetworkMagic_1 = require("./NetworkMagic.js");
var cbor_1 = require("@harmoniclabs/cbor");
var bool_1 = require("../../utils/bool.js");
function isIVersionData(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, NetworkMagic_1.isNetworkMagic)(stuff.networkMagic) &&
        (0, bool_1.isMaybeBool)(stuff.initiatorOnlyDiffusionMode) &&
        (0, bool_1.isMaybeBool)(stuff.peerSharing) &&
        (0, bool_1.isMaybeBool)(stuff.query));
}
var defaultVersionDataOptions = Object.freeze({
    includePeerSharing: true,
    includeQuery: true,
});
var VersionData = /** @class */ (function () {
    // cddl:
    // nodeToNodeVersionData = [ networkMagic, initiatorOnlyDiffusionMode, peerSharing, query ]
    // nodeToNodeVersionData = [ networkMagic, initiatorOnlyDiffusionMode, peerSharing, query ]
    // nodeToNodeVersionData = [ networkMagic, initiatorOnlyDiffusionMode ]
    // nodeToClientVersionData = [networkMagic, query]
    function VersionData(_a, _b) {
        var networkMagic = _a.networkMagic, initiatorOnlyDiffusionMode = _a.initiatorOnlyDiffusionMode, peerSharing = _a.peerSharing, query = _a.query;
        var _c = _b === void 0 ? defaultVersionDataOptions : _b, includePeerSharing = _c.includePeerSharing, includeQuery = _c.includeQuery;
        if (!(0, NetworkMagic_1.isNetworkMagic)(networkMagic))
            throw new Error("VersionData :: invalid networkMagic: " + networkMagic);
        this.networkMagic = networkMagic;
        this.initiatorOnlyDiffusionMode = (0, bool_1.bool)(initiatorOnlyDiffusionMode, true);
        this.peerSharing = (0, bool_1.bool)(peerSharing, true);
        this.query = (0, bool_1.bool)(query, true);
        this.includePeerSharing = (0, bool_1.bool)(includePeerSharing, defaultVersionDataOptions.includePeerSharing);
        this.includeQuery = (0, bool_1.bool)(includeQuery, defaultVersionDataOptions.includeQuery);
    }
    VersionData.prototype.clone = function () {
        return new VersionData({
            networkMagic: this.networkMagic,
            initiatorOnlyDiffusionMode: this.initiatorOnlyDiffusionMode,
            peerSharing: this.peerSharing,
            query: this.query,
        }, {
            includePeerSharing: this.includePeerSharing,
            includeQuery: this.includeQuery,
        });
    };
    VersionData.mainnet = function (_a) {
        var _b = _a === void 0 ? {} : _a, initiatorOnlyDiffusionMode = _b.initiatorOnlyDiffusionMode, peerSharing = _b.peerSharing, query = _b.query;
        return new VersionData({
            networkMagic: NetworkMagic_1.CardanoNetworkMagic.Mainnet,
            initiatorOnlyDiffusionMode: initiatorOnlyDiffusionMode,
            peerSharing: peerSharing,
            query: query,
        });
    };
    VersionData.preview = function (_a) {
        var _b = _a === void 0 ? {} : _a, initiatorOnlyDiffusionMode = _b.initiatorOnlyDiffusionMode, peerSharing = _b.peerSharing, query = _b.query;
        return new VersionData({
            networkMagic: NetworkMagic_1.CardanoNetworkMagic.Preview,
            initiatorOnlyDiffusionMode: initiatorOnlyDiffusionMode,
            peerSharing: peerSharing,
            query: query,
        });
    };
    VersionData.preprod = function (_a) {
        var _b = _a === void 0 ? {} : _a, initiatorOnlyDiffusionMode = _b.initiatorOnlyDiffusionMode, peerSharing = _b.peerSharing, query = _b.query;
        return new VersionData({
            networkMagic: NetworkMagic_1.CardanoNetworkMagic.Preprod,
            initiatorOnlyDiffusionMode: initiatorOnlyDiffusionMode,
            peerSharing: peerSharing,
            query: query,
        });
    };
    VersionData.sanchonet = function (_a) {
        var _b = _a === void 0 ? {} : _a, initiatorOnlyDiffusionMode = _b.initiatorOnlyDiffusionMode, peerSharing = _b.peerSharing, query = _b.query;
        return new VersionData({
            networkMagic: NetworkMagic_1.CardanoNetworkMagic.Sanchonet,
            initiatorOnlyDiffusionMode: initiatorOnlyDiffusionMode,
            peerSharing: peerSharing,
            query: query,
        });
    };
    VersionData.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    VersionData.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    VersionData.prototype.toCborObj = function () {
        // always check FIRST
        // n2c
        // nodeToClientVersionData = [networkMagic, query]
        if (this.includeQuery && !this.includePeerSharing)
            return new cbor_1.CborArray([
                new cbor_1.CborUInt(this.networkMagic),
                new cbor_1.CborSimple(this.query),
            ]);
        // old n2n version data
        // nodeToNodeVersionData = [ networkMagic, initiatorOnlyDiffusionMode ]
        if (!this.includePeerSharing)
            return new cbor_1.CborArray([
                new cbor_1.CborUInt(this.networkMagic),
                new cbor_1.CborSimple(this.initiatorOnlyDiffusionMode),
            ]);
        // nodeToNodeVersionData = [ networkMagic, initiatorOnlyDiffusionMode, peerSharing, query ]
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.networkMagic),
            new cbor_1.CborSimple(this.initiatorOnlyDiffusionMode),
            new cbor_1.CborUInt(this.peerSharing ? 1 : 0),
            new cbor_1.CborSimple(this.query),
        ].filter(function (v) { return v !== undefined; }));
    };
    VersionData.fromCbor = function (cbor, n2n) {
        if (n2n === void 0) { n2n = true; }
        return VersionData.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)), n2n);
    };
    VersionData.fromCborObj = function (cbor, n2n) {
        if (n2n === void 0) { n2n = true; }
        // old node to client version data (n2c v14 and before)
        if (cbor instanceof cbor_1.CborUInt)
            return new VersionData({
                networkMagic: Number(cbor.num),
            });
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array.length !== 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[1] instanceof cbor_1.CborSimple))
            throw new Error("invalid CBOR for 'VersionData': " +
                cbor_1.Cbor.encode(cbor).toString());
        n2n = (0, bool_1.bool)(n2n, true);
        var len = cbor.array.length;
        if (len === 2) {
            if (n2n) // nodeToNodeVersionData (< 11)
             {
                return new VersionData({
                    networkMagic: Number(cbor.array[0].num),
                    initiatorOnlyDiffusionMode: (0, bool_1.bool)(cbor.array[1].simple, false),
                    peerSharing: false,
                    query: false,
                }, {
                    includePeerSharing: false,
                    includeQuery: false,
                });
            }
            else // nodeToClientVersionData
             {
                return new VersionData({
                    networkMagic: Number(cbor.array[0].num),
                    initiatorOnlyDiffusionMode: false,
                    peerSharing: false,
                    query: (0, bool_1.bool)(cbor.array[1].simple, false),
                }, {
                    includePeerSharing: false,
                    includeQuery: true,
                });
            }
        }
        if (!(cbor.array[2] instanceof cbor_1.CborUInt &&
            cbor.array[3] instanceof cbor_1.CborSimple))
            throw new Error("invalid CBOR for 'VersionData'" +
                cbor_1.Cbor.encode(cbor).toString());
        return new VersionData({
            networkMagic: Number(cbor.array[0].num),
            initiatorOnlyDiffusionMode: (0, bool_1.bool)(cbor.array[1].simple, false),
            peerSharing: Number(cbor.array[2].num) === 0 ? false : true,
            query: (0, bool_1.bool)(cbor.array[3].simple, false),
        }, {
            includePeerSharing: true,
            includeQuery: true,
        });
    };
    VersionData.testnet = VersionData.preprod;
    return VersionData;
}());
exports.VersionData = VersionData;
