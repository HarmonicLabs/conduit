"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandshakeAcceptVersion = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var VersionData_1 = require("../HandshakeVersionTable/VersionData.js");
var VersionNumber_1 = require("../HandshakeVersionTable/VersionNumber.js");
var bool_1 = require("../../utils/bool.js");
var HandshakeAcceptVersion = /** @class */ (function () {
    function HandshakeAcceptVersion(_a, n2n) {
        var versionNumber = _a.versionNumber, versionData = _a.versionData;
        if (n2n === void 0) { n2n = true; }
        this.isN2N = true;
        this.versionNumber = versionNumber;
        this.versionData = versionData;
        this.isN2N = (0, bool_1.bool)(n2n, true);
    }
    HandshakeAcceptVersion.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    HandshakeAcceptVersion.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    HandshakeAcceptVersion.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(1),
            new cbor_1.CborUInt((0, VersionNumber_1.adaptVersionNumberToMode)(this.versionNumber, this.isN2N)),
            this.versionData.toCborObj()
        ]);
    };
    HandshakeAcceptVersion.fromCbor = function (cbor) {
        return HandshakeAcceptVersion.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    HandshakeAcceptVersion.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === 1 &&
            cbor.array[1] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for 'HandshakeAcceptVersion'");
        return new HandshakeAcceptVersion({
            versionNumber: (0, VersionNumber_1.VersionNumber)(Number(cbor.array[1].num)),
            versionData: VersionData_1.VersionData.fromCborObj(cbor.array[2])
        });
    };
    return HandshakeAcceptVersion;
}());
exports.HandshakeAcceptVersion = HandshakeAcceptVersion;
