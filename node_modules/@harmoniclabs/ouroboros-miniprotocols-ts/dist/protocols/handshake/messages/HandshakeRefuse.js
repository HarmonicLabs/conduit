"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandshakeRefuse = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var RefuseReason_1 = require("./RefuseReason/index.js");
var HandshakeRefuse = /** @class */ (function () {
    function HandshakeRefuse(refuse, n2n) {
        if (n2n === void 0) { n2n = true; }
        this.isN2N = true;
        this.reason = refuse.reason;
        this.isN2N = n2n;
    }
    HandshakeRefuse.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    HandshakeRefuse.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    HandshakeRefuse.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(2),
            this.reason.toCborObj()
        ]);
    };
    HandshakeRefuse.fromCbor = function (cbor, n2n) {
        if (n2n === void 0) { n2n = true; }
        return HandshakeRefuse.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)), n2n);
    };
    HandshakeRefuse.fromCborObj = function (cbor, n2n) {
        if (n2n === void 0) { n2n = true; }
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'HandshakeRefuse'");
        var _a = __read(cbor.array, 2), idx = _a[0], _reason = _a[1];
        if (!(idx instanceof cbor_1.CborUInt &&
            idx.num === BigInt(2)))
            throw new Error("invalid CBOR for 'HandshakeRefuse'; invalid reason index");
        return new HandshakeRefuse({
            reason: (0, RefuseReason_1.refuseReasonFromCborObj)(_reason)
        }, n2n);
    };
    return HandshakeRefuse;
}());
exports.HandshakeRefuse = HandshakeRefuse;
