"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandshakeProposeVersion = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var HandshakeVersionTable_1 = require("../HandshakeVersionTable/HandshakeVersionTable.js");
var HandshakeProposeVersion = /** @class */ (function () {
    function HandshakeProposeVersion(_a, n2n) {
        var versionTable = _a.versionTable;
        if (n2n === void 0) { n2n = true; }
        this.isN2N = true;
        this.versionTable = (0, HandshakeVersionTable_1.normalizeVersionTableMap)(versionTable);
        this.isN2N = n2n;
    }
    HandshakeProposeVersion.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    HandshakeProposeVersion.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    HandshakeProposeVersion.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            (0, HandshakeVersionTable_1.versionTableToCborObj)(this.versionTable, this.isN2N)
        ]);
    };
    HandshakeProposeVersion.fromCbor = function (cbor, n2n) {
        if (n2n === void 0) { n2n = true; }
        return HandshakeProposeVersion.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)), n2n);
    };
    HandshakeProposeVersion.fromCborObj = function (cbor, n2n) {
        if (n2n === void 0) { n2n = true; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === 0))
            throw new Error("invalid CBOR for 'N2NVersionTable'");
        return new HandshakeProposeVersion({
            versionTable: (0, HandshakeVersionTable_1.versionTableFromCborObj)(cbor.array[1], n2n)
        }, n2n);
    };
    return HandshakeProposeVersion;
}());
exports.HandshakeProposeVersion = HandshakeProposeVersion;
