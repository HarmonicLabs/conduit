"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHandshakeMessage = isHandshakeMessage;
exports.handshakeMessageFromCborObj = handshakeMessageFromCborObj;
var cbor_1 = require("@harmoniclabs/cbor");
var HandshakeAcceptVersion_1 = require("./HandshakeAcceptVersion.js");
var HandshakeQueryReply_1 = require("./HandshakeQueryReply.js");
var HandshakeRefuse_1 = require("./HandshakeRefuse.js");
var HandshakeProposeVersion_1 = require("./HandshakeProposeVersion.js");
function isHandshakeMessage(thing) {
    return (thing instanceof HandshakeProposeVersion_1.HandshakeProposeVersion ||
        thing instanceof HandshakeAcceptVersion_1.HandshakeAcceptVersion ||
        thing instanceof HandshakeRefuse_1.HandshakeRefuse ||
        thing instanceof HandshakeQueryReply_1.HandshakeQueryReply);
}
function handshakeMessageFromCborObj(cObj) {
    if (!(cObj instanceof cbor_1.CborArray &&
        cObj.array.length >= 1 &&
        cObj.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for 'HandshakeMessage'");
    var idx = Number(cObj.array[0].num);
    if (idx === 0)
        return HandshakeProposeVersion_1.HandshakeProposeVersion.fromCborObj(cObj);
    if (idx === 1)
        return HandshakeAcceptVersion_1.HandshakeAcceptVersion.fromCborObj(cObj);
    if (idx === 2)
        return HandshakeRefuse_1.HandshakeRefuse.fromCborObj(cObj);
    if (idx === 3)
        return HandshakeQueryReply_1.HandshakeQueryReply.fromCborObj(cObj);
    throw new Error("invalid CBOR for 'HandshakeMessage'; invalid index");
}
