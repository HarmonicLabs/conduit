"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2NVersionTable = exports.isIN2NVersionTable = exports.isIUpTo12N2NVersionTableEntry = exports.isIOldN2NVersionTableEntry = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var N2NHandshakeVersion_1 = require("./N2NHandshakeVersion.js");
var N2NVersionData_1 = require("./N2NVersionData.js");
;
;
function isIOldN2NVersionTableEntry(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, N2NHandshakeVersion_1.isOldN2NVersionNumber)(stuff.version) &&
        (0, N2NVersionData_1.isIN2NVersionData)(stuff.data));
}
exports.isIOldN2NVersionTableEntry = isIOldN2NVersionTableEntry;
;
;
function isIUpTo12N2NVersionTableEntry(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, N2NHandshakeVersion_1.isUpTo12N2NVersionNumber)(stuff.version) &&
        (0, N2NVersionData_1.isIUpTo12N2NVersionData)(stuff.data));
}
exports.isIUpTo12N2NVersionTableEntry = isIUpTo12N2NVersionTableEntry;
function isIN2NVersionTable(stuff) {
    return (Array.isArray(stuff) &&
        stuff.every(function (entry) {
            return isIOldN2NVersionTableEntry(entry) ||
                isIUpTo12N2NVersionTableEntry(entry);
        }));
}
exports.isIN2NVersionTable = isIN2NVersionTable;
var N2NVersionTable = /** @class */ (function () {
    function N2NVersionTable(entries) {
        if (!isIN2NVersionTable(entries))
            throw new Error("invalid entries for 'N2NVersionTable'");
        entries = entries.map(function (_a) {
            var version = _a.version, data = _a.data;
            return ({
                version: version,
                data: data instanceof N2NVersionData_1.N2NVersionData ?
                    data :
                    new N2NVersionData_1.N2NVersionData(data)
            });
        });
        (0, obj_utils_1.freezeAll)(entries);
        Object.defineProperty(this, "entries", {
            value: entries,
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    N2NVersionTable.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2NVersionTable.prototype.toCborObj = function () {
        return new cbor_1.CborMap(this.entries.map(function (_a) {
            var version = _a.version, data = _a.data;
            return ({
                k: new cbor_1.CborUInt(version),
                v: data.toCborObj()
            });
        }));
    };
    N2NVersionTable.fromCbor = function (cbor) {
        return N2NVersionTable.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2NVersionTable.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborMap))
            throw new Error("invalid CBOR for 'N2NVersionTable'");
        var entries = cbor.map;
        return new N2NVersionTable(entries.map(function (_a) {
            var k = _a.k, v = _a.v;
            if (!(k instanceof cbor_1.CborUInt))
                throw new Error("invalid CBOR for 'N2NVersionTable'; invalid 'OldN2NVersionNumber'");
            var n = Number(k.num);
            if (!(0, N2NHandshakeVersion_1.isOldN2NVersionNumber)(n))
                throw new Error("invalid CBOR for 'N2NVersionTable'; invalid 'OldN2NVersionNumber'");
            return {
                version: n,
                data: N2NVersionData_1.N2NVersionData.fromCborObj(v)
            };
        }));
    };
    return N2NVersionTable;
}());
exports.N2NVersionTable = N2NVersionTable;
