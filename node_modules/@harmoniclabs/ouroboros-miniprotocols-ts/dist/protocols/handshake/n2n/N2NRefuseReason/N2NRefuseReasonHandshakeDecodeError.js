"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2NRefuseReasonHandshakeDecodeError = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var N2NHandshakeVersion_1 = require("../N2NHandshakeVersion.js");
var N2NRefuseReasonHandshakeDecodeError = /** @class */ (function () {
    function N2NRefuseReasonHandshakeDecodeError(_a) {
        var version = _a.version, decodeError = _a.decodeError;
        if (!(0, N2NHandshakeVersion_1.isOldN2NVersionNumber)(version))
            throw new Error("invalid 'validVerisons' for 'N2NRefuseReasonHandshakeDecodeError'");
        Object.defineProperties(this, {
            version: {
                value: version,
                writable: false,
                enumerable: true,
                configurable: false
            },
            decodeError: {
                value: String(decodeError),
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    N2NRefuseReasonHandshakeDecodeError.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2NRefuseReasonHandshakeDecodeError.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(1),
            new cbor_1.CborUInt(this.version),
            new cbor_1.CborText(this.decodeError)
        ]);
    };
    N2NRefuseReasonHandshakeDecodeError.fromCbor = function (cbor) {
        return N2NRefuseReasonHandshakeDecodeError.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2NRefuseReasonHandshakeDecodeError.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'N2NRefuseReasonHandshakeDecodeError'");
        var _a = __read(cbor.array, 3), idx = _a[0], _v = _a[1], _txt = _a[2];
        if (!(idx instanceof cbor_1.CborUInt &&
            idx.num === BigInt(1)))
            throw new Error("invalid CBOR for 'N2NRefuseReasonHandshakeDecodeError'; invalid reason index");
        if (!(_v instanceof cbor_1.CborUInt &&
            (0, N2NHandshakeVersion_1.canBeOldN2NVersionNumber)(_v.num)))
            throw new Error("invalid CBOR for 'N2NRefuseReasonHandshakeDecodeError'; invalid old version");
        if (!(_txt instanceof cbor_1.CborText))
            throw new Error("invalid CBOR for 'N2NRefuseReasonHandshakeDecodeError'; invalid error message");
        return new N2NRefuseReasonHandshakeDecodeError({
            version: (0, N2NHandshakeVersion_1.forceOldN2NVersionNumber)(_v.num),
            decodeError: _txt.text
        });
    };
    return N2NRefuseReasonHandshakeDecodeError;
}());
exports.N2NRefuseReasonHandshakeDecodeError = N2NRefuseReasonHandshakeDecodeError;
