"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2NVersionData = exports.isIN2NVersionData = exports.isIUpTo12N2NVersionData = exports.isIOldN2NVersionData = exports.isPeerSharingNumber = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var NetworkMagic_1 = require("../../types/NetworkMagic.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isPeerSharingNumber(n) {
    n = Number(n);
    return (n === 0 ||
        n === 1 ||
        n === 2);
}
exports.isPeerSharingNumber = isPeerSharingNumber;
function isIOldN2NVersionData(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, NetworkMagic_1.isNetworkMagic)(stuff.networkMagic) &&
        typeof stuff.initiatorAndResponderDiffusionMode === "boolean");
}
exports.isIOldN2NVersionData = isIOldN2NVersionData;
function isIUpTo12N2NVersionData(stuff) {
    return (isIOldN2NVersionData(stuff) &&
        isPeerSharingNumber(stuff.peerSharing) &&
        typeof stuff.query === "boolean");
}
exports.isIUpTo12N2NVersionData = isIUpTo12N2NVersionData;
function isIN2NVersionData(stuff) {
    return isIOldN2NVersionData(stuff);
    // || isUpTo12N2NVersionNumber( stuff ); // not required since `isIOldN2NVersionData( stuff ) is false
}
exports.isIN2NVersionData = isIN2NVersionData;
var N2NVersionData = /** @class */ (function () {
    function N2NVersionData(_a) {
        var networkMagic = _a.networkMagic, initiatorAndResponderDiffusionMode = _a.initiatorAndResponderDiffusionMode, peerSharing = _a.peerSharing, query = _a.query;
        if (!(0, NetworkMagic_1.isNetworkMagic)(networkMagic))
            throw new Error("invalid network magic");
        if (peerSharing !== undefined && !isPeerSharingNumber(peerSharing))
            throw new Error("invalid peer sharing number");
        if (query !== undefined && typeof query !== "boolean")
            throw new Error("invalid query option");
        Object.defineProperties(this, {
            networkMagic: {
                value: networkMagic,
                writable: false,
                enumerable: true,
                configurable: false
            },
            initiatorAndResponderDiffusionMode: {
                value: Boolean(initiatorAndResponderDiffusionMode),
                writable: false,
                enumerable: true,
                configurable: false
            },
            peerSharing: {
                value: peerSharing,
                writable: false,
                enumerable: true,
                configurable: false
            },
            query: {
                value: query,
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    N2NVersionData.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2NVersionData.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.networkMagic),
            new cbor_1.CborSimple(this.initiatorAndResponderDiffusionMode)
        ]);
    };
    N2NVersionData.fromCbor = function (cbor) {
        return N2NVersionData.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2NVersionData.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for N2NVersionData");
        var _a = __read(cbor.array, 4), _net = _a[0], _diffusionMode = _a[1], _peerSharing = _a[2], _query = _a[3];
        if (!(_net instanceof cbor_1.CborUInt &&
            _diffusionMode instanceof cbor_1.CborSimple))
            throw new Error("invalid CBOR for N2NVersionData");
        if (!(typeof _diffusionMode.simple === "boolean"))
            throw new Error("invalid CBOR for N2NVersionData");
        var peerSharing = undefined;
        var query = undefined;
        if (_peerSharing || _query) {
            if (!(_peerSharing instanceof cbor_1.CborUInt &&
                isPeerSharingNumber(_peerSharing.num)))
                throw new Error("invalid peerSharing CBOR format");
            if (!(_query instanceof cbor_1.CborSimple &&
                typeof _query.simple === "boolean"))
                throw new Error("invalid query CBOR format");
            peerSharing = Number(_peerSharing.num);
            query = _query.simple;
        }
        return new N2NVersionData({
            networkMagic: (0, NetworkMagic_1.forceNetworkMagic)(_net.num),
            initiatorAndResponderDiffusionMode: _diffusionMode.simple,
            peerSharing: peerSharing,
            query: query
        });
    };
    return N2NVersionData;
}());
exports.N2NVersionData = N2NVersionData;
