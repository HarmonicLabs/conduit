import { CanBeCborString, CborMap, CborObj, CborString, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
import { OldN2NVersionNumber, UpTo12N2NVersionNumber } from "./N2NHandshakeVersion.js";
import { IN2NVersionData, IUpTo12N2NVersionData, OldN2NVersionData, UpTo12N2NVersionData } from "./N2NVersionData.js";
export interface IOldN2NVersionTableEntry {
    version: OldN2NVersionNumber;
    data: IN2NVersionData;
}
export interface IOldN2NVersionTableEntryAsClass {
    version: OldN2NVersionNumber;
    data: OldN2NVersionData;
}
export declare function isIOldN2NVersionTableEntry(stuff: any): stuff is IOldN2NVersionTableEntry;
export interface IUpTo12N2NVersionTableEntry {
    version: UpTo12N2NVersionNumber;
    data: IUpTo12N2NVersionData;
}
export interface IUpTo12N2NVersionTableEntryAsClass {
    version: UpTo12N2NVersionNumber;
    data: UpTo12N2NVersionData;
}
export declare function isIUpTo12N2NVersionTableEntry(stuff: any): stuff is IUpTo12N2NVersionTableEntry;
export type IN2NVersionTableEntry = IOldN2NVersionTableEntry | IUpTo12N2NVersionTableEntry;
export type IN2NVersionTableEntryAsClass = IOldN2NVersionTableEntryAsClass | IUpTo12N2NVersionTableEntryAsClass;
export type IN2NVersionTable = IN2NVersionTableEntry[];
export type IN2NVersionTableAsClass = IN2NVersionTableEntryAsClass[];
export declare function isIN2NVersionTable(stuff: any): stuff is IN2NVersionTable;
export type IUpTo12N2NVersionTable = N2NVersionTable & {
    entries: IUpTo12N2NVersionTableEntry[];
};
export declare class N2NVersionTable implements ToCbor, ToCborObj {
    readonly entries: IN2NVersionTableAsClass;
    constructor(entries: IN2NVersionTable);
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cbor: CanBeCborString): N2NVersionTable;
    static fromCborObj(cbor: CborObj): N2NVersionTable;
}
