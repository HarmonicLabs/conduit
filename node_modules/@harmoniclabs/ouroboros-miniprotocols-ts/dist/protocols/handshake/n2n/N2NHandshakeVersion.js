"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.forceUpTo12N2NVersionNumber = exports.canBeUpTo12N2NVersionNumber = exports.isUpTo12N2NVersionNumber = exports.forceOldN2NVersionNumber = exports.canBeOldN2NVersionNumber = exports.isOldN2NVersionNumber = exports.forceN2NVersionNumber = exports.canBeN2NVersionNumber = exports.isN2NVersionNumber = exports.N2NHandshakeVersion = void 0;
var N2NHandshakeVersion;
(function (N2NHandshakeVersion) {
    N2NHandshakeVersion[N2NHandshakeVersion["v7"] = 7] = "v7";
    N2NHandshakeVersion[N2NHandshakeVersion["v8"] = 8] = "v8";
    N2NHandshakeVersion[N2NHandshakeVersion["v9"] = 9] = "v9";
    N2NHandshakeVersion[N2NHandshakeVersion["v10"] = 10] = "v10";
    N2NHandshakeVersion[N2NHandshakeVersion["v11"] = 11] = "v11";
    N2NHandshakeVersion[N2NHandshakeVersion["v12"] = 12] = "v12";
})(N2NHandshakeVersion || (exports.N2NHandshakeVersion = N2NHandshakeVersion = {}));
Object.freeze(N2NHandshakeVersion);
function isN2NVersionNumber(n) {
    return isOldN2NVersionNumber(n) || isUpTo12N2NVersionNumber(n);
}
exports.isN2NVersionNumber = isN2NVersionNumber;
function canBeN2NVersionNumber(n) {
    return canBeOldN2NVersionNumber(n) || canBeUpTo12N2NVersionNumber(n);
}
exports.canBeN2NVersionNumber = canBeN2NVersionNumber;
function forceN2NVersionNumber(n) {
    return canBeOldN2NVersionNumber(n) ? forceOldN2NVersionNumber(n) : forceUpTo12N2NVersionNumber(n);
}
exports.forceN2NVersionNumber = forceN2NVersionNumber;
function isOldN2NVersionNumber(n) {
    return (n === 7 ||
        n === 8 ||
        n === 9 ||
        n === 10);
}
exports.isOldN2NVersionNumber = isOldN2NVersionNumber;
function canBeOldN2NVersionNumber(n) {
    if (!(typeof n === "number" ||
        typeof n === "bigint"))
        return false;
    return isOldN2NVersionNumber(Number(n));
}
exports.canBeOldN2NVersionNumber = canBeOldN2NVersionNumber;
function forceOldN2NVersionNumber(n) {
    if (!(typeof n === "number" ||
        typeof n === "bigint"))
        throw new Error("can't derive 'OldVersionNumber'");
    n = Number(n);
    if (!isOldN2NVersionNumber(n))
        throw new Error("invalid 'OldN2NVersionNumber':" + n);
    return n;
}
exports.forceOldN2NVersionNumber = forceOldN2NVersionNumber;
function isUpTo12N2NVersionNumber(n) {
    return (n === 11 ||
        n === 12);
}
exports.isUpTo12N2NVersionNumber = isUpTo12N2NVersionNumber;
function canBeUpTo12N2NVersionNumber(n) {
    if (!(typeof n === "number" ||
        typeof n === "bigint"))
        return false;
    return isUpTo12N2NVersionNumber(Number(n));
}
exports.canBeUpTo12N2NVersionNumber = canBeUpTo12N2NVersionNumber;
function forceUpTo12N2NVersionNumber(n) {
    if (!(typeof n === "number" ||
        typeof n === "bigint"))
        throw new Error("can't derive 'OldVersionNumber'");
    n = Number(n);
    if (!isUpTo12N2NVersionNumber(n))
        throw new Error("invalid 'UpTo12N2NVersionNumber':" + n);
    return n;
}
exports.forceUpTo12N2NVersionNumber = forceUpTo12N2NVersionNumber;
