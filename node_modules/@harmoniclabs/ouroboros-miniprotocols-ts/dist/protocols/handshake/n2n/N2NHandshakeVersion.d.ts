export declare enum N2NHandshakeVersion {
    v7 = 7,
    v8 = 8,
    v9 = 9,
    v10 = 10,
    v11 = 11,
    v12 = 12
}
export declare function isN2NVersionNumber(n: number | N2NHandshakeVersion): n is N2NHandshakeVersion;
export declare function canBeN2NVersionNumber(n: number | bigint): boolean;
export declare function forceN2NVersionNumber(n: number | bigint): N2NHandshakeVersion;
export type OldN2NVersionNumber = 7 | 8 | 9 | 10 | N2NHandshakeVersion.v7 | N2NHandshakeVersion.v8 | N2NHandshakeVersion.v9 | N2NHandshakeVersion.v10;
export declare function isOldN2NVersionNumber(n: number | N2NHandshakeVersion): n is OldN2NVersionNumber;
export declare function canBeOldN2NVersionNumber(n: number | bigint | N2NHandshakeVersion): boolean;
export declare function forceOldN2NVersionNumber(n: number | bigint): OldN2NVersionNumber;
export type UpTo12N2NVersionNumber = 11 | 12 | N2NHandshakeVersion.v11 | N2NHandshakeVersion.v12;
export declare function isUpTo12N2NVersionNumber(n: number | N2NHandshakeVersion): n is UpTo12N2NVersionNumber;
export declare function canBeUpTo12N2NVersionNumber(n: number | bigint | N2NHandshakeVersion): boolean;
export declare function forceUpTo12N2NVersionNumber(n: number | bigint): UpTo12N2NVersionNumber;
export type N2NVersionNumber = OldN2NVersionNumber | UpTo12N2NVersionNumber;
