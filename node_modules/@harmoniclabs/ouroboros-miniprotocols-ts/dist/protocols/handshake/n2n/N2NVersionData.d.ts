import { CanBeCborString, CborArray, CborObj, CborString, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
import { NetworkMagic } from "../../types/NetworkMagic.js";
export type PeerSharingNumber = 0 | 1 | 2 | 0n | 1n | 2n;
export declare function isPeerSharingNumber(n: any): n is PeerSharingNumber;
export interface IOldN2NVersionData {
    networkMagic: NetworkMagic;
    initiatorAndResponderDiffusionMode: boolean;
}
export interface IUpTo12N2NVersionData extends IOldN2NVersionData {
    peerSharing: PeerSharingNumber;
    query: boolean;
}
export type IN2NVersionData = IOldN2NVersionData & Partial<IUpTo12N2NVersionData>;
export declare function isIOldN2NVersionData(stuff: any): stuff is IOldN2NVersionData;
export declare function isIUpTo12N2NVersionData(stuff: any): stuff is IUpTo12N2NVersionData;
export declare function isIN2NVersionData(stuff: any): stuff is IN2NVersionData;
export type OldN2NVersionData = N2NVersionData & {
    peerSharing: undefined;
    query: undefined;
};
export type UpTo12N2NVersionData = N2NVersionData & IUpTo12N2NVersionData;
export declare class N2NVersionData implements ToCbor, ToCborObj {
    readonly networkMagic: NetworkMagic;
    readonly initiatorAndResponderDiffusionMode: boolean;
    readonly peerSharing?: PeerSharingNumber;
    readonly query?: boolean;
    constructor({ networkMagic, initiatorAndResponderDiffusionMode, peerSharing, query }: IN2NVersionData);
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): N2NVersionData;
    static fromCborObj(cbor: CborObj): N2NVersionData;
}
