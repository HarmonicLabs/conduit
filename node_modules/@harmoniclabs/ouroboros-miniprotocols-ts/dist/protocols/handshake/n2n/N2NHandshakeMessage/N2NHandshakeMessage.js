"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.n2nHandshakeMessageFromCborObj = exports.n2nHandshakeMessageFromCbor = exports.n2nHandshakeMessageToCborObj = exports.n2nHandshakeMessageToCbor = exports.isN2NHandshakeMessage = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var N2NMessageAcceptVersion_1 = require("./N2NMessageAcceptVersion.js");
var N2NMessageRefuse_1 = require("./N2NMessageRefuse.js");
var N2NMessageProposeVersion_1 = require("./N2NMessageProposeVersion.js");
var N2NMessageQueryReply_1 = require("./N2NMessageQueryReply.js");
function isN2NHandshakeMessage(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (stuff instanceof N2NMessageProposeVersion_1.N2NMessageProposeVersion ||
            stuff instanceof N2NMessageAcceptVersion_1.N2NMessageAcceptVersion ||
            stuff instanceof N2NMessageRefuse_1.N2NMessageRefuse ||
            stuff instanceof N2NMessageQueryReply_1.N2NMessageQueryReply));
}
exports.isN2NHandshakeMessage = isN2NHandshakeMessage;
function n2nHandshakeMessageToCbor(n2nHandshakeMessage) {
    return n2nHandshakeMessage.toCbor();
}
exports.n2nHandshakeMessageToCbor = n2nHandshakeMessageToCbor;
function n2nHandshakeMessageToCborObj(n2nHandshakeMessage) {
    return n2nHandshakeMessage.toCborObj();
}
exports.n2nHandshakeMessageToCborObj = n2nHandshakeMessageToCborObj;
function n2nHandshakeMessageFromCbor(cbor) {
    return n2nHandshakeMessageFromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
}
exports.n2nHandshakeMessageFromCbor = n2nHandshakeMessageFromCbor;
function n2nHandshakeMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length > 0 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for N2NHandshakeMessage");
    var idx = Number(cbor.array[0].num);
    if (idx === 0)
        return N2NMessageProposeVersion_1.N2NMessageProposeVersion.fromCborObj(cbor);
    if (idx === 1)
        return N2NMessageAcceptVersion_1.N2NMessageAcceptVersion.fromCborObj(cbor);
    if (idx === 2)
        return N2NMessageRefuse_1.N2NMessageRefuse.fromCborObj(cbor);
    if (idx === 3)
        return N2NMessageQueryReply_1.N2NMessageQueryReply.fromCborObj(cbor);
    throw new Error("invalid CBOR for N2NHandshakeMessage; unknown reason index: " + idx);
}
exports.n2nHandshakeMessageFromCborObj = n2nHandshakeMessageFromCborObj;
