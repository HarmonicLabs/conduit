"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2CRefuseReasonVersionMismatch = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var N2CHandshakeVersion_1 = require("../N2CHandshakeVersion.js");
var N2CRefuseReasonVersionMismatch = /** @class */ (function () {
    function N2CRefuseReasonVersionMismatch(validVersions) {
        if (!(Array.isArray(validVersions) &&
            validVersions.every(N2CHandshakeVersion_1.isOldN2CVersionNumber)))
            throw new Error("invalid 'validVerisons' for 'N2CRefuseReasonVersionMismatch'");
        Object.defineProperty(this, "validVersions", {
            value: Object.freeze(validVersions.filter(function (v, i, thisArr) { return thisArr.indexOf(v) === i; })),
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    N2CRefuseReasonVersionMismatch.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2CRefuseReasonVersionMismatch.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            new cbor_1.CborArray(this.validVersions.map(function (v) { return new cbor_1.CborUInt(v); }))
        ]);
    };
    N2CRefuseReasonVersionMismatch.fromCbor = function (cbor) {
        return N2CRefuseReasonVersionMismatch.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2CRefuseReasonVersionMismatch.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'N2CRefuseReasonVersionMismatch'");
        var _a = __read(cbor.array, 2), idx = _a[0], _versions = _a[1];
        if (!(idx instanceof cbor_1.CborUInt &&
            idx.num === BigInt(0)))
            throw new Error("invalid CBOR for 'N2CRefuseReasonVersionMismatch'; invalid reason index");
        if (!(_versions instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'N2CRefuseReasonVersionMismatch'; invalid versions field");
        return new N2CRefuseReasonVersionMismatch(_versions.array.map(function (v) {
            if (!(v instanceof cbor_1.CborUInt))
                throw new Error("invalid CBOR for 'OldN2CVersionNumber'");
            // return forceOldN2CVersionNumber( v.num )
            return Number(v.num);
        }));
    };
    return N2CRefuseReasonVersionMismatch;
}());
exports.N2CRefuseReasonVersionMismatch = N2CRefuseReasonVersionMismatch;
