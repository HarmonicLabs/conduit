"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2CMessageAcceptVersion = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var N2CHandshakeVersion_1 = require("../N2CHandshakeVersion.js");
var N2CVersionData_1 = require("../N2CVersionData.js");
var N2CMessageAcceptVersion = /** @class */ (function () {
    function N2CMessageAcceptVersion(_a) {
        var version = _a.version, data = _a.data;
        if (!(0, N2CHandshakeVersion_1.isN2CVersionNumber)(version))
            throw new Error("invalid verision for 'OldN2CVersionNumber'");
        if (!(0, N2CVersionData_1.isIN2CVersionData)(data))
            throw new Error("invalid data for 'OldN2CVersionNumber'");
        Object.defineProperties(this, {
            version: {
                value: version,
                writable: false,
                enumerable: true,
                configurable: false
            },
            data: {
                value: new N2CVersionData_1.N2CVersionData(data),
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    N2CMessageAcceptVersion.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2CMessageAcceptVersion.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(1),
            new cbor_1.CborUInt(this.version),
            this.data.toCborObj()
        ]);
    };
    N2CMessageAcceptVersion.fromCbor = function (cbor) {
        return N2CMessageAcceptVersion.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2CMessageAcceptVersion.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'N2CMessageAcceptVersion'");
        var _a = __read(cbor.array, 3), idx = _a[0], _version = _a[1], _data = _a[2];
        if (!(idx instanceof cbor_1.CborUInt &&
            idx.num === BigInt(1)))
            throw new Error("invalid CBOR for 'N2CMessageAcceptVersion'; invalid messge index");
        if (!(_version instanceof cbor_1.CborUInt &&
            (0, N2CHandshakeVersion_1.canBeOldN2CVersionNumber)(_version.num)))
            throw new Error("invalid CBOR for 'N2CMessageAcceptVersion'; invalid messge index");
        return new N2CMessageAcceptVersion({
            version: (0, N2CHandshakeVersion_1.forceN2CVersionNumber)(_version.num),
            data: N2CVersionData_1.N2CVersionData.fromCborObj(_data)
        });
    };
    return N2CMessageAcceptVersion;
}());
exports.N2CMessageAcceptVersion = N2CMessageAcceptVersion;
