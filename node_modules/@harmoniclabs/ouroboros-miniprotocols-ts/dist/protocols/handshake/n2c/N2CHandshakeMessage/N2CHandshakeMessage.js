"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.n2cHandshakeMessageFromCborObj = exports.n2cHandshakeMessageFromCbor = exports.n2cHandshakeMessageToCborObj = exports.n2cHandshakeMessageToCbor = exports.isN2CHandshakeMessage = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var N2CMessageAcceptVersion_1 = require("./N2CMessageAcceptVersion.js");
var N2CMessageRefuse_1 = require("./N2CMessageRefuse.js");
var N2CMessageProposeVersion_1 = require("./N2CMessageProposeVersion.js");
var N2CMessageQueryReply_1 = require("./N2CMessageQueryReply.js");
function isN2CHandshakeMessage(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (stuff instanceof N2CMessageProposeVersion_1.N2CMessageProposeVersion ||
            stuff instanceof N2CMessageAcceptVersion_1.N2CMessageAcceptVersion ||
            stuff instanceof N2CMessageRefuse_1.N2CMessageRefuse ||
            stuff instanceof N2CMessageQueryReply_1.N2CMessageQueryReply));
}
exports.isN2CHandshakeMessage = isN2CHandshakeMessage;
function n2cHandshakeMessageToCbor(n2cHandshakeMessage) {
    return n2cHandshakeMessage.toCbor();
}
exports.n2cHandshakeMessageToCbor = n2cHandshakeMessageToCbor;
function n2cHandshakeMessageToCborObj(n2cHandshakeMessage) {
    return n2cHandshakeMessage.toCborObj();
}
exports.n2cHandshakeMessageToCborObj = n2cHandshakeMessageToCborObj;
function n2cHandshakeMessageFromCbor(cbor) {
    return n2cHandshakeMessageFromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
}
exports.n2cHandshakeMessageFromCbor = n2cHandshakeMessageFromCbor;
function n2cHandshakeMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length > 0 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for N2CHandshakeMessage");
    var idx = Number(cbor.array[0].num);
    if (idx === 0)
        return N2CMessageProposeVersion_1.N2CMessageProposeVersion.fromCborObj(cbor);
    if (idx === 1)
        return N2CMessageAcceptVersion_1.N2CMessageAcceptVersion.fromCborObj(cbor);
    if (idx === 2)
        return N2CMessageRefuse_1.N2CMessageRefuse.fromCborObj(cbor);
    if (idx === 3)
        return N2CMessageQueryReply_1.N2CMessageQueryReply.fromCborObj(cbor);
    throw new Error("invalid CBOR for N2CHandshakeMessage; unknown reason index: " + idx);
}
exports.n2cHandshakeMessageFromCborObj = n2cHandshakeMessageFromCborObj;
