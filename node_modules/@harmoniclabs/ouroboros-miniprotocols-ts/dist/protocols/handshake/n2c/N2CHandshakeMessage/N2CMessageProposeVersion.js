"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2CMessageProposeVersion = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var N2CVersionTable_1 = require("../N2CVersionTable.js");
var N2CMessageProposeVersion = /** @class */ (function () {
    function N2CMessageProposeVersion(_a) {
        var versionTable = _a.versionTable;
        versionTable = versionTable instanceof N2CVersionTable_1.N2CVersionTable ? versionTable : new N2CVersionTable_1.N2CVersionTable(versionTable);
        if (!(versionTable instanceof N2CVersionTable_1.N2CVersionTable))
            throw new Error("invalid verisionTable for 'N2CMessageProposeVersion'");
        Object.defineProperty(this, "versionTable", {
            value: versionTable,
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    N2CMessageProposeVersion.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2CMessageProposeVersion.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            this.versionTable.toCborObj()
        ]);
    };
    N2CMessageProposeVersion.fromCbor = function (cbor) {
        return N2CMessageProposeVersion.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2CMessageProposeVersion.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'N2CMessageProposeVersion'");
        var _a = __read(cbor.array, 2), idx = _a[0], _versions = _a[1];
        if (!(idx instanceof cbor_1.CborUInt &&
            idx.num === BigInt(0)))
            throw new Error("invalid CBOR for 'N2CMessageProposeVersion'; invalid messge index");
        return new N2CMessageProposeVersion({
            versionTable: N2CVersionTable_1.N2CVersionTable.fromCborObj(_versions)
        });
    };
    return N2CMessageProposeVersion;
}());
exports.N2CMessageProposeVersion = N2CMessageProposeVersion;
