"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2CVersionData = exports.isIN2CVersionData = exports.isIUpTo16N2CVersionData = exports.isIOldN2CVersionData = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var NetworkMagic_1 = require("../../types/NetworkMagic.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
;
function isIOldN2CVersionData(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (0, NetworkMagic_1.isNetworkMagic)(stuff.networkMagic);
}
exports.isIOldN2CVersionData = isIOldN2CVersionData;
function isIUpTo16N2CVersionData(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, NetworkMagic_1.isNetworkMagic)(stuff.networkMagic) &&
        typeof stuff.query === "boolean");
}
exports.isIUpTo16N2CVersionData = isIUpTo16N2CVersionData;
function isIN2CVersionData(stuff) {
    return isIOldN2CVersionData(stuff) || isIUpTo16N2CVersionData(stuff);
}
exports.isIN2CVersionData = isIN2CVersionData;
var N2CVersionData = /** @class */ (function () {
    function N2CVersionData(data) {
        var networkMagic;
        var query = undefined;
        if ((0, NetworkMagic_1.isNetworkMagic)(data))
            networkMagic = data;
        else {
            networkMagic = data.networkMagic;
            query = data.query;
        }
        if (!(0, NetworkMagic_1.isNetworkMagic)(networkMagic))
            throw new Error("invalid network magic");
        if (query !== undefined && typeof query !== "boolean")
            throw new Error("invalid query option");
        Object.defineProperties(this, {
            networkMagic: {
                value: networkMagic,
                writable: false,
                enumerable: true,
                configurable: false
            },
            query: {
                value: query,
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    N2CVersionData.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2CVersionData.prototype.toCborObj = function () {
        if (typeof this.query === "boolean") {
            return new cbor_1.CborArray([
                new cbor_1.CborUInt(this.networkMagic),
                new cbor_1.CborSimple(this.query)
            ]);
        }
        else
            return new cbor_1.CborUInt(this.networkMagic);
    };
    N2CVersionData.fromCbor = function (cbor) {
        return N2CVersionData.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2CVersionData.fromCborObj = function (cbor) {
        if (cbor instanceof cbor_1.CborUInt)
            return new N2CVersionData({ networkMagic: (0, NetworkMagic_1.forceNetworkMagic)(cbor.num) });
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for N2CVersionData");
        var _a = __read(cbor.array, 2), _net = _a[0], _query = _a[1];
        var query = undefined;
        if (!(_net instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for N2CVersionData");
        if (_query) {
            if (!(_query instanceof cbor_1.CborSimple &&
                typeof _query.simple === "boolean"))
                throw new Error("invalid CBOR for N2CVersionData");
            query = _query.simple;
        }
        return new N2CVersionData({
            networkMagic: (0, NetworkMagic_1.forceNetworkMagic)(_net.num),
            query: query
        });
    };
    return N2CVersionData;
}());
exports.N2CVersionData = N2CVersionData;
