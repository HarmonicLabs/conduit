"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.N2CVersionTable = exports.isIN2CVersionTable = exports.isIUpTo16N2CVersionTableEntry = exports.isIOldN2CVersionTableEntry = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var N2CVersionData_1 = require("./N2CVersionData.js");
var NetworkMagic_1 = require("../../types/NetworkMagic.js");
var N2CHandshakeVersion_1 = require("./N2CHandshakeVersion.js");
;
function isIOldN2CVersionTableEntry(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, N2CHandshakeVersion_1.isOldN2CVersionNumber)(stuff.version) &&
        (0, N2CVersionData_1.isIOldN2CVersionData)(stuff.data));
}
exports.isIOldN2CVersionTableEntry = isIOldN2CVersionTableEntry;
;
;
function isIUpTo16N2CVersionTableEntry(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, N2CHandshakeVersion_1.isUpTo16N2CVersionNumber)(stuff.version) &&
        (0, N2CVersionData_1.isIUpTo16N2CVersionData)(stuff.data));
}
exports.isIUpTo16N2CVersionTableEntry = isIUpTo16N2CVersionTableEntry;
function isIN2CVersionTable(stuff) {
    return (Array.isArray(stuff) &&
        stuff.every(function (entry) {
            return isIOldN2CVersionTableEntry(entry) ||
                isIUpTo16N2CVersionTableEntry(entry);
        }));
}
exports.isIN2CVersionTable = isIN2CVersionTable;
var N2CVersionTable = /** @class */ (function () {
    function N2CVersionTable(entries) {
        if (!isIN2CVersionTable(entries))
            throw new Error("invalid entries for 'N2CVersionTable'");
        entries = entries.map(function (_a) {
            var version = _a.version, data = _a.data;
            return ({
                version: version,
                data: (0, NetworkMagic_1.isNetworkMagic)(data) ? new N2CVersionData_1.N2CVersionData({ networkMagic: data }) :
                    data instanceof N2CVersionData_1.N2CVersionData ? data :
                        new N2CVersionData_1.N2CVersionData(data)
            });
        });
        (0, obj_utils_1.freezeAll)(entries);
        Object.defineProperty(this, "entries", {
            value: entries,
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    N2CVersionTable.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    N2CVersionTable.prototype.toCborObj = function () {
        return new cbor_1.CborMap(this.entries.map(function (_a) {
            var version = _a.version, data = _a.data;
            return ({
                k: new cbor_1.CborUInt(version),
                v: data.toCborObj()
            });
        }));
    };
    N2CVersionTable.fromCbor = function (cbor) {
        return N2CVersionTable.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    N2CVersionTable.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborMap))
            throw new Error("invalid CBOR for 'N2CVersionTable'");
        var entries = cbor.map;
        return new N2CVersionTable(entries.map(function (_a) {
            var k = _a.k, v = _a.v;
            if (!(k instanceof cbor_1.CborUInt))
                throw new Error("invalid CBOR for 'N2CVersionTable'; invalid 'OldN2CVersionNumber'");
            var n = Number(k.num);
            if (!(0, N2CHandshakeVersion_1.isOldN2CVersionNumber)(n))
                throw new Error("invalid CBOR for 'N2CVersionTable'; invalid 'OldN2CVersionNumber'");
            return {
                version: n,
                data: N2CVersionData_1.N2CVersionData.fromCborObj(v)
            };
        }));
    };
    return N2CVersionTable;
}());
exports.N2CVersionTable = N2CVersionTable;
