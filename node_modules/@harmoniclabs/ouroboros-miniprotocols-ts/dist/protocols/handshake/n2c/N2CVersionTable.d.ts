import { CanBeCborString, CborMap, CborObj, CborString, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
import { IOldN2CVersionData, IOldN2CVersionDataAsClass, IUpTo16N2CVersionData, UpTo16N2CVersionData } from "./N2CVersionData.js";
import { OldN2CVersionNumber, UpTo16N2CVersionNumber } from "./N2CHandshakeVersion.js";
export interface IOldN2CVersionTableEntry {
    version: OldN2CVersionNumber;
    data: IOldN2CVersionData;
}
export interface IOldN2CVersionTableEntryAsClass {
    version: OldN2CVersionNumber;
    data: IOldN2CVersionDataAsClass;
}
export declare function isIOldN2CVersionTableEntry(stuff: any): stuff is IOldN2CVersionTableEntry;
export interface IUpTo16N2CVersionTableEntry {
    version: UpTo16N2CVersionNumber;
    data: IUpTo16N2CVersionData;
}
export interface IUpTo16N2CVersionTableEntryAsClass {
    version: UpTo16N2CVersionNumber;
    data: UpTo16N2CVersionData;
}
export declare function isIUpTo16N2CVersionTableEntry(stuff: any): stuff is IUpTo16N2CVersionTableEntry;
export type IN2CVersionTableEntry = IOldN2CVersionTableEntry | IUpTo16N2CVersionTableEntry;
export type IN2CVersionTableEntryAsClass = IOldN2CVersionTableEntryAsClass | IUpTo16N2CVersionTableEntryAsClass;
export type IN2CVersionTable = IN2CVersionTableEntry[];
export type IN2CVersionTableAsClass = IN2CVersionTableEntryAsClass[];
export declare function isIN2CVersionTable(stuff: any): stuff is IN2CVersionTable;
export type IUpTo16N2CVersionTable = N2CVersionTable & {
    entries: IUpTo16N2CVersionTableEntry[];
};
export declare class N2CVersionTable implements ToCbor, ToCborObj {
    readonly entries: IN2CVersionTableAsClass;
    constructor(entries: IN2CVersionTable);
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cbor: CanBeCborString): N2CVersionTable;
    static fromCborObj(cbor: CborObj): N2CVersionTable;
}
