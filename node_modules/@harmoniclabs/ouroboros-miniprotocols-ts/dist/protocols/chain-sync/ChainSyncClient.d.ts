import { Multiplexer } from "../../multiplexer/Multiplexer.js";
import { IChainPoint } from "../types/ChainPoint.js";
import { ChainSyncMessage } from "./ChainSyncMessage.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { ErrorListener } from "../../common/ErrorListener.js";
import { ChainSyncRollBackwards, ChainSyncRollForward, ChainSyncIntersectFound, ChainSyncIntersectNotFound, ChainSyncAwaitReply } from "./messages/index.js";
type ChainSyncClientEvtListener = (msg: ChainSyncMessage) => void;
type AnyChainSyncClientEvtListener = ChainSyncClientEvtListener | ((err: Error) => void);
type ChainSyncClientEvtListeners = {
    rollBackwards: ChainSyncClientEvtListener[];
    rollForward: ChainSyncClientEvtListener[];
    intersectFound: ChainSyncClientEvtListener[];
    intersectNotFound: ChainSyncClientEvtListener[];
    awaitReply: ChainSyncClientEvtListener[];
    error: ((err: Error) => void)[];
};
type ChainSyncClientEvtName = keyof Omit<ChainSyncClientEvtListeners, "error">;
type AnyChainSyncClientEvtName = ChainSyncClientEvtName | "error";
type EvtListenerOf<EvtName extends AnyChainSyncClientEvtName> = EvtName extends "rollBackwards" ? (msg: ChainSyncRollBackwards) => void : EvtName extends "rollForward" ? (msg: ChainSyncRollForward) => void : EvtName extends "intersectFound" ? (msg: ChainSyncIntersectFound) => void : EvtName extends "intersectNotFound" ? (msg: ChainSyncIntersectNotFound) => void : EvtName extends "awaitReply" ? (msg: ChainSyncAwaitReply) => void : EvtName extends "error" ? (err: Error) => void : never;
type MsgOf<EvtName extends AnyChainSyncClientEvtName> = EvtName extends "rollBackwards" ? ChainSyncRollBackwards : EvtName extends "rollForward" ? ChainSyncRollForward : EvtName extends "intersectFound" ? ChainSyncIntersectFound : EvtName extends "intersectNotFound" ? ChainSyncIntersectNotFound : EvtName extends "awaitReply" ? ChainSyncAwaitReply : EvtName extends "error" ? Error : never;
export interface IChainSyncClient {
    readonly mplexer: Multiplexer;
    addEventListener(evt: "rollBackwards", listener: ChainSyncClientEvtListener, options?: AddEvtListenerOpts): this;
    addEventListener(evt: "rollForward", listener: ChainSyncClientEvtListener, options?: AddEvtListenerOpts): this;
    addEventListener(evt: "intersectFound", listener: ChainSyncClientEvtListener, options?: AddEvtListenerOpts): this;
    addEventListener(evt: "intersectNotFound", listener: ChainSyncClientEvtListener, options?: AddEvtListenerOpts): this;
    addEventListener(evt: "awaitReply", listener: ChainSyncClientEvtListener, options?: AddEvtListenerOpts): this;
    addEventListener(evt: "error", listener: (err: Error) => void): this;
    addEventListener(evt: AnyChainSyncClientEvtName, listener: AnyChainSyncClientEvtListener, options?: AddEvtListenerOpts): this;
    addListener(evt: "rollBackwards", listener: ChainSyncClientEvtListener): this;
    addListener(evt: "rollForward", listener: ChainSyncClientEvtListener): this;
    addListener(evt: "intersectFound", listener: ChainSyncClientEvtListener): this;
    addListener(evt: "intersectNotFound", listener: ChainSyncClientEvtListener): this;
    addListener(evt: "awaitReply", listener: ChainSyncClientEvtListener): this;
    addListener(evt: "error", listener: (err: Error) => void): this;
    addListener(evt: AnyChainSyncClientEvtName, listener: ChainSyncClientEvtListener): this;
    on(evt: "rollBackwards", listener: ChainSyncClientEvtListener): this;
    on(evt: "rollForward", listener: ChainSyncClientEvtListener): this;
    on(evt: "intersectFound", listener: ChainSyncClientEvtListener): this;
    on(evt: "intersectNotFound", listener: ChainSyncClientEvtListener): this;
    on(evt: "awaitReply", listener: ChainSyncClientEvtListener): this;
    on(evt: "error", listener: (err: Error) => void): this;
    on(evt: ChainSyncClientEvtName, listener: ChainSyncClientEvtListener): this;
    once(evt: "rollBackwards", listener: ChainSyncClientEvtListener): this;
    once(evt: "rollForward", listener: ChainSyncClientEvtListener): this;
    once(evt: "intersectFound", listener: ChainSyncClientEvtListener): this;
    once(evt: "intersectNotFound", listener: ChainSyncClientEvtListener): this;
    once(evt: "awaitReply", listener: ChainSyncClientEvtListener): this;
    once(evt: "error", listener: (err: Error) => void): this;
    once(evt: ChainSyncClientEvtName, listener: ChainSyncClientEvtListener): this;
    removeEventListener(evt: "rollBackwards", listener: ChainSyncClientEvtListener): this;
    removeEventListener(evt: "rollForward", listener: ChainSyncClientEvtListener): this;
    removeEventListener(evt: "intersectFound", listener: ChainSyncClientEvtListener): this;
    removeEventListener(evt: "intersectNotFound", listener: ChainSyncClientEvtListener): this;
    removeEventListener(evt: "awaitReply", listener: ChainSyncClientEvtListener): this;
    removeEventListener(evt: "error", listener: (err: Error) => void): this;
    removeEventListener(evt: ChainSyncClientEvtName | "error", listener: ChainSyncClientEvtListener): this;
    removeListener(evt: "rollBackwards", listener: ChainSyncClientEvtListener): this;
    removeListener(evt: "rollForward", listener: ChainSyncClientEvtListener): this;
    removeListener(evt: "intersectFound", listener: ChainSyncClientEvtListener): this;
    removeListener(evt: "intersectNotFound", listener: ChainSyncClientEvtListener): this;
    removeListener(evt: "awaitReply", listener: ChainSyncClientEvtListener): this;
    removeListener(evt: "error", listener: (err: Error) => void): this;
    removeListener(evt: ChainSyncClientEvtName | "error", listener: ChainSyncClientEvtListener): this;
    off(evt: "rollBackwards", listener: ChainSyncClientEvtListener): this;
    off(evt: "rollForward", listener: ChainSyncClientEvtListener): this;
    off(evt: "intersectFound", listener: ChainSyncClientEvtListener): this;
    off(evt: "intersectNotFound", listener: ChainSyncClientEvtListener): this;
    off(evt: "awaitReply", listener: ChainSyncClientEvtListener): this;
    off(evt: "error", listener: ErrorListener): this;
    off(evt: ChainSyncClientEvtName, listener: ChainSyncClientEvtListener): this;
    removeAllListeners(event?: ChainSyncClientEvtName | "error"): this;
    emit(evt: "rollBackwards", msg: ChainSyncRollBackwards): boolean;
    emit(evt: "rollForward", msg: ChainSyncRollForward): boolean;
    emit(evt: "intersectFound", msg: ChainSyncIntersectFound): boolean;
    emit(evt: "intersectNotFound", msg: ChainSyncIntersectNotFound): boolean;
    emit(evt: "awaitReply", msg: ChainSyncAwaitReply): boolean;
    emit(evt: "error", err: Error): boolean;
    emit(evt: ChainSyncClientEvtName | "error", msg: ChainSyncMessage | Error): boolean;
    /**
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
     *
     * @returns {true} `false` if event is cancelable, and at least one of the event handlers which received event called Event.preventDefault(). Otherwise `true`.
     */
    dispatchEvent(evt: "rollBackwards", msg: ChainSyncRollBackwards): boolean;
    dispatchEvent(evt: "rollForward", msg: ChainSyncRollForward): boolean;
    dispatchEvent(evt: "intersectFound", msg: ChainSyncIntersectFound): boolean;
    dispatchEvent(evt: "intersectNotFound", msg: ChainSyncIntersectNotFound): boolean;
    dispatchEvent(evt: "awaitReply", msg: ChainSyncAwaitReply): boolean;
    dispatchEvent(evt: "error", err: Error): boolean;
    dispatchEvent(evt: ChainSyncClientEvtName, msg: ChainSyncMessage): boolean;
}
export declare class ChainSyncClient {
    readonly mplexer: Multiplexer;
    clearListeners: (event?: ChainSyncClientEvtName) => this;
    addEventListener: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts) => this;
    addListener: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    on: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    once: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeEventListener: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeListener: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    off: <EvtName extends AnyChainSyncClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeAllListeners: (event?: ChainSyncClientEvtName) => this;
    emit: <EvtName extends ChainSyncClientEvtName>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    dispatchEvent: <EvtName extends ChainSyncClientEvtName>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    /** @deprecated */
    onRollBackwards: (cb: (msg: ChainSyncRollBackwards) => void) => void;
    /** @deprecated */
    onRollForward: (cb: (msg: ChainSyncRollForward) => void) => void;
    /** @deprecated */
    onIntersectFound: (cb: (msg: ChainSyncIntersectFound) => void) => void;
    /** @deprecated */
    onIntersectNotFound: (cb: (msg: ChainSyncIntersectNotFound) => void) => void;
    /** @deprecated */
    onAwaitReply: (cb: (msg: ChainSyncAwaitReply) => void) => void;
    constructor(multiplexer: Multiplexer);
    requestNext(): Promise<ChainSyncRollForward | ChainSyncRollBackwards>;
    findIntersect(points: IChainPoint[]): Promise<ChainSyncIntersectFound | ChainSyncIntersectNotFound>;
    done(): void;
}
export {};
