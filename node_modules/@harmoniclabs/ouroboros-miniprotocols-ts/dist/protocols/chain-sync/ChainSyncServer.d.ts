import { ChainSyncFindIntersect, ChainSyncIntersectFound, ChainSyncMessageDone, ChainSyncRequestNext, ChainSyncRollBackwards, ChainSyncRollForward } from "./messages/index.js";
import { ChainSyncMessage } from "./ChainSyncMessage.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { IChainDb } from "../interfaces/IChainDb.js";
import { ChainPoint, IChainPoint } from "../types/ChainPoint.js";
import { Multiplexer } from "../../multiplexer/Multiplexer.js";
import { IChainTip } from "../types/index.js";
type ChainSyncServerEvtName = keyof Omit<ChainSyncServerEvtListeners, "error">;
type AnyChainSyncServerEvtName = ChainSyncServerEvtName | "error";
type ChainSyncServerEvtListeners = {
    requestNext: ChainSyncServerEvtListener[];
    findIntersect: ChainSyncServerEvtListener[];
    done: ChainSyncServerEvtListener[];
    error: ((err: Error) => void)[];
};
type ChainSyncServerEvtListener = (msg: ChainSyncMessage) => void;
type MsgOf<EvtName extends AnyChainSyncServerEvtName> = EvtName extends "requestNext" ? ChainSyncRequestNext : EvtName extends "findIntersect" ? ChainSyncFindIntersect : EvtName extends "done" ? ChainSyncMessageDone : EvtName extends "error" ? Error : never;
type EvtListenerOf<EvtName extends AnyChainSyncServerEvtName> = EvtName extends "requestNext" ? (msg: ChainSyncRollBackwards) => void : EvtName extends "findIntersect" ? (msg: ChainSyncRollForward) => void : EvtName extends "done" ? (msg: ChainSyncIntersectFound) => void : EvtName extends "error" ? (err: Error) => void : never;
export declare class ChainSyncServer {
    readonly multiplexer: Multiplexer;
    readonly chainDb: IChainDb;
    private clientIndex;
    private tip;
    private prevIntersectPoint;
    private synced;
    private eventListeners;
    private onceEventListeners;
    constructor(thisMultiplexer: Multiplexer, thisChainDb: IChainDb);
    handleFindIntersect(points: ChainPoint[]): Promise<void>;
    /**
     * @pure
     */
    sendIntersectFound(point: IChainPoint, tip: IChainTip): void;
    /**
     * @pure
     */
    sendIntersectNotFound(tip: IChainTip): void;
    handleReqNext(): Promise<void>;
    sendAwaitReply(): void;
    sendRollBackwards(rollbackPoint: IChainPoint, tip?: IChainTip): Promise<void>;
    sendRollForward(data: Uint8Array, tip?: IChainTip): Promise<void>;
    handleClientDone(): void;
    hasEventListeners(): boolean;
    private _hasEventListeners;
    addEventListenerOnce<EvtName extends ChainSyncServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    once<EvtName extends ChainSyncServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    addEventListener<EvtName extends ChainSyncServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts): typeof self;
    addListener(evt: ChainSyncServerEvtName, callback: (data: any) => void): this;
    on(evt: AnyChainSyncServerEvtName, callback: (data: any) => void): this;
    removeEventListener<EvtName extends ChainSyncServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    removeListener(evt: ChainSyncServerEvtName, callback: (data: any) => void): this;
    off(evt: ChainSyncServerEvtName, callback: (data: any) => void): this;
    emit<EvtName extends ChainSyncServerEvtName>(evt: EvtName, msg: MsgOf<EvtName>): boolean;
    dispatchEvent(evt: AnyChainSyncServerEvtName, msg: ChainSyncMessage | Error): boolean;
    removeAllListeners(event?: ChainSyncServerEvtName): void;
    clearListeners(evt?: ChainSyncServerEvtName): void;
    private _clearListeners;
}
export {};
