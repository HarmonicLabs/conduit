"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSyncIntersectNotFound = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var types_1 = require("../../types/index.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var ChainSyncIntersectNotFound = /** @class */ (function () {
    function ChainSyncIntersectNotFound(intersect, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var tip = intersect.tip;
        if (!((0, types_1.isIChainTip)(tip)))
            throw new Error("invalid IChainSyncIntersectNotFound interface");
        this.tip = tip instanceof types_1.ChainTip ? tip : new types_1.ChainTip(tip);
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(intersect);
    }
    ;
    ChainSyncIntersectNotFound.prototype.toJSON = function () { return this.toJson(); };
    ChainSyncIntersectNotFound.prototype.toJson = function () {
        return {
            tip: this.tip.toJson()
        };
    };
    ChainSyncIntersectNotFound.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    ChainSyncIntersectNotFound.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    ChainSyncIntersectNotFound.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(6),
            this.tip.toCborObj()
        ]);
    };
    ChainSyncIntersectNotFound.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ?
            cbor :
            (0, cbor_1.forceCborString)(cbor).toBuffer();
        return ChainSyncIntersectNotFound.fromCborObj(cbor_1.Cbor.parse(buff), buff);
    };
    ChainSyncIntersectNotFound.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(6)))
            throw new Error("invalid CBOR for 'ChainSyncIntersectNotFound");
        var _a = __read(cbor.array, 2), _idx = _a[0], tipCbor = _a[1];
        return new ChainSyncIntersectNotFound({
            tip: types_1.ChainTip.fromCborObj(tipCbor)
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return ChainSyncIntersectNotFound;
}());
exports.ChainSyncIntersectNotFound = ChainSyncIntersectNotFound;
