"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSyncFindIntersect = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var ChainPoint_1 = require("../../types/ChainPoint.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var ChainSyncFindIntersect = /** @class */ (function () {
    function ChainSyncFindIntersect(ask, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var points = ask.points;
        if (!(Array.isArray(points) && points.every(ChainPoint_1.isIChainPoint)))
            throw new Error("invalid IMessageFindIntesect interface");
        this.points = points.map(function (p) { return p instanceof ChainPoint_1.ChainPoint ? p : new ChainPoint_1.ChainPoint(p); });
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(ask);
    }
    ChainSyncFindIntersect.prototype.toJSON = function () { return this.toJson(); };
    ChainSyncFindIntersect.prototype.toJson = function () {
        return {
            points: this.points.map(function (p) { return p.toJson(); })
        };
    };
    ChainSyncFindIntersect.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    ChainSyncFindIntersect.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    ChainSyncFindIntersect.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(4),
            new cbor_1.CborArray(this.points.map(function (p) { return p.toCborObj(); }))
        ]);
    };
    ChainSyncFindIntersect.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ?
            cbor :
            (0, cbor_1.forceCborString)(cbor).toBuffer();
        return ChainSyncFindIntersect.fromCborObj(cbor_1.Cbor.parse(buff), buff);
    };
    ChainSyncFindIntersect.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(4) &&
            cbor.array[1] instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'ChainSyncAwaitReply");
        var pointsCbor = cbor.array[1].array;
        return new ChainSyncFindIntersect({
            points: pointsCbor.map(ChainPoint_1.ChainPoint.fromCborObj)
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return ChainSyncFindIntersect;
}());
exports.ChainSyncFindIntersect = ChainSyncFindIntersect;
