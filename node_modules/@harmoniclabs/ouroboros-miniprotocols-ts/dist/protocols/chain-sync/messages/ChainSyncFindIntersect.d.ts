import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
import { ChainPoint, IChainPoint } from "../../types/ChainPoint.js";
export interface IChainSyncFindIntersect {
    points: readonly IChainPoint[];
}
export declare class ChainSyncFindIntersect implements ToCbor, ToCborObj, IChainSyncFindIntersect {
    readonly cborRef: SubCborRef | undefined;
    readonly points: readonly ChainPoint[];
    constructor(ask: IChainSyncFindIntersect, cborRef?: SubCborRef | undefined);
    toJSON(): {
        points: ({
            blockHeader?: undefined;
        } | {
            blockHeader: {
                hash: string;
                slot: number;
            };
        })[];
    };
    toJson(): {
        points: ({
            blockHeader?: undefined;
        } | {
            blockHeader: {
                hash: string;
                slot: number;
            };
        })[];
    };
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): ChainSyncFindIntersect;
    static fromCborObj(cbor: CborObj, originalBytes?: Uint8Array | undefined): ChainSyncFindIntersect;
}
