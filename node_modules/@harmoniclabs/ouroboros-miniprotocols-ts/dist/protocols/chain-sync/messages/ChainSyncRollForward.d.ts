import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
import { ChainTip, IChainTip } from "../../types/ChainTip.js";
export interface IChainSyncRollForward {
    data: CborObj;
    tip: IChainTip;
}
export declare class ChainSyncRollForward implements ToCbor, ToCborObj, IChainSyncRollForward {
    readonly cborRef: SubCborRef | undefined;
    readonly data: CborObj;
    readonly tip: ChainTip;
    constructor(forward: IChainSyncRollForward, cborRef?: SubCborRef | undefined);
    toJSON(): {
        data: string;
        tip: {
            point: {
                blockHeader?: undefined;
            } | {
                blockHeader: {
                    hash: string;
                    slot: number;
                };
            };
            blockNo: number;
        };
    };
    toJson(): {
        data: string;
        tip: {
            point: {
                blockHeader?: undefined;
            } | {
                blockHeader: {
                    hash: string;
                    slot: number;
                };
            };
            blockNo: number;
        };
    };
    toString(): string;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    /**
     * @returns {Uint8Array}
     * the bytes of `this.data` as present on `this.cborBytes`
     * (using `Cbor.parseLazy`)
     */
    getDataBytes(): Uint8Array;
    static fromCbor(cbor: CanBeCborString): ChainSyncRollForward;
    static fromCborObj(cbor: CborObj, originalBytes?: Uint8Array | undefined): ChainSyncRollForward;
}
