import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
import { ChainPoint, IChainPoint } from "../../types/ChainPoint.js";
import { ChainTip, IChainTip } from "../../types/ChainTip.js";
export interface IChainSyncRollBackwards {
    point: IChainPoint;
    tip: IChainTip;
}
export declare class ChainSyncRollBackwards implements ToCbor, ToCborObj, IChainSyncRollBackwards {
    readonly cborRef: SubCborRef | undefined;
    readonly point: ChainPoint;
    readonly tip: ChainTip;
    constructor(rollback: IChainSyncRollBackwards, cborRef?: SubCborRef | undefined);
    toJSON(): {
        point: {
            blockHeader?: undefined;
        } | {
            blockHeader: {
                hash: string;
                slot: number;
            };
        };
        tip: {
            point: {
                blockHeader?: undefined;
            } | {
                blockHeader: {
                    hash: string;
                    slot: number;
                };
            };
            blockNo: number;
        };
    };
    toJson(): {
        point: {
            blockHeader?: undefined;
        } | {
            blockHeader: {
                hash: string;
                slot: number;
            };
        };
        tip: {
            point: {
                blockHeader?: undefined;
            } | {
                blockHeader: {
                    hash: string;
                    slot: number;
                };
            };
            blockNo: number;
        };
    };
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): ChainSyncRollBackwards;
    static fromCborObj(cbor: CborObj, originalBytes?: Uint8Array | undefined): ChainSyncRollBackwards;
}
