"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSyncServer = void 0;
var messages_1 = require("./messages/index.js");
var ChainSyncMessage_1 = require("./ChainSyncMessage.js");
var cbor_1 = require("@harmoniclabs/cbor");
var ChainPoint_1 = require("../types/ChainPoint.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var MiniProtocol_1 = require("../../MiniProtocol/index.js");
var types_1 = require("../types/index.js");
function msgToName(msg) {
    if (msg instanceof messages_1.ChainSyncRequestNext)
        return "requestNext";
    if (msg instanceof messages_1.ChainSyncFindIntersect)
        return "findIntersect";
    if (msg instanceof messages_1.ChainSyncMessageDone)
        return "done";
    return undefined;
}
function isAnyChainSyncServerEvtName(str) {
    return isChainSyncServerEvtName(str) || str === "error";
}
function isChainSyncServerEvtName(str) {
    return (str === "requestNext" ||
        str === "findIntersect" ||
        str === "done");
}
var ChainSyncServer = /** @class */ (function () {
    function ChainSyncServer(thisMultiplexer, thisChainDb) {
        var _this = this;
        this.eventListeners = Object.freeze({
            requestNext: [],
            findIntersect: [],
            done: [],
            error: []
        });
        this.onceEventListeners = Object.freeze({
            requestNext: [],
            findIntersect: [],
            done: [],
            error: []
        });
        this.multiplexer = thisMultiplexer;
        this.chainDb = thisChainDb;
        // server state
        this.clientIndex = BigInt(0);
        this.tip = new types_1.ChainTip({ point: ChainPoint_1.ChainPoint.origin, blockNo: 0 });
        this.chainDb.getTip().then(function (tip) {
            _this.tip = new types_1.ChainTip(tip);
        });
        this.prevIntersectPoint = undefined;
        this.synced = false;
        // handle muliplexer messages s
        var prevBytes = undefined;
        var queque = [];
        this.multiplexer.on(MiniProtocol_1.MiniProtocol.ChainSync, function (chunk) {
            if (!_this.hasEventListeners())
                return;
            var offset = -1;
            var thing;
            var msg;
            if (prevBytes) {
                var tmp = new Uint8Array(prevBytes.length + chunk.length);
                tmp.set(prevBytes, 0);
                tmp.set(chunk, prevBytes.length);
                chunk = tmp;
                prevBytes = undefined;
            }
            while (offset < chunk.length) {
                var originalSTLimit = Error.stackTraceLimit;
                Error.stackTraceLimit = 0;
                try {
                    thing = cbor_1.Cbor.parseWithOffset(chunk);
                }
                catch (_a) {
                    Error.stackTraceLimit = originalSTLimit;
                    // assume the error is of "missing bytes";
                    prevBytes = Uint8Array.prototype.slice.call(chunk);
                    break;
                }
                offset = thing.offset;
                // console.log( "msg byetes", offset, toHex( chunk.subarray( 0, offset ) ) );
                // Error.stackTraceLimit = 0;
                try {
                    msg = (0, ChainSyncMessage_1.chainSyncMessageFromCborObj)(thing.parsed);
                    // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
                    msg.cborBytes = Uint8Array.prototype.slice.call(chunk, 0, offset);
                    queque.unshift(msg);
                }
                catch (e) {
                    // before dispatch event
                    Error.stackTraceLimit = originalSTLimit;
                    var err = new Error(typeof (e === null || e === void 0 ? void 0 : e.message) === "string" ? e.message : "" +
                        "\ndata: " + (0, uint8array_utils_1.toHex)(chunk) + "\n");
                    _this.dispatchEvent("error", err);
                }
                finally {
                    Error.stackTraceLimit = originalSTLimit;
                }
                if (offset < chunk.length) {
                    // reference same memory (`subarray`)
                    // ignore the parsed bytes
                    chunk = chunk.subarray(offset);
                    offset = -1;
                }
            }
            var msgStr;
            while (msg = queque.pop()) {
                msgStr = msgToName(msg);
                if (!msgStr)
                    continue; // ingore messages not expected by the Server
                _this.dispatchEvent(msgStr, msg);
            }
        });
        this.on("requestNext", function (msg) { return _this.handleReqNext(); });
        this.on("findIntersect", function (msg) { return _this.handleFindIntersect(__spreadArray([], __read(msg.points), false)); });
        this.on("done", function (msg) { _this.handleClientDone(); });
    }
    // chain-sync server messages implementation
    ChainSyncServer.prototype.handleFindIntersect = function (points) {
        return __awaiter(this, void 0, void 0, function () {
            var intersection, tip, _a, point, blockNo;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, (_b = this.chainDb).findIntersect.apply(_b, __spreadArray([], __read(points), false))];
                    case 1:
                        intersection = _c.sent();
                        return [4 /*yield*/, this.chainDb.getTip()];
                    case 2:
                        tip = _c.sent();
                        if (!intersection) {
                            this.sendIntersectNotFound(tip);
                            return [2 /*return*/];
                        }
                        _a = new types_1.ChainTip(intersection), point = _a.point, blockNo = _a.blockNo;
                        this.clientIndex = BigInt(blockNo);
                        this.prevIntersectPoint = point;
                        this.sendIntersectFound(point, tip);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @pure
     */
    ChainSyncServer.prototype.sendIntersectFound = function (point, tip) {
        this.multiplexer.send(new messages_1.ChainSyncIntersectFound({ point: point, tip: tip }).toCbor().toBuffer(), {
            hasAgency: true,
            protocol: MiniProtocol_1.MiniProtocol.ChainSync
        });
    };
    /**
     * @pure
     */
    ChainSyncServer.prototype.sendIntersectNotFound = function (tip) {
        this.multiplexer.send(new messages_1.ChainSyncIntersectNotFound({ tip: tip }).toCbor().toBuffer(), {
            hasAgency: true,
            protocol: MiniProtocol_1.MiniProtocol.ChainSync
        });
    };
    ChainSyncServer.prototype.handleReqNext = function () {
        return __awaiter(this, void 0, void 0, function () {
            function handleExtend(extendData) {
                return __awaiter(this, void 0, void 0, function () {
                    var newTip, intersection, _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                newTip = extendData.tip, intersection = extendData.intersection;
                                self.chainDb.off("extend", handleExtend);
                                self.chainDb.off("fork", handleFork);
                                self.synced = ChainPoint_1.ChainPoint.eq(self.tip.point, intersection.point);
                                self.tip = new types_1.ChainTip(newTip);
                                self.clientIndex++;
                                _b = (_a = self).sendRollForward;
                                return [4 /*yield*/, self.chainDb.getBlockNo(self.clientIndex)];
                            case 1:
                                _b.apply(_a, [_c.sent(), self.tip]);
                                return [2 /*return*/];
                        }
                    });
                });
            }
            function handleFork(extendData) {
                return __awaiter(this, void 0, void 0, function () {
                    var newTip, intersection;
                    return __generator(this, function (_a) {
                        newTip = extendData.tip, intersection = extendData.intersection;
                        self.chainDb.off("extend", handleExtend);
                        self.chainDb.off("fork", handleFork);
                        self.tip = new types_1.ChainTip(newTip);
                        self.synced = false;
                        self.clientIndex = BigInt(intersection.blockNo);
                        self.sendRollBackwards(intersection.point, tip);
                        return [2 /*return*/];
                    });
                });
            }
            var tip, point, intersection, self, nextClientBlock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.chainDb.getTip()];
                    case 1:
                        tip = _a.sent();
                        if (this.prevIntersectPoint !== undefined) {
                            point = this.prevIntersectPoint;
                            this.prevIntersectPoint = undefined;
                            this.sendRollBackwards(point, tip);
                            return [2 /*return*/];
                        }
                        if (!!types_1.ChainTip.eq(this.tip, tip)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.chainDb.findIntersect(this.tip.point, tip.point)];
                    case 2:
                        intersection = _a.sent();
                        if (!intersection)
                            throw new Error("expected intersection not found");
                        this.clientIndex = BigInt(intersection.blockNo);
                        this.tip = new types_1.ChainTip(tip);
                        this.sendRollBackwards(intersection.point, tip);
                        return [2 /*return*/];
                    case 3:
                        self = this;
                        if (this.synced) {
                            this.chainDb.on("extend", handleExtend);
                            this.chainDb.on("fork", handleFork);
                            this.sendAwaitReply();
                            return [2 /*return*/];
                        }
                        // we are following the same chain (no forks)
                        // and the client is not yet synced (is behind)
                        this.clientIndex++;
                        return [4 /*yield*/, this.chainDb.getBlockNo(this.clientIndex)];
                    case 4:
                        nextClientBlock = _a.sent();
                        this.sendRollForward(nextClientBlock, tip);
                        return [2 /*return*/];
                }
            });
        });
    };
    ChainSyncServer.prototype.sendAwaitReply = function () {
        this.multiplexer.send(new messages_1.ChainSyncAwaitReply().toCbor().toBuffer(), {
            hasAgency: true,
            protocol: MiniProtocol_1.MiniProtocol.ChainSync
        });
    };
    ChainSyncServer.prototype.sendRollBackwards = function (rollbackPoint, tip) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.synced = false;
                        _b = (_a = this.multiplexer).send;
                        _c = messages_1.ChainSyncRollBackwards.bind;
                        _e = {
                            point: rollbackPoint
                        };
                        if (!(tip !== null && tip !== void 0)) return [3 /*break*/, 1];
                        _d = tip;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.chainDb.getTip()];
                    case 2:
                        _d = _f.sent();
                        _f.label = 3;
                    case 3:
                        _b.apply(_a, [new (_c.apply(messages_1.ChainSyncRollBackwards, [void 0, (_e.tip = _d,
                                    _e)]))().toCbor().toBuffer(),
                            {
                                hasAgency: true,
                                protocol: MiniProtocol_1.MiniProtocol.ChainSync
                            }]);
                        return [2 /*return*/];
                }
            });
        });
    };
    ChainSyncServer.prototype.sendRollForward = function (data, tip) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (this.clientIndex === this.tip.blockNo)
                            this.synced = true;
                        _b = (_a = this.multiplexer).send;
                        _c = messages_1.ChainSyncRollForward.bind;
                        _e = {
                            data: new cbor_1.CborTag(24, new cbor_1.CborBytes(data))
                        };
                        if (!(tip !== null && tip !== void 0)) return [3 /*break*/, 1];
                        _d = tip;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.chainDb.getTip()];
                    case 2:
                        _d = _f.sent();
                        _f.label = 3;
                    case 3:
                        _b.apply(_a, [new (_c.apply(messages_1.ChainSyncRollForward, [void 0, (_e.tip = _d,
                                    _e)]))().toCbor().toBuffer(),
                            {
                                hasAgency: true,
                                protocol: MiniProtocol_1.MiniProtocol.ChainSync
                            }]);
                        return [2 /*return*/];
                }
            });
        });
    };
    ChainSyncServer.prototype.handleClientDone = function () {
        this.removeAllListeners();
    };
    // event listeners
    ChainSyncServer.prototype.hasEventListeners = function () {
        return (this._hasEventListeners(this.eventListeners) ||
            this._hasEventListeners(this.onceEventListeners));
    };
    ChainSyncServer.prototype._hasEventListeners = function (listeners) {
        return (listeners.requestNext.length > 0 ||
            listeners.findIntersect.length > 0 ||
            listeners.error.length > 0);
    };
    ChainSyncServer.prototype.addEventListenerOnce = function (evt, listener) {
        if (!isAnyChainSyncServerEvtName(evt))
            return self;
        this.onceEventListeners[evt].push(listener);
        return self;
    };
    ChainSyncServer.prototype.once = function (evt, listener) {
        return this.addEventListenerOnce(evt, listener);
    };
    ChainSyncServer.prototype.addEventListener = function (evt, listener, options) {
        if ((options === null || options === void 0 ? void 0 : options.once) === true)
            return this.addEventListenerOnce(evt, listener);
        if (!isAnyChainSyncServerEvtName(evt))
            return self;
        this.eventListeners[evt].push(listener);
        return self;
    };
    ChainSyncServer.prototype.addListener = function (evt, callback) {
        return this.on(evt, callback);
    };
    ChainSyncServer.prototype.on = function (evt, callback) {
        var listeners = this.eventListeners[evt];
        if (!listeners)
            return this;
        listeners.push(callback);
        return this;
    };
    ChainSyncServer.prototype.removeEventListener = function (evt, listener) {
        if (!isAnyChainSyncServerEvtName(evt))
            return self;
        this.eventListeners[evt] = this.eventListeners[evt].filter(function (fn) { return fn !== listener; });
        this.onceEventListeners[evt] = this.onceEventListeners[evt].filter(function (fn) { return fn !== listener; });
        return self;
    };
    ChainSyncServer.prototype.removeListener = function (evt, callback) {
        return this.off(evt, callback);
    };
    ChainSyncServer.prototype.off = function (evt, callback) {
        var listeners = this.eventListeners[evt];
        if (!listeners)
            return this;
        var idx = listeners.findIndex(function (cb) { return callback === cb; });
        if (idx < 0)
            return this;
        void listeners.splice(idx, 1);
        return this;
    };
    ChainSyncServer.prototype.emit = function (evt, msg) {
        return this.dispatchEvent(evt, msg);
    };
    ChainSyncServer.prototype.dispatchEvent = function (evt, msg) {
        if (!isAnyChainSyncServerEvtName(evt))
            return true;
        if (evt !== "error" && !(0, ChainSyncMessage_1.isChainSyncMessage)(msg))
            return true;
        var listeners = this.eventListeners[evt];
        var nListeners = listeners.length;
        for (var i = 0; i < nListeners; i++) {
            listeners[i](msg);
        }
        var onceListeners = this.onceEventListeners[evt];
        if (evt === "error" && nListeners + onceListeners.length === 0) {
            throw msg instanceof Error ? msg : new Error("Unhandled error: " + msg);
        }
        var cb;
        while (cb = onceListeners.shift()) {
            cb(msg);
        }
        return true;
    };
    ChainSyncServer.prototype.removeAllListeners = function (event) {
        return this.clearListeners(event);
    };
    ChainSyncServer.prototype.clearListeners = function (evt) {
        this._clearListeners(this.eventListeners, evt);
        this._clearListeners(this.onceEventListeners, evt);
    };
    ChainSyncServer.prototype._clearListeners = function (listeners, evt) {
        if (isAnyChainSyncServerEvtName(evt)) {
            listeners[evt] = [];
        }
        else {
            for (var key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    listeners[key] = [];
                }
            }
        }
    };
    return ChainSyncServer;
}());
exports.ChainSyncServer = ChainSyncServer;
