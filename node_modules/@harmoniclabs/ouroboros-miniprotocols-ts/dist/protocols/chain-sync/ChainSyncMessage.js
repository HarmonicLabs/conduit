"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isChainSyncMessage = isChainSyncMessage;
exports.isIChainSyncMessage = isIChainSyncMessage;
exports.chainSyncMessageFromCbor = chainSyncMessageFromCbor;
exports.chainSyncMessageFromCborObj = chainSyncMessageFromCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var messages_1 = require("./messages/index.js");
function isChainSyncMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff instanceof messages_1.ChainSyncRequestNext ||
        stuff instanceof messages_1.ChainSyncAwaitReply ||
        stuff instanceof messages_1.ChainSyncRollForward ||
        stuff instanceof messages_1.ChainSyncRollBackwards ||
        stuff instanceof messages_1.ChainSyncFindIntersect ||
        stuff instanceof messages_1.ChainSyncIntersectFound ||
        stuff instanceof messages_1.ChainSyncIntersectNotFound ||
        stuff instanceof messages_1.ChainSyncMessageDone);
}
function isIChainSyncMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff); // empty object satisfies some of the ChainSync messages
}
function chainSyncMessageFromCbor(cbor) {
    var buff = cbor instanceof Uint8Array ?
        cbor :
        (0, cbor_1.forceCborString)(cbor).toBuffer();
    var msg = chainSyncMessageFromCborObj(cbor_1.Cbor.parse(buff));
    // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
    msg.cborBytes = buff;
    return msg;
}
function chainSyncMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid cbor for 'ChainSyncMessage'");
    var idx = Number(cbor.array[0].num);
    if (idx === 0)
        return new messages_1.ChainSyncRequestNext();
    if (idx === 1)
        return new messages_1.ChainSyncAwaitReply();
    if (idx === 2)
        return messages_1.ChainSyncRollForward.fromCborObj(cbor);
    if (idx === 3)
        return messages_1.ChainSyncRollBackwards.fromCborObj(cbor);
    if (idx === 4)
        return messages_1.ChainSyncFindIntersect.fromCborObj(cbor);
    if (idx === 5)
        return messages_1.ChainSyncIntersectFound.fromCborObj(cbor);
    if (idx === 6)
        return messages_1.ChainSyncIntersectNotFound.fromCborObj(cbor);
    if (idx === 7)
        return new messages_1.ChainSyncMessageDone();
    throw new Error("invalid cbor for 'ChainSyncMessage'; unknown index: " + idx);
}
