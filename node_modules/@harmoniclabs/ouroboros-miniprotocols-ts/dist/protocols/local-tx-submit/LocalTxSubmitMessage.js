"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLocalTxSubmitMessage = isLocalTxSubmitMessage;
exports.LocalTxSubmitSubmitMessageFromCbor = LocalTxSubmitSubmitMessageFromCbor;
exports.localTxSubmitMessageFromCborObj = localTxSubmitMessageFromCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var LocalTxSubmitAccept_1 = require("./messages/LocalTxSubmitAccept.js");
var LocalTxSubmitDone_1 = require("./messages/LocalTxSubmitDone.js");
var LocalTxSubmitSubmit_1 = require("./messages/LocalTxSubmitSubmit.js");
var cbor_1 = require("@harmoniclabs/cbor");
var LocalTxSubmitReject_1 = require("./messages/LocalTxSubmitReject.js");
function isLocalTxSubmitMessage(thing) {
    return (0, obj_utils_1.isObject)(thing) && (thing instanceof LocalTxSubmitSubmit_1.LocalTxSubmitSubmit ||
        thing instanceof LocalTxSubmitReject_1.LocalTxSubmitReject ||
        thing instanceof LocalTxSubmitAccept_1.LocalTxSubmitAccept ||
        thing instanceof LocalTxSubmitDone_1.LocalTxSubmitDone);
}
function LocalTxSubmitSubmitMessageFromCbor(cbor) {
    return localTxSubmitMessageFromCborObj(cbor_1.Cbor.parse(cbor instanceof Uint8Array ? cbor :
        (0, cbor_1.forceCborString)(cbor)));
}
function localTxSubmitMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid cbor for 'LocalTxSubmitMessage'");
    var idx = Number(cbor.array[0].num);
    if (idx === 0)
        return LocalTxSubmitSubmit_1.LocalTxSubmitSubmit.fromCborObj(cbor);
    if (idx === 1)
        return new LocalTxSubmitAccept_1.LocalTxSubmitAccept();
    if (idx === 2)
        return LocalTxSubmitReject_1.LocalTxSubmitReject.fromCborObj(cbor);
    if (idx === 3)
        return new LocalTxSubmitDone_1.LocalTxSubmitDone();
    throw new Error("invalid cbor for 'LocalTxSubmitMessage'; unknown index: " + idx);
}
