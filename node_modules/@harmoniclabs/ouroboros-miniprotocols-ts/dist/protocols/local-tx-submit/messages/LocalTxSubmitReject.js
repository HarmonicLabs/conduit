"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalTxSubmitReject = void 0;
exports.isILocalTxSubmitReject = isILocalTxSubmitReject;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ints_1 = require("../../types/ints.js");
function isILocalTxSubmitReject(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (0, ints_1.canBeInteger)(stuff.reason);
}
var LocalTxSubmitReject = /** @class */ (function () {
    function LocalTxSubmitReject(_a) {
        var reason = _a.reason;
        if (!isILocalTxSubmitReject({ reason: reason }))
            throw new Error("invalid interface for 'LocalTxSubmitReject'");
        this.reason = (0, ints_1.forceBigUInt)(reason);
    }
    ;
    LocalTxSubmitReject.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    LocalTxSubmitReject.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    LocalTxSubmitReject.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(2),
            this.reason >= 0 ? new cbor_1.CborUInt(this.reason) : new cbor_1.CborNegInt(this.reason)
        ]);
    };
    LocalTxSubmitReject.fromCbor = function (cbor) {
        return LocalTxSubmitReject.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    LocalTxSubmitReject.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(2) &&
            (cbor.array[1] instanceof cbor_1.CborUInt || cbor.array[1] instanceof cbor_1.CborNegInt)))
            throw new Error("invalid CBOR for 'LocalTxSubmitReject");
        return new LocalTxSubmitReject({
            reason: cbor.array[1].num
        });
    };
    return LocalTxSubmitReject;
}());
exports.LocalTxSubmitReject = LocalTxSubmitReject;
