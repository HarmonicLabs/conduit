import { BlockFetchClientDone, BlockFetchRequestRange } from "./messages/index.js";
import { BlockFetchMessage } from "./BlockFetchMessage.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { IChainDb } from "../interfaces/IChainDb.js";
import { Multiplexer } from "../../multiplexer/index.js";
import { ChainPoint } from "../types/index.js";
type BlockFetchServerEvtName = keyof Omit<BlockFetchServerEvtListeners, "error">;
type AnyBlockFetchServerEvtName = BlockFetchServerEvtName | "error";
type BlockFetchServerEvtListeners = {
    requestRange: BlockFetchServerEvtListener[];
    done: BlockFetchServerEvtListener[];
    error: ((err: Error) => void)[];
};
type BlockFetchServerEvtListener = (msg: BlockFetchMessage) => void;
type MsgOf<EvtName extends AnyBlockFetchServerEvtName> = EvtName extends "requestRange" ? BlockFetchRequestRange : EvtName extends "done" ? BlockFetchClientDone : EvtName extends "error" ? Error : never;
type EvtListenerOf<EvtName extends AnyBlockFetchServerEvtName> = EvtName extends "requestRange" ? (msg: BlockFetchRequestRange) => void : EvtName extends "done" ? (msg: BlockFetchClientDone) => void : never;
export declare class BlockFetchServer {
    readonly multiplexer: Multiplexer;
    readonly chainDb: IChainDb;
    private eventListeners;
    private onceEventListeners;
    constructor(thisMultiplexer: Multiplexer, thisChainDb: IChainDb);
    sendNoBlocks(): void;
    sendStartBatch(): void;
    sendBatchDone(): void;
    handleRequestRange(from: ChainPoint, to: ChainPoint): Promise<void>;
    handleClientDone(): void;
    hasEventListeners(): boolean;
    private _hasEventListeners;
    addEventListenerOnce<EvtName extends BlockFetchServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    once<EvtName extends BlockFetchServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    addEventListener<EvtName extends BlockFetchServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts): typeof self;
    on(evt: AnyBlockFetchServerEvtName, callback: (data: any) => void): this;
    addListener(evt: BlockFetchServerEvtName, callback: (data: any) => void): this;
    removeEventListener<EvtName extends BlockFetchServerEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>): typeof self;
    off(evt: BlockFetchServerEvtName, callback: (data: any) => void): this;
    removeListener(evt: BlockFetchServerEvtName, callback: (data: any) => void): this;
    dispatchEvent(evt: AnyBlockFetchServerEvtName, msg: BlockFetchMessage | Error | Object): boolean;
    emit<EvtName extends BlockFetchServerEvtName>(evt: EvtName, msg: MsgOf<EvtName>): boolean;
    private _clearListeners;
    clearListeners(evt?: BlockFetchServerEvtName): void;
    removeAllListeners(event?: BlockFetchServerEvtName): void;
}
export {};
