"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockFetchRequestRange = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var ChainPoint_1 = require("../../types/ChainPoint.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var BlockFetchRequestRange = /** @class */ (function () {
    function BlockFetchRequestRange(range, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var from = range.from, to = range.to;
        if (!((0, ChainPoint_1.isIChainPoint)(from) &&
            (0, ChainPoint_1.isIChainPoint)(to)))
            throw new Error("invalid chain points for 'BlockFetchRequestRange'");
        this.from = from instanceof ChainPoint_1.ChainPoint ? from : new ChainPoint_1.ChainPoint(from);
        this.to = to instanceof ChainPoint_1.ChainPoint ? to : new ChainPoint_1.ChainPoint(to);
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(range);
    }
    BlockFetchRequestRange.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BlockFetchRequestRange.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BlockFetchRequestRange.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            this.from.toCborObj(),
            this.to.toCborObj()
        ]);
    };
    BlockFetchRequestRange.fromcCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return BlockFetchRequestRange.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    BlockFetchRequestRange.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(0)))
            throw new Error("invalid CBOR for 'BlockFetchRequestRange'");
        var _a = __read(cbor.array, 3), _idx = _a[0], fromCbor = _a[1], toCbor = _a[2];
        return new BlockFetchRequestRange({
            from: ChainPoint_1.ChainPoint.fromCborObj(fromCbor),
            to: ChainPoint_1.ChainPoint.fromCborObj(toCbor)
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return BlockFetchRequestRange;
}());
exports.BlockFetchRequestRange = BlockFetchRequestRange;
