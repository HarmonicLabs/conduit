"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockFetchClientDone = void 0;
exports.isIBlockFetchClientDone = isIBlockFetchClientDone;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isIBlockFetchClientDone(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
var BlockFetchClientDone = /** @class */ (function () {
    function BlockFetchClientDone() {
        this.cborRef = undefined;
    }
    ;
    BlockFetchClientDone.prototype.toJSON = function () { return this.toJson(); };
    BlockFetchClientDone.prototype.toJson = function () { return {}; };
    BlockFetchClientDone.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BlockFetchClientDone.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BlockFetchClientDone.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([new cbor_1.CborUInt(1)]);
    };
    BlockFetchClientDone.fromCbor = function (cbor) {
        return BlockFetchClientDone.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    BlockFetchClientDone.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(1)))
            throw new Error("invalid CBOR for 'BlockFetchClientDone");
        return new BlockFetchClientDone();
    };
    return BlockFetchClientDone;
}());
exports.BlockFetchClientDone = BlockFetchClientDone;
