import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor, ToCborObj } from "@harmoniclabs/cbor";
export interface IBlockFetchBlock {
    blockData: CanBeCborString;
}
export declare function isIBlockFetchBlock(stuff: any): stuff is IBlockFetchBlock;
export declare class BlockFetchBlock implements ToCbor, ToCborObj, IBlockFetchBlock {
    readonly cborRef: SubCborRef | undefined;
    readonly blockData: Uint8Array;
    constructor(blk: IBlockFetchBlock, cborRef?: SubCborRef | undefined);
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    /**
     * @returns {Uint8Array}
     * the bytes of `this.blockData` as present on `this.cborBytes`
     * (using `Cbor.parseLazy`)
     */
    getBlockBytes(): Uint8Array;
    static fromCbor(cbor: CanBeCborString): BlockFetchBlock;
    static fromCborObj(cbor: CborObj, originalBytes?: Uint8Array | undefined): BlockFetchBlock;
}
