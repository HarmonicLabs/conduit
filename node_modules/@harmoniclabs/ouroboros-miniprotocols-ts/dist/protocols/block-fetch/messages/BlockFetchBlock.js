"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockFetchBlock = void 0;
exports.isIBlockFetchBlock = isIBlockFetchBlock;
var cbor_1 = require("@harmoniclabs/cbor");
var LazyCborTag_1 = require("@harmoniclabs/cbor/dist/LazyCborObj/LazyCborTag");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
function isIBlockFetchBlock(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && ((0, obj_utils_1.hasOwn)(stuff, "blockData") &&
        (cbor_1.CborString.isValidHexValue(stuff.blockData) ||
            stuff.blockData instanceof Uint8Array ||
            stuff.blockData instanceof cbor_1.CborString));
}
var BlockFetchBlock = /** @class */ (function () {
    function BlockFetchBlock(blk, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!(isIBlockFetchBlock(blk)))
            throw new Error("invalid interface for 'BlockFetchBlock'");
        this.blockData = blk.blockData instanceof Uint8Array ? blk.blockData : (0, cbor_1.forceCborString)(blk.blockData).toBuffer();
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(blk);
    }
    ;
    BlockFetchBlock.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BlockFetchBlock.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BlockFetchBlock.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(4),
            new cbor_1.CborTag(24, new cbor_1.CborBytes(this.blockData))
        ]);
    };
    /**
     * @returns {Uint8Array}
     * the bytes of `this.blockData` as present on `this.cborBytes`
     * (using `Cbor.parseLazy`)
     */
    BlockFetchBlock.prototype.getBlockBytes = function () {
        var msgData = this.toCborBytes();
        var lazy = cbor_1.Cbor.parseLazy(msgData);
        if (!(lazy instanceof cbor_1.LazyCborArray))
            throw new Error("invalid 'BlockFetchBlock' cbor found");
        var tagBytes = lazy.array[1];
        var lazyTag = cbor_1.Cbor.parseLazy(tagBytes);
        if (!(lazyTag instanceof LazyCborTag_1.LazyCborTag))
            throw new Error("invalid 'BlockFetchBlock' cbor found");
        var taggedElem = lazyTag.data;
        if (!(taggedElem instanceof cbor_1.CborBytes))
            throw new Error("invalid 'BlockFetchBlock' cbor found");
        return taggedElem.bytes;
    };
    BlockFetchBlock.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ?
            cbor :
            (0, cbor_1.forceCborString)(cbor).toBuffer();
        return BlockFetchBlock.fromCborObj(cbor_1.Cbor.parse(buff, { keepRef: true }), buff);
    };
    BlockFetchBlock.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(
        // is array
        cbor instanceof cbor_1.CborArray &&
            // with at least two elements
            cbor.array.length >= 2 &&
            // of which the first is the `BlockFetchBlock` index
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(4)))
            throw new Error("invalid CBOR for 'BlockFetchBlock");
        var arg = cbor.array[1];
        if (arg instanceof cbor_1.CborTag &&
            arg.tag === BigInt(24) &&
            arg.data instanceof cbor_1.CborBytes) {
            arg = arg.data;
        }
        if (!(arg instanceof cbor_1.CborBytes))
            throw new Error("invalid CBOR for 'BlockFetchBlock");
        return new BlockFetchBlock({
            blockData: arg.bytes
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return BlockFetchBlock;
}());
exports.BlockFetchBlock = BlockFetchBlock;
