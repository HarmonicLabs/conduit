"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockFetchServer = void 0;
var messages_1 = require("./messages/index.js");
var BlockFetchMessage_1 = require("./BlockFetchMessage.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var MiniProtocol_1 = require("../../MiniProtocol/index.js");
function msgToName(msg) {
    if (msg instanceof messages_1.BlockFetchRequestRange)
        return "requestRange";
    if (msg instanceof messages_1.BlockFetchClientDone)
        return "done";
    // if( msg instanceof BlockFetchBlock )              return "block"; 
    return undefined;
}
function isAnyBlockFetchServerEvtName(str) {
    return isBlockFetchServerEvtName(str) || str === "error" || str === "nextBlock";
}
function isBlockFetchServerEvtName(str) {
    return (str === "requestRange" ||
        str === "done");
}
var BlockFetchServer = /** @class */ (function () {
    function BlockFetchServer(thisMultiplexer, thisChainDb) {
        var _this = this;
        this.eventListeners = Object.freeze({
            requestRange: [],
            done: [],
            error: []
        });
        this.onceEventListeners = Object.freeze({
            requestRange: [],
            done: [],
            error: []
        });
        this.multiplexer = thisMultiplexer;
        this.chainDb = thisChainDb;
        // handle muliplexer messages
        var prevBytes = undefined;
        var queque = [];
        this.multiplexer.on(MiniProtocol_1.MiniProtocol.BlockFetch, function (chunk) {
            if (!_this.hasEventListeners())
                return;
            var offset = -1;
            var thing;
            var msg;
            if (prevBytes) {
                var tmp = new Uint8Array(prevBytes.length + chunk.length);
                tmp.set(prevBytes, 0);
                tmp.set(chunk, prevBytes.length);
                chunk = tmp;
                prevBytes = undefined;
            }
            while (offset < chunk.length) {
                var originalSTLimit = Error.stackTraceLimit;
                Error.stackTraceLimit = 0;
                try {
                    thing = cbor_1.Cbor.parseWithOffset(chunk);
                }
                catch (_a) {
                    Error.stackTraceLimit = originalSTLimit;
                    // assume the error is of "missing bytes";
                    prevBytes = Uint8Array.prototype.slice.call(chunk);
                    break;
                }
                offset = thing.offset;
                // console.log( "msg byetes", offset, toHex( chunk.subarray( 0, offset ) ) );
                // Error.stackTraceLimit = 0;
                try {
                    msg = (0, BlockFetchMessage_1.blockFetchMessageFromCborObj)(thing.parsed);
                    // @ts-ignore Cannot assign to 'cborBytes' because it is a read-only property.ts(2540)
                    msg.cborBytes = Uint8Array.prototype.slice.call(chunk, 0, offset);
                    queque.unshift(msg);
                }
                catch (e) {
                    // before dispatch event
                    Error.stackTraceLimit = originalSTLimit;
                    var err = new Error(typeof (e === null || e === void 0 ? void 0 : e.message) === "string" ? e.message : "" +
                        "\ndata: " + (0, uint8array_utils_1.toHex)(chunk) + "\n");
                    _this.dispatchEvent("error", err);
                }
                finally {
                    Error.stackTraceLimit = originalSTLimit;
                }
                if (offset < chunk.length) {
                    // reference same memory (`subarray`)
                    // ignore the parsed bytes
                    chunk = chunk.subarray(offset);
                    offset = -1;
                }
            }
            var msgStr;
            while (msg = queque.pop()) {
                msgStr = msgToName(msg);
                if (!msgStr)
                    continue; // ingore messages not expected by the Server
                _this.dispatchEvent(msgStr, msg);
            }
        });
        this.on("requestRange", function (msg) { return _this.handleRequestRange(msg.from, msg.to); });
        this.on("done", function (msg) { return _this.handleClientDone(); });
    }
    // block-fetch Server messages implementation
    BlockFetchServer.prototype.sendNoBlocks = function () {
        this.multiplexer.send(new messages_1.BlockFetchNoBlocks().toCbor().toBuffer(), {
            hasAgency: true,
            protocol: MiniProtocol_1.MiniProtocol.BlockFetch
        });
    };
    BlockFetchServer.prototype.sendStartBatch = function () {
        this.multiplexer.send(new messages_1.BlockFetchStartBatch().toCbor().toBuffer(), {
            hasAgency: true,
            protocol: MiniProtocol_1.MiniProtocol.BlockFetch
        });
    };
    BlockFetchServer.prototype.sendBatchDone = function () {
        this.multiplexer.send(new messages_1.BlockFetchBatchDone().toCbor().toBuffer(), {
            hasAgency: true,
            protocol: MiniProtocol_1.MiniProtocol.BlockFetch
        });
    };
    BlockFetchServer.prototype.handleRequestRange = function (from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var blocksBetween, blockSlotNo, blocksBetween_1, blocksBetween_1_1, block;
            var e_1, _a;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.chainDb.getBlocksBetweenRange(from, to)];
                    case 1:
                        blocksBetween = _d.sent();
                        if (!blocksBetween)
                            return [2 /*return*/, this.sendNoBlocks()];
                        else
                            this.sendStartBatch();
                        try {
                            for (blocksBetween_1 = __values(blocksBetween), blocksBetween_1_1 = blocksBetween_1.next(); !blocksBetween_1_1.done; blocksBetween_1_1 = blocksBetween_1.next()) {
                                block = blocksBetween_1_1.value;
                                blockSlotNo = (_c = (_b = block.blockHeader) === null || _b === void 0 ? void 0 : _b.slotNumber) !== null && _c !== void 0 ? _c : -1;
                                this.multiplexer.send(new messages_1.BlockFetchBlock({
                                    blockData: block.toCborBytes()
                                }).toCbor().toBuffer(), {
                                    hasAgency: true,
                                    protocol: MiniProtocol_1.MiniProtocol.BlockFetch
                                });
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (blocksBetween_1_1 && !blocksBetween_1_1.done && (_a = blocksBetween_1.return)) _a.call(blocksBetween_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        this.sendBatchDone();
                        return [2 /*return*/];
                }
            });
        });
    };
    BlockFetchServer.prototype.handleClientDone = function () {
        this.removeAllListeners();
    };
    // event listeners
    BlockFetchServer.prototype.hasEventListeners = function () {
        return (this._hasEventListeners(this.eventListeners) ||
            this._hasEventListeners(this.onceEventListeners));
    };
    BlockFetchServer.prototype._hasEventListeners = function (listeners) {
        return (listeners.requestRange.length > 0 ||
            listeners.done.length > 0 ||
            listeners.error.length > 0);
    };
    BlockFetchServer.prototype.addEventListenerOnce = function (evt, listener) {
        if (!isAnyBlockFetchServerEvtName(evt))
            return self;
        this.onceEventListeners[evt].push(listener);
        return self;
    };
    BlockFetchServer.prototype.once = function (evt, listener) {
        return this.addEventListenerOnce(evt, listener);
    };
    BlockFetchServer.prototype.addEventListener = function (evt, listener, options) {
        if ((options === null || options === void 0 ? void 0 : options.once) === true)
            return this.addEventListenerOnce(evt, listener);
        if (!isAnyBlockFetchServerEvtName(evt))
            return self;
        this.eventListeners[evt].push(listener);
        return self;
    };
    BlockFetchServer.prototype.on = function (evt, callback) {
        var listeners = this.eventListeners[evt];
        if (!listeners)
            return this;
        listeners.push(callback);
        return this;
    };
    BlockFetchServer.prototype.addListener = function (evt, callback) {
        return this.on(evt, callback);
    };
    BlockFetchServer.prototype.removeEventListener = function (evt, listener) {
        if (!isAnyBlockFetchServerEvtName(evt))
            return self;
        this.eventListeners[evt] = this.eventListeners[evt].filter(function (fn) { return fn !== listener; });
        this.onceEventListeners[evt] = this.onceEventListeners[evt].filter(function (fn) { return fn !== listener; });
        return self;
    };
    BlockFetchServer.prototype.off = function (evt, callback) {
        var listeners = this.eventListeners[evt];
        if (!listeners)
            return this;
        var idx = listeners.findIndex(function (cb) { return callback === cb; });
        if (idx < 0)
            return this;
        void listeners.splice(idx, 1);
        return this;
    };
    BlockFetchServer.prototype.removeListener = function (evt, callback) {
        return this.off(evt, callback);
    };
    BlockFetchServer.prototype.dispatchEvent = function (evt, msg) {
        if (!isAnyBlockFetchServerEvtName(evt))
            return true;
        if (evt !== "error" && !(0, BlockFetchMessage_1.isBlockFetchMessage)(msg))
            return true;
        var listeners = this.eventListeners[evt];
        var nListeners = listeners.length;
        for (var i = 0; i < nListeners; i++) {
            listeners[i](msg);
        }
        var onceListeners = this.onceEventListeners[evt];
        if (evt === "error" && nListeners + onceListeners.length === 0) {
            throw msg instanceof Error ? msg : new Error("Unhandled error: " + msg);
        }
        var cb;
        while (cb = onceListeners.shift()) {
            cb(msg);
        }
        return true;
    };
    BlockFetchServer.prototype.emit = function (evt, msg) {
        return this.dispatchEvent(evt, msg);
    };
    BlockFetchServer.prototype._clearListeners = function (listeners, evt) {
        if (isAnyBlockFetchServerEvtName(evt)) {
            listeners[evt] = [];
        }
        else {
            for (var key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    listeners[key] = [];
                }
            }
        }
    };
    BlockFetchServer.prototype.clearListeners = function (evt) {
        this._clearListeners(this.eventListeners, evt);
        this._clearListeners(this.onceEventListeners, evt);
    };
    BlockFetchServer.prototype.removeAllListeners = function (event) {
        return this.clearListeners(event);
    };
    return BlockFetchServer;
}());
exports.BlockFetchServer = BlockFetchServer;
