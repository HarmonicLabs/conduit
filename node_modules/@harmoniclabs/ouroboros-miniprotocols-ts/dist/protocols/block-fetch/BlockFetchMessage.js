"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBlockFetchMessage = isBlockFetchMessage;
exports.blockFetchMessageFromCbor = blockFetchMessageFromCbor;
exports.blockFetchMessageFromCborObj = blockFetchMessageFromCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var BlockFetchBatchDone_1 = require("./messages/BlockFetchBatchDone.js");
var BlockFetchBlock_1 = require("./messages/BlockFetchBlock.js");
var BlockFetchClientDone_1 = require("./messages/BlockFetchClientDone.js");
var BlockFetchNoBlocks_1 = require("./messages/BlockFetchNoBlocks.js");
var BlockFetchRequestRange_1 = require("./messages/BlockFetchRequestRange.js");
var BlockFetchStartBatch_1 = require("./messages/BlockFetchStartBatch.js");
var cbor_1 = require("@harmoniclabs/cbor");
function isBlockFetchMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff instanceof BlockFetchRequestRange_1.BlockFetchRequestRange ||
        stuff instanceof BlockFetchClientDone_1.BlockFetchClientDone ||
        stuff instanceof BlockFetchStartBatch_1.BlockFetchStartBatch ||
        stuff instanceof BlockFetchNoBlocks_1.BlockFetchNoBlocks ||
        stuff instanceof BlockFetchBlock_1.BlockFetchBlock ||
        stuff instanceof BlockFetchBatchDone_1.BlockFetchBatchDone);
}
function blockFetchMessageFromCbor(cbor) {
    return blockFetchMessageFromCborObj(cbor_1.Cbor.parse(cbor instanceof Uint8Array ?
        cbor :
        (0, cbor_1.forceCborString)(cbor)));
}
function blockFetchMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid cbor for 'BlockFetchMessage'");
    var idx = Number(cbor.array[0].num);
    if (idx === 0)
        return BlockFetchRequestRange_1.BlockFetchRequestRange.fromCborObj(cbor);
    if (idx === 1)
        return new BlockFetchClientDone_1.BlockFetchClientDone();
    if (idx === 2)
        return new BlockFetchStartBatch_1.BlockFetchStartBatch();
    if (idx === 3)
        return new BlockFetchNoBlocks_1.BlockFetchNoBlocks();
    if (idx === 4)
        return BlockFetchBlock_1.BlockFetchBlock.fromCborObj(cbor);
    if (idx === 5)
        return new BlockFetchBatchDone_1.BlockFetchBatchDone();
    throw new Error("invalid cbor for 'BlockFetchMessage'; unknown index: " + idx);
}
