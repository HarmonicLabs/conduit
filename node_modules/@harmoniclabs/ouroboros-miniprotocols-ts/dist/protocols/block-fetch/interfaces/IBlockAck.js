"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockAck = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
function isBlockAck(stuff) {
    return (typeof stuff === "object" &&
        (Number.isInteger(stuff.blockSlotNo) ||
            typeof stuff.blockSlotNo === "bigint"));
}
var BlockAck = /** @class */ (function () {
    function BlockAck(blockSlotNo) {
        this.blockSlotNo = blockSlotNo;
    }
    BlockAck.prototype.toCbor = function () {
        return new cbor_1.CborString(this.toCborBytes());
    };
    BlockAck.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.blockSlotNo)
        ]);
    };
    BlockAck.prototype.toCborBytes = function () {
        return cbor_1.Cbor.encode(this.toCborObj()).toBuffer();
    };
    BlockAck.fromCbor = function (cbor) {
        var buff = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return BlockAck.fromCborObj(cbor_1.Cbor.parse(buff));
    };
    BlockAck.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray && cbor.array.length === 2 && cbor.array[0] instanceof cbor_1.CborUInt && cbor.array[0].num === BigInt(5))) {
            throw new Error("invalid CBOR for 'BlockAck'");
        }
        var blockSlotNo = cbor.array[1];
        if (!(blockSlotNo instanceof cbor_1.CborUInt)) {
            throw new Error("invalid CBOR for 'BlockAck'");
        }
        return new BlockAck(blockSlotNo.num);
    };
    return BlockAck;
}());
exports.BlockAck = BlockAck;
