import { Multiplexer } from "../../multiplexer/index.js";
import { IChainPoint } from "../types/ChainPoint.js";
import { BlockFetchBatchDone } from "./messages/BlockFetchBatchDone.js";
import { BlockFetchClientDone } from "./messages/BlockFetchClientDone.js";
import { BlockFetchMessage } from "./BlockFetchMessage.js";
import { BlockFetchNoBlocks } from "./messages/BlockFetchNoBlocks.js";
import { BlockFetchRequestRange } from "./messages/BlockFetchRequestRange.js";
import { BlockFetchStartBatch } from "./messages/BlockFetchStartBatch.js";
import { BlockFetchBlock } from "./messages/BlockFetchBlock.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
type AnyBlockFetchClientEvtNameListener = (msg: BlockFetchMessage) => void;
type BlockFetchClientEvtNameListeners = {
    requestRange: AnyBlockFetchClientEvtNameListener[];
    noBlocks: AnyBlockFetchClientEvtNameListener[];
    startBatch: AnyBlockFetchClientEvtNameListener[];
    batchDone: AnyBlockFetchClientEvtNameListener[];
    clientDone: AnyBlockFetchClientEvtNameListener[];
    block: AnyBlockFetchClientEvtNameListener[];
    error: ((err: Error) => void)[];
};
type BlockFetchClientEvtName = keyof BlockFetchClientEvtNameListeners;
type MsgOf<Evt extends BlockFetchClientEvtName> = Evt extends "requestRange" ? BlockFetchRequestRange : Evt extends "noBlocks" ? BlockFetchNoBlocks : Evt extends "startBatch" ? BlockFetchStartBatch : Evt extends "batchDone" ? BlockFetchBatchDone : Evt extends "clientDone" ? BlockFetchClientDone : Evt extends "block" ? BlockFetchBlock : Evt extends "error" ? Error : never;
type EvtListenerOf<Evt extends BlockFetchClientEvtName> = (msg: MsgOf<Evt>) => void;
export declare class BlockFetchClient {
    readonly mplexer: Multiplexer;
    clearListeners: () => void;
    addEventListener: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts) => this;
    addListener: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    on: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    once: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeEventListener: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeListener: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    off: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeAllListeners: (event?: BlockFetchClientEvtName) => this;
    emit: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    dispatchEvent: <EvtName extends BlockFetchClientEvtName>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    constructor(multiplexer: Multiplexer);
    /** @deprecated */
    onRequestRange: (cb: (msg: BlockFetchRequestRange) => void) => void;
    /** @deprecated */
    onNoBlocks: (cb: (msg: BlockFetchNoBlocks) => void) => void;
    /** @deprecated */
    onBlock: (cb: (msg: BlockFetchBlock) => void) => void;
    /** @deprecated */
    onStartBatch: (cb: (msg: BlockFetchStartBatch) => void) => void;
    /** @deprecated */
    onBatchDone: (cb: (msg: BlockFetchBatchDone) => void) => void;
    /** @deprecated */
    onClientDone: (cb: (msg: BlockFetchClientDone) => void) => void;
    /** request a single block from peer */
    request(point: IChainPoint): Promise<BlockFetchNoBlocks | BlockFetchBlock>;
    requestRange(from: IChainPoint, to: IChainPoint): Promise<BlockFetchNoBlocks | BlockFetchBlock[]>;
    done(): void;
}
export {};
