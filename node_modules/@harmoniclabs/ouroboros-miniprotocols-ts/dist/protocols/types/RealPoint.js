"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RealPoint = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var ChainPoint_1 = require("./ChainPoint.js");
var RealPoint = /** @class */ (function (_super) {
    __extends(RealPoint, _super);
    function RealPoint(point) {
        if ((0, ChainPoint_1.isOriginPoint)(point))
            throw new Error("'RealPoint' cannot be origin");
        return _super.call(this, point) || this;
    }
    RealPoint.fromCbor = function (cbor) {
        return RealPoint.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    RealPoint.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'ChainPoint'");
        if (cbor.array.length < 2)
            throw new Error("'RealPoint' cannot be origin; while parsing cbor");
        var _a = __read(cbor.array, 2), slot = _a[0], hash = _a[1];
        if (!(slot instanceof cbor_1.CborUInt &&
            hash instanceof cbor_1.CborBytes))
            throw new Error("invalid CBOR for 'ChainPoint'");
        return new RealPoint({
            blockHeader: {
                slotNumber: slot.num,
                hash: hash.bytes
            }
        });
    };
    return RealPoint;
}(ChainPoint_1.ChainPoint));
exports.RealPoint = RealPoint;
