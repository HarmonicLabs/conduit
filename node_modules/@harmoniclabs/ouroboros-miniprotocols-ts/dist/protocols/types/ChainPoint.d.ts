import { CanBeCborString, CborArray, CborObj, ToCborBytes, ToCborObj, ToCborString } from "@harmoniclabs/cbor";
export interface IBlockHeaderHash {
    readonly slotNumber: number | bigint;
    readonly hash: Uint8Array;
}
export declare function isIBlockHeaderHash(stuff: any): stuff is IBlockHeaderHash;
export interface IChainPoint {
    blockHeader?: IBlockHeaderHash;
}
export interface IOriginPoint extends IChainPoint {
    blockHeader: undefined;
}
export interface IRealPoint extends IChainPoint {
    blockHeader: IBlockHeaderHash;
}
export declare function isIChainPoint(stuff: any): stuff is IChainPoint;
export declare function isOriginPoint(point: IChainPoint): point is IOriginPoint;
export declare function isRealPoint(point: IChainPoint): point is IRealPoint;
export declare class ChainPoint implements ToCborObj, ToCborString, ToCborBytes, IChainPoint {
    constructor(chainPoint: IChainPoint);
    readonly blockHeader?: IBlockHeaderHash;
    isOrigin(): boolean;
    static get origin(): ChainPoint;
    toJSON(): {
        blockHeader?: undefined;
    } | {
        blockHeader: {
            hash: string;
            slot: number;
        };
    };
    toJson(): {
        blockHeader?: undefined;
    } | {
        blockHeader: {
            hash: string;
            slot: number;
        };
    };
    toString(): string;
    toCborBytes(): Uint8Array;
    toCbor(): import("@harmoniclabs/cbor").CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): ChainPoint;
    static fromCborObj(cbor: CborObj): ChainPoint;
    static eq(a: IChainPoint, b: IChainPoint): boolean;
}
