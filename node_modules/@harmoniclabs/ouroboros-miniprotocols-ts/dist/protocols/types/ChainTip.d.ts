import { CanBeCborString, CborArray, CborObj, ToCborObj, ToCborString } from "@harmoniclabs/cbor";
import { ChainPoint, IChainPoint } from "./ChainPoint.js";
export interface IChainTip {
    point: IChainPoint;
    blockNo: number | bigint;
}
export declare function isIChainTip(stuff: any): stuff is IChainTip;
export declare class ChainTip implements ToCborString, ToCborObj, IChainTip {
    readonly point: ChainPoint;
    readonly blockNo: bigint;
    constructor({ point, blockNo }: IChainTip);
    toJSON(): {
        point: {
            blockHeader?: undefined;
        } | {
            blockHeader: {
                hash: string;
                slot: number;
            };
        };
        blockNo: number;
    };
    toJson(): {
        point: {
            blockHeader?: undefined;
        } | {
            blockHeader: {
                hash: string;
                slot: number;
            };
        };
        blockNo: number;
    };
    toString(): string;
    toCbor(): import("@harmoniclabs/cbor").CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): ChainTip;
    static fromCborObj(cbor: CborObj): ChainTip;
    static eq(a: IChainTip, b: IChainTip): boolean;
}
