"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainTip = void 0;
exports.isIChainTip = isIChainTip;
var cbor_1 = require("@harmoniclabs/cbor");
var ChainPoint_1 = require("./ChainPoint.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ints_1 = require("./ints.js");
function isIChainTip(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, ChainPoint_1.isIChainPoint)(stuff.point) &&
        (0, ints_1.canBeUInteger)(stuff.blockNo));
}
var ChainTip = /** @class */ (function () {
    function ChainTip(_a) {
        var point = _a.point, blockNo = _a.blockNo;
        if (!((0, ChainPoint_1.isIChainPoint)(point) &&
            (0, ints_1.canBeUInteger)(blockNo)))
            throw new Error("invalid IChainTip interface");
        this.point = point instanceof ChainPoint_1.ChainPoint ? point : new ChainPoint_1.ChainPoint(point);
        this.blockNo = (0, ints_1.forceBigUInt)(blockNo);
    }
    ChainTip.prototype.toJSON = function () { return this.toJson(); };
    ChainTip.prototype.toJson = function () {
        return {
            point: this.point.toJson(),
            blockNo: Number(this.blockNo)
        };
    };
    ChainTip.prototype.toString = function () {
        return "(tip: ".concat(this.point.toString(), " (").concat(this.blockNo, "))");
    };
    ChainTip.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    ChainTip.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            this.point.toCborObj(),
            new cbor_1.CborUInt(this.blockNo)
        ]);
    };
    ChainTip.fromCbor = function (cbor) {
        return ChainTip.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    ChainTip.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray))
            throw new Error("invalid CBOR for 'ChainTip'");
        var _a = __read(cbor.array, 2), _point = _a[0], _blockNo = _a[1];
        if (!(_blockNo instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for 'ChainTip'");
        return new ChainTip({
            point: ChainPoint_1.ChainPoint.fromCborObj(_point),
            blockNo: _blockNo.num
        });
    };
    ChainTip.eq = function (a, b) {
        return (ChainPoint_1.ChainPoint.eq(a.point, b.point) &&
            a.blockNo === b.blockNo);
    };
    return ChainTip;
}());
exports.ChainTip = ChainTip;
