"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTxMonitorMessage = isTxMonitorMessage;
exports.txMonitorMessageFromCbor = txMonitorMessageFromCbor;
exports.txMonitorMessageFromCborObj = txMonitorMessageFromCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var TxMonitorAcquire_1 = require("./messages/TxMonitorAcquire.js");
var TxMonitorDone_1 = require("./messages/TxMonitorDone.js");
var TxMonitorGetSizes_1 = require("./messages/TxMonitorGetSizes.js");
var TxMonitorNextTx_1 = require("./messages/TxMonitorNextTx.js");
var TxMonitorRelease_1 = require("./messages/TxMonitorRelease.js");
var TxMonitorReplyGetSizes_1 = require("./messages/TxMonitorReplyGetSizes.js");
var TxMonitorReplyHasTx_1 = require("./messages/TxMonitorReplyHasTx.js");
var cbor_1 = require("@harmoniclabs/cbor");
var messages_1 = require("./messages/index.js");
// | TxMonitorAwaitAquire // same as TxMonitorAcquire
function isTxMonitorMessage(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff instanceof TxMonitorDone_1.TxMonitorDone ||
        stuff instanceof TxMonitorAcquire_1.TxMonitorAcquire ||
        stuff instanceof messages_1.TxMonitorAcquired ||
        stuff instanceof TxMonitorRelease_1.TxMonitorRelease ||
        stuff instanceof TxMonitorNextTx_1.TxMonitorNextTx ||
        stuff instanceof messages_1.TxMonitorReplyNextTx ||
        stuff instanceof messages_1.TxMonitorHasTx ||
        stuff instanceof TxMonitorReplyHasTx_1.TxMonitorReplyHasTx ||
        stuff instanceof TxMonitorGetSizes_1.TxMonitorGetSizes ||
        stuff instanceof TxMonitorReplyGetSizes_1.TxMonitorReplyGetSizes);
}
function txMonitorMessageFromCbor(cbor) {
    return txMonitorMessageFromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
}
function txMonitorMessageFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("Invalid CBOR for 'TxMonitorMessage'");
    var n = Number(cbor.array[0].num);
    if (n === 0)
        return new TxMonitorDone_1.TxMonitorDone();
    if (n === 1)
        return new TxMonitorAcquire_1.TxMonitorAcquire();
    if (n === 2)
        return messages_1.TxMonitorAcquired.fromCborObj(cbor);
    if (n === 3)
        return new TxMonitorRelease_1.TxMonitorRelease();
    if (n === 4)
        throw new Error("unknown TxMonitorMessage with index 4");
    if (n === 5)
        return new TxMonitorNextTx_1.TxMonitorNextTx();
    if (n === 6)
        return messages_1.TxMonitorReplyNextTx.fromCborObj(cbor);
    if (n === 7)
        return messages_1.TxMonitorHasTx.fromCborObj(cbor);
    if (n === 8)
        return TxMonitorReplyHasTx_1.TxMonitorReplyHasTx.fromCborObj(cbor);
    if (n === 9)
        return new TxMonitorGetSizes_1.TxMonitorGetSizes();
    if (n === 10)
        return TxMonitorReplyGetSizes_1.TxMonitorReplyGetSizes.fromCborObj(cbor);
    throw new Error("unknown TxMonitorMessage with index " + n);
}
