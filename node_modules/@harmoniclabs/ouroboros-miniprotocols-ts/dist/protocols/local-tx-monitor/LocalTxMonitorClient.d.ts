import { Multiplexer } from "../../multiplexer/index.js";
import { TxMonitorMessage } from "./TxMonitorMessage.js";
import { TxMonitorReplyGetSizes } from "./messages/TxMonitorReplyGetSizes.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { TxMonitorReplyNextTx } from "./messages/index.js";
type TxMonitorClientEvtListener = (msg: TxMonitorMessage) => void;
type TxMonitorClientEvtListeners = {
    done: TxMonitorClientEvtListener[];
    acquire: TxMonitorClientEvtListener[];
    acquired: TxMonitorClientEvtListener[];
    release: TxMonitorClientEvtListener[];
    nextTx: TxMonitorClientEvtListener[];
    replyNextTx: TxMonitorClientEvtListener[];
    hasTx: TxMonitorClientEvtListener[];
    replyHasTx: TxMonitorClientEvtListener[];
    getSizes: TxMonitorClientEvtListener[];
    replyGetSizes: TxMonitorClientEvtListener[];
};
type TxMonitorClientEvt = keyof TxMonitorClientEvtListeners;
type EvtListenerOf<Evt extends TxMonitorClientEvt> = (...args: any[]) => any;
type MsgOf<Evt extends TxMonitorClientEvt> = {};
export declare class TxMonitorClient {
    readonly mplexer: Multiplexer;
    clearListeners: () => this;
    addEventListener: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts) => this;
    addListener: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    on: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    once: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeEventListener: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeListener: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    off: <EvtName extends TxMonitorClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeAllListeners: (event?: TxMonitorClientEvt) => this;
    emit: <EvtName extends TxMonitorClientEvt>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    dispatchEvent: <EvtName extends TxMonitorClientEvt>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    constructor(multiplexer: Multiplexer);
    acquire(): Promise<void>;
    done(): void;
    release(): void;
    nextTx(): Promise<TxMonitorReplyNextTx>;
    hasTx(hash: Uint8Array | string): Promise<boolean>;
    getSizes(): Promise<TxMonitorReplyGetSizes>;
}
export {};
