"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorReplyNextTx = void 0;
exports.isITxMonitorReplyNextTx = isITxMonitorReplyNextTx;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
function isITxMonitorReplyNextTx(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff.tx ? stuff.tx instanceof Uint8Array : true);
}
var TxMonitorReplyNextTx = /** @class */ (function () {
    function TxMonitorReplyNextTx(msg, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var tx = msg.tx;
        if (!isITxMonitorReplyNextTx({ tx: tx }))
            throw new Error("invalid interface for 'TxMonitorReplyNextTx'");
        this.tx = tx;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(msg);
    }
    ;
    TxMonitorReplyNextTx.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    TxMonitorReplyNextTx.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorReplyNextTx.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        var arr = [new cbor_1.CborUInt(6)];
        if (this.tx)
            arr.push(new cbor_1.CborBytes(this.tx));
        return new cbor_1.CborArray(arr);
    };
    TxMonitorReplyNextTx.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return TxMonitorReplyNextTx.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    TxMonitorReplyNextTx.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(6)))
            throw new Error("invalid CBOR for 'TxMonitorReplyNextTx");
        var reply = {
            tx: undefined
        };
        if (cbor.array[1]) {
            if (!(cbor.array[1] instanceof cbor_1.CborBytes))
                throw new Error("invalid CBOR for 'TxMonitorReplyNextTx");
            reply.tx = cbor.array[1].bytes;
        }
        return new TxMonitorReplyNextTx(reply, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return TxMonitorReplyNextTx;
}());
exports.TxMonitorReplyNextTx = TxMonitorReplyNextTx;
