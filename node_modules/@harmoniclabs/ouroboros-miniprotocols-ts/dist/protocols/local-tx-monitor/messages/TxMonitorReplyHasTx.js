"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorReplyHasTx = void 0;
exports.isITxMonitorReplyHasTx = isITxMonitorReplyHasTx;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxMonitorReplyHasTx(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (typeof stuff.hasTx === "boolean");
}
var TxMonitorReplyHasTx = /** @class */ (function () {
    function TxMonitorReplyHasTx(_a) {
        var hasTx = _a.hasTx;
        if (!isITxMonitorReplyHasTx({ hasTx: hasTx }))
            throw new Error("invalid interface for 'TxMonitorReplyHasTx'");
        this.hasTx = hasTx;
    }
    ;
    TxMonitorReplyHasTx.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorReplyHasTx.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorReplyHasTx.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(8),
            new cbor_1.CborSimple(this.hasTx)
        ]);
    };
    TxMonitorReplyHasTx.fromCbor = function (cbor) {
        return TxMonitorReplyHasTx.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxMonitorReplyHasTx.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(8) &&
            cbor.array[1] instanceof cbor_1.CborSimple &&
            typeof cbor.array[1].simple === "boolean"))
            throw new Error("invalid CBOR for 'TxMonitorReplyHasTx");
        return new TxMonitorReplyHasTx({
            hasTx: cbor.array[1].simple
        });
    };
    return TxMonitorReplyHasTx;
}());
exports.TxMonitorReplyHasTx = TxMonitorReplyHasTx;
