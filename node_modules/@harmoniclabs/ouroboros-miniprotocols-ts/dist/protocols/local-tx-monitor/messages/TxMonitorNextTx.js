"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorNextTx = void 0;
exports.isITxMonitorNextTx = isITxMonitorNextTx;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxMonitorNextTx(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
var TxMonitorNextTx = /** @class */ (function () {
    function TxMonitorNextTx() {
    }
    ;
    TxMonitorNextTx.prototype.toJSON = function () { return this.toJson(); };
    TxMonitorNextTx.prototype.toJson = function () { return {}; };
    TxMonitorNextTx.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorNextTx.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorNextTx.prototype.toCborObj = function () {
        return new cbor_1.CborArray([new cbor_1.CborUInt(5)]);
    };
    TxMonitorNextTx.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return TxMonitorNextTx.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    TxMonitorNextTx.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(5)))
            throw new Error("invalid CBOR for 'TxMonitorNextTx");
        return new TxMonitorNextTx();
    };
    return TxMonitorNextTx;
}());
exports.TxMonitorNextTx = TxMonitorNextTx;
