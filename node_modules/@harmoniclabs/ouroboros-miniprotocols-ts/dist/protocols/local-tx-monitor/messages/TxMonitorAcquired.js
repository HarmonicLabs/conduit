"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorAcquired = void 0;
exports.isITxMonitorAcquired = isITxMonitorAcquired;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ints_1 = require("../../types/ints.js");
function isITxMonitorAcquired(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (0, ints_1.canBeUInteger)(stuff.slotNumber);
}
var TxMonitorAcquired = /** @class */ (function () {
    function TxMonitorAcquired(_a) {
        var slotNumber = _a.slotNumber;
        if (!isITxMonitorAcquired({ slotNumber: slotNumber }))
            throw new Error("invalid interface for 'TxMonitorAcquired'");
        this.slotNumber = (0, ints_1.forceBigUInt)(slotNumber);
    }
    ;
    TxMonitorAcquired.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorAcquired.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorAcquired.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(2),
            new cbor_1.CborUInt(this.slotNumber)
        ]);
    };
    TxMonitorAcquired.fromCbor = function (cbor) {
        return TxMonitorAcquired.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxMonitorAcquired.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(2) &&
            cbor.array[1] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for 'TxMonitorAcquired");
        return new TxMonitorAcquired({
            slotNumber: cbor.array[1].num
        });
    };
    return TxMonitorAcquired;
}());
exports.TxMonitorAcquired = TxMonitorAcquired;
