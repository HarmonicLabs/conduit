"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorHasTx = void 0;
exports.isITxMonitorHasTx = isITxMonitorHasTx;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxMonitorHasTx(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff.txId instanceof Uint8Array);
}
var TxMonitorHasTx = /** @class */ (function () {
    function TxMonitorHasTx(_a) {
        var txId = _a.txId;
        if (!isITxMonitorHasTx({ txId: txId }))
            throw new Error("invalid interface for 'TxMonitorHasTx'");
        this.txId = txId;
    }
    ;
    TxMonitorHasTx.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorHasTx.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorHasTx.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(7),
            new cbor_1.CborBytes(this.txId)
        ]);
    };
    TxMonitorHasTx.fromCbor = function (cbor) {
        return TxMonitorHasTx.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxMonitorHasTx.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(7) &&
            cbor.array[1] instanceof cbor_1.CborBytes))
            throw new Error("invalid CBOR for 'TxMonitorHasTx");
        return new TxMonitorHasTx({
            txId: cbor.array[1].bytes
        });
    };
    return TxMonitorHasTx;
}());
exports.TxMonitorHasTx = TxMonitorHasTx;
