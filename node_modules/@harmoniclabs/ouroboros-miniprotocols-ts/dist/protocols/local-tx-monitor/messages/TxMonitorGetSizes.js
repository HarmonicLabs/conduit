"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorGetSizes = void 0;
exports.isITxMonitorGetSizes = isITxMonitorGetSizes;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxMonitorGetSizes(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
var TxMonitorGetSizes = /** @class */ (function () {
    function TxMonitorGetSizes() {
    }
    ;
    TxMonitorGetSizes.prototype.toJSON = function () { return this.toJson(); };
    TxMonitorGetSizes.prototype.toJson = function () { return {}; };
    TxMonitorGetSizes.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorGetSizes.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorGetSizes.prototype.toCborObj = function () {
        return new cbor_1.CborArray([new cbor_1.CborUInt(3)]);
    };
    TxMonitorGetSizes.fromCbor = function (cbor) {
        return TxMonitorGetSizes.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxMonitorGetSizes.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(3)))
            throw new Error("invalid CBOR for 'TxMonitorGetSizes");
        return new TxMonitorGetSizes();
    };
    return TxMonitorGetSizes;
}());
exports.TxMonitorGetSizes = TxMonitorGetSizes;
