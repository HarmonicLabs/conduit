"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorRelease = void 0;
exports.isITxMonitorRelease = isITxMonitorRelease;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isITxMonitorRelease(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
var TxMonitorRelease = /** @class */ (function () {
    function TxMonitorRelease() {
    }
    ;
    TxMonitorRelease.prototype.toJSON = function () { return this.toJson(); };
    TxMonitorRelease.prototype.toJson = function () { return {}; };
    TxMonitorRelease.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorRelease.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorRelease.prototype.toCborObj = function () {
        return new cbor_1.CborArray([new cbor_1.CborUInt(3)]);
    };
    TxMonitorRelease.fromCbor = function (cbor) {
        return TxMonitorRelease.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxMonitorRelease.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(3)))
            throw new Error("invalid CBOR for 'TxMonitorRelease");
        return new TxMonitorRelease();
    };
    return TxMonitorRelease;
}());
exports.TxMonitorRelease = TxMonitorRelease;
