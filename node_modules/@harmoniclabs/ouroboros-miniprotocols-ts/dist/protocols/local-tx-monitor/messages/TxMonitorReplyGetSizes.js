"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMonitorReplyGetSizes = void 0;
exports.isITxMonitorReplyGetSizes = isITxMonitorReplyGetSizes;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var roDescr = Object.freeze({
    writable: false,
    enumerable: true,
    configurable: false
});
function isITxMonitorReplyGetSizes(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (Number.isSafeInteger(stuff.mempoolCapacity) &&
        Number.isSafeInteger(stuff.mempoolSize) &&
        Number.isSafeInteger(stuff.nTxs));
}
var TxMonitorReplyGetSizes = /** @class */ (function () {
    function TxMonitorReplyGetSizes(reply) {
        if (!isITxMonitorReplyGetSizes(reply))
            throw new Error("invalid `ITxMonitorReplyGetSizes`");
        this.mempoolCapacity = reply.mempoolCapacity;
        this.mempoolSize = reply.mempoolSize;
        this.nTxs = reply.nTxs;
    }
    TxMonitorReplyGetSizes.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    TxMonitorReplyGetSizes.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMonitorReplyGetSizes.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(10),
            new cbor_1.CborArray([
                new cbor_1.CborUInt(this.mempoolCapacity),
                new cbor_1.CborUInt(this.mempoolSize),
                new cbor_1.CborUInt(this.nTxs)
            ])
        ]);
    };
    TxMonitorReplyGetSizes.fromCbor = function (cbor) {
        return TxMonitorReplyGetSizes.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    TxMonitorReplyGetSizes.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(10) &&
            cbor.array[1] instanceof cbor_1.CborArray &&
            cbor.array[1].array.length === 3 &&
            cbor.array[1].array.every(function (elem) { return elem instanceof cbor_1.CborUInt; })))
            throw new Error("invalid CBOR for 'TxMonitorReplyGetSizes'");
        var _a = __read(cbor.array[1].array
            .map(function (elem) { return Number(elem.num); }), 3), mempoolCapacity = _a[0], mempoolSize = _a[1], nTxs = _a[2];
        return new TxMonitorReplyGetSizes({
            mempoolCapacity: mempoolCapacity,
            mempoolSize: mempoolSize,
            nTxs: nTxs
        });
    };
    return TxMonitorReplyGetSizes;
}());
exports.TxMonitorReplyGetSizes = TxMonitorReplyGetSizes;
