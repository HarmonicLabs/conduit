import { Multiplexer } from "../../multiplexer/index.js";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { KeepAliveMessage } from "./KeepAliveMessage.js";
import { KeepAliveResponse } from "./messages/index.js";
type KeepAliveClientEvtListener = (msg: KeepAliveMessage) => void;
type KeepAliveClientEvtListeners = {
    request: KeepAliveClientEvtListener[];
    response: KeepAliveClientEvtListener[];
    done: KeepAliveClientEvtListener[];
    error: ((err: Error) => void)[];
};
type KeepAliveClientEvt = keyof KeepAliveClientEvtListeners;
type EvtListenerOf<Evt extends KeepAliveClientEvt> = (...args: any[]) => any;
type MsgOf<Evt extends KeepAliveClientEvt> = {};
export declare class KeepAliveClient {
    readonly mplexer: Multiplexer;
    clearListeners: () => this;
    addEventListener: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts) => this;
    addListener: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    on: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    once: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeEventListener: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeListener: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    off: <EvtName extends KeepAliveClientEvt>(evt: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeAllListeners: (event?: KeepAliveClientEvt) => this;
    emit: <EvtName extends KeepAliveClientEvt>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    dispatchEvent: <EvtName extends KeepAliveClientEvt>(evt: EvtName, msg: MsgOf<EvtName>) => boolean;
    constructor(multiplexer: Multiplexer);
    done(): void;
    request(cookie: number | bigint): Promise<KeepAliveResponse>;
}
export {};
