"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QryResult = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var QryResult = /** @class */ (function () {
    function QryResult(qry, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var result = qry.result;
        if (!((0, cbor_1.isCborObj)(result)))
            throw new Error("invalid IQryResult interface");
        this.result = result;
    }
    ;
    QryResult.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    QryResult.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    QryResult.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(4),
            this.result
        ]);
    };
    QryResult.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return QryResult.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    QryResult.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(4)))
            throw new Error("invalid CBOR for 'QryResult");
        var _a = __read(cbor.array, 2), _idx = _a[0], _resultCbor = _a[1];
        return new QryResult({
            result: cbor.array[1]
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, originalBytes));
    };
    return QryResult;
}());
exports.QryResult = QryResult;
