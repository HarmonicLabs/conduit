"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QryFailure = exports.QryFailureReason = void 0;
exports.isQryFailureReason = isQryFailureReason;
var cbor_1 = require("@harmoniclabs/cbor");
var MiniProtocol_1 = require("../../../MiniProtocol/index.js");
var QryFailureReason;
(function (QryFailureReason) {
    QryFailureReason[QryFailureReason["pointTooOld"] = 0] = "pointTooOld";
    QryFailureReason[QryFailureReason["pointNotOnChain"] = 1] = "pointNotOnChain";
})(QryFailureReason || (exports.QryFailureReason = QryFailureReason = {}));
Object.freeze(QryFailureReason);
function isQryFailureReason(stuff) {
    return stuff === 0 || stuff === 1;
}
var QryFailure = /** @class */ (function () {
    function QryFailure(_a) {
        var reason = _a.reason;
        if (!(isQryFailureReason(reason)))
            throw new Error("invalid IQryFailure interface");
        this.reason = reason;
    }
    ;
    QryFailure.prototype.toJSON = function () { return this.toJson(); };
    QryFailure.prototype.toJson = function () {
        return {
            protocol: (0, MiniProtocol_1.miniProtocolToString)(MiniProtocol_1.MiniProtocol.LocalStateQuery),
            message: "QryFailure",
            data: {
                reason: typeof this.reason === "number" ?
                    QryFailureReason[this.reason] :
                    this.reason
            }
        };
    };
    QryFailure.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    QryFailure.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    QryFailure.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(2),
            new cbor_1.CborUInt(this.reason)
        ]);
    };
    QryFailure.fromCbor = function (cbor) {
        return QryFailure.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
    };
    QryFailure.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[0].num === BigInt(2) &&
            cbor.array[1] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for 'QryFailure");
        var _a = __read(cbor.array, 2), _idx = _a[0], _reasonCbor = _a[1];
        return new QryFailure({
            // constructor checks for correct interface (and correct reason)
            reason: Number(_reasonCbor.num)
        });
    };
    return QryFailure;
}());
exports.QryFailure = QryFailure;
