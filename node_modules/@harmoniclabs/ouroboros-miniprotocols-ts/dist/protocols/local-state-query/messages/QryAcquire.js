"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QryAcquire = void 0;
exports.isIQryAcquire = isIQryAcquire;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ChainPoint_1 = require("../../types/ChainPoint.js");
;
function isIQryAcquire(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (stuff.point === undefined || (0, ChainPoint_1.isIChainPoint)(stuff.point));
}
var QryAcquire = /** @class */ (function () {
    function QryAcquire(acq) {
        acq = acq !== null && acq !== void 0 ? acq : {};
        if (!isIQryAcquire(acq))
            throw new Error("invalid interface for 'QryAcquire'");
        this.point = (acq.point instanceof ChainPoint_1.ChainPoint ? acq.point :
            (0, ChainPoint_1.isIChainPoint)(acq.point) ? new ChainPoint_1.ChainPoint(acq.point) :
                undefined);
    }
    ;
    QryAcquire.prototype.toCborBytes = function () {
        return this.toCbor().toBuffer();
    };
    QryAcquire.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    QryAcquire.prototype.toCborObj = function () {
        var arr = [new cbor_1.CborUInt(this.point ? 0 : 8)];
        if (this.point) {
            arr.push(this.point.toCborObj());
        }
        return new cbor_1.CborArray(arr);
    };
    QryAcquire.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return QryAcquire.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: false }));
    };
    QryAcquire.fromCborObj = function (cbor, originalBytes) {
        if (originalBytes === void 0) { originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 1 &&
            cbor.array[0] instanceof cbor_1.CborUInt))
            throw new Error("invalid CBOR for 'QryAcquire");
        var num = Number(cbor.array[0].num);
        if (num === 0) {
            if (cbor.array.length < 2)
                throw new Error("invalid CBOR for 'QryAcquire");
            return new QryAcquire({
                point: ChainPoint_1.ChainPoint.fromCborObj(cbor.array[1])
            });
        }
        if (num === 8)
            return new QryAcquire({});
        throw new Error("invalid CBOR for 'QryAcquire'; unknown index: " + num.toString());
    };
    return QryAcquire;
}());
exports.QryAcquire = QryAcquire;
