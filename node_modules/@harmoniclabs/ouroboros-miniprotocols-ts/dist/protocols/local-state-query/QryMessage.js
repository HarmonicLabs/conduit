"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isQryMessage = isQryMessage;
exports.localStateQueryMessageFromCborObj = localStateQueryMessageFromCborObj;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var QryAcquire_1 = require("./messages/QryAcquire.js");
var QryAcquired_1 = require("./messages/QryAcquired.js");
var QryDone_1 = require("./messages/QryDone.js");
var QryFailure_1 = require("./messages/QryFailure.js");
var QryQuery_1 = require("./messages/QryQuery.js");
var QryReAcquire_1 = require("./messages/QryReAcquire.js");
var QryRelease_1 = require("./messages/QryRelease.js");
var QryResult_1 = require("./messages/QryResult.js");
function isQryMessage(msg) {
    return (0, obj_utils_1.isObject)(msg) && (msg instanceof QryAcquire_1.QryAcquire ||
        msg instanceof QryFailure_1.QryFailure ||
        msg instanceof QryAcquired_1.QryAcquired ||
        msg instanceof QryReAcquire_1.QryReAcquire ||
        msg instanceof QryQuery_1.QryQuery ||
        msg instanceof QryResult_1.QryResult ||
        msg instanceof QryRelease_1.QryRelease ||
        msg instanceof QryDone_1.QryDone);
}
function localStateQueryMessageFromCborObj(cbor) {
    /*
    msgAcquire = [0 , point ] / [ 8 ]; `[8]` is shortcut for tip
    msgAcquired = [ 1 ]
    msgFailure = [2 , failure ]
    msgQuery = [3 , query ]; see `query.cddl`
    msgResult = [4 , result ]
    msgRelease = [5]
    msgReAcquire = [6 , point ] / [ 9 ]; `[9]` is shortcut for tip
    lsqMsgDone = [7]
    */
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length >= 1 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid CBOR for `QryMessage`");
    var idx = Number(cbor.array[0].num);
    if (idx === 0 || idx === 8)
        return QryAcquire_1.QryAcquire.fromCborObj(cbor);
    if (idx === 1)
        return new QryAcquired_1.QryAcquired();
    if (idx === 2)
        return QryFailure_1.QryFailure.fromCborObj(cbor);
    if (idx === 3)
        return QryQuery_1.QryQuery.fromCborObj(cbor);
    if (idx === 4)
        return QryResult_1.QryResult.fromCborObj(cbor);
    if (idx === 5)
        return new QryRelease_1.QryRelease();
    if (idx === 6 || idx === 9)
        return QryReAcquire_1.QryReAcquire.fromCborObj(cbor);
    if (idx === 7)
        return new QryDone_1.QryDone();
    throw new Error("invalid CBOR for `QryMessage`; unknown index: " + idx.toString());
}
