import { CborObj } from "@harmoniclabs/cbor";
import { AddEvtListenerOpts } from "../../common/AddEvtListenerOpts.js";
import { ErrorListener } from "../../common/ErrorListener.js";
import { Multiplexer } from "../../multiplexer/index.js";
import { QryAcquired } from "./messages/QryAcquired.js";
import { QryDone } from "./messages/QryDone.js";
import { QryFailure } from "./messages/QryFailure.js";
import { QryMessage } from "./QryMessage.js";
import { QryQuery } from "./messages/QryQuery.js";
import { QryRelease } from "./messages/QryRelease.js";
import { QryResult } from "./messages/QryResult.js";
import { IChainPoint } from "../types/ChainPoint.js";
import { QryAcquire, QryReAcquire } from "./messages/index.js";
type LocalStateQueryEvtListener<Msg extends QryMessage = QryMessage> = (msg: Msg) => void;
type LocalStateQueryEvtListeners = {
    acquire: LocalStateQueryEvtListener<QryAcquire>[];
    failure: LocalStateQueryEvtListener<QryFailure>[];
    acquired: LocalStateQueryEvtListener<QryAcquired>[];
    reacquire: LocalStateQueryEvtListener<QryReAcquire>[];
    query: LocalStateQueryEvtListener<QryQuery>[];
    result: LocalStateQueryEvtListener<QryResult>[];
    release: LocalStateQueryEvtListener<QryRelease>[];
    done: LocalStateQueryEvtListener<QryDone>[];
    error: ErrorListener[];
};
type LocalStateQueryEvtName = keyof LocalStateQueryEvtListeners;
type MsgOf<EvtName extends LocalStateQueryEvtName> = EvtName extends "acquire" ? QryAcquire : EvtName extends "failure" ? QryFailure : EvtName extends "acquired" ? QryAcquired : EvtName extends "reacquire" ? QryReAcquire : EvtName extends "query" ? QryQuery : EvtName extends "result" ? QryResult : EvtName extends "release" ? QryRelease : EvtName extends "done" ? QryDone : EvtName extends "error" ? Error : never;
type EvtListenerOf<EvtName extends LocalStateQueryEvtName> = EvtName extends "acquire" ? LocalStateQueryEvtListener<QryAcquire> : EvtName extends "failure" ? LocalStateQueryEvtListener<QryFailure> : EvtName extends "acquired" ? LocalStateQueryEvtListener<QryAcquired> : EvtName extends "reacquire" ? LocalStateQueryEvtListener<QryReAcquire> : EvtName extends "query" ? LocalStateQueryEvtListener<QryQuery> : EvtName extends "result" ? LocalStateQueryEvtListener<QryResult> : EvtName extends "release" ? LocalStateQueryEvtListener<QryRelease> : EvtName extends "done" ? LocalStateQueryEvtListener<QryDone> : EvtName extends "error" ? ErrorListener : never;
export declare class LocalStateQueryClient {
    readonly mplexer: Multiplexer;
    clearListeners: (event?: LocalStateQueryEvtName) => this;
    addEventListener: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>, options?: AddEvtListenerOpts) => this;
    addListener: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>) => this;
    on: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>) => this;
    once: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeEventListener: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeListener: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>) => this;
    off: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, listener: EvtListenerOf<EvtName>) => this;
    removeAllListeners: (event?: LocalStateQueryEvtName) => this;
    emit: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, msg: MsgOf<EvtName>) => boolean;
    dispatchEvent: <EvtName extends LocalStateQueryEvtName>(eventName: EvtName, msg: MsgOf<EvtName>) => boolean;
    constructor(multiplexer: Multiplexer);
    sendAcquire(point?: IChainPoint): void;
    acquire(point: IChainPoint): Promise<void>;
    sendQuery(query: CborObj): void;
    query(query: CborObj, timeout?: number | undefined): Promise<QryResult>;
    sendRelease(): void;
    release(): void;
    done(): void;
    requestCurrentEra(timeout?: number): Promise<bigint>;
}
export {};
