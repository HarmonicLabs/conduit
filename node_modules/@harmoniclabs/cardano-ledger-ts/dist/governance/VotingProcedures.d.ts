import { CborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { IVoter, Voter } from "./Voter.js";
import { IVotingProcedure, VotingProcedure } from "./VotingProcedure.js";
import { ITxOutRef, TxOutRef } from "../tx/body/output/TxOutRef.js";
export interface IVotingProceduresEntry {
    voter: IVoter;
    votes: {
        govActionId: ITxOutRef;
        vote: IVotingProcedure;
    }[];
}
export declare function isIVotingProceduresEntry(stuff: any): stuff is IVotingProceduresEntry;
export interface ITypedVotingProceduresEntry {
    voter: Voter;
    votes: {
        govActionId: TxOutRef;
        vote: VotingProcedure;
    }[];
}
export type IVotingProcedures = IVotingProceduresEntry[];
export type ITypedVotingProcedures = ITypedVotingProceduresEntry[];
export declare class VotingProcedures {
    readonly cborRef: SubCborRef | undefined;
    readonly procedures: ITypedVotingProcedures;
    constructor(procedures: IVotingProcedures, cborRef?: SubCborRef | undefined);
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
}
