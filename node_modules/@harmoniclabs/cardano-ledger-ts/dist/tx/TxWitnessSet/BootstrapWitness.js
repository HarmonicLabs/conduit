"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootstrapWitness = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var Hash32_1 = require("../../hashes/Hash32/Hash32.js");
var Signature_1 = require("../../hashes/Signature/index.js");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var VKey_1 = require("../../eras/common/VKey.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var BootstrapWitness = /** @class */ (function () {
    function BootstrapWitness(witness, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var pubKey = witness.pubKey, signature = witness.signature, chainCode = witness.chainCode, attributes = witness.attributes;
        if (!(pubKey instanceof Hash32_1.Hash32))
            throw new Error("invalid 'pubKey' constructing 'BootstrapWitness'");
        this.pubKey = pubKey instanceof VKey_1.VKey ? pubKey : new VKey_1.VKey(pubKey);
        if (!(signature instanceof Signature_1.Signature))
            throw new Error("invalid 'signature' constructing 'BootstrapWitness'");
        this.signature = signature;
        if (!(chainCode instanceof Hash32_1.Hash32))
            throw new Error("invalid 'chainCode' constructing 'BootstrapWitness'");
        this.chainCode = chainCode;
        if (!((0, uint8array_utils_1.isUint8Array)(attributes)))
            throw new Error("invalid 'attributes' constructing 'BootstrapWitness'");
        this.attributes = Uint8Array.from(attributes);
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(witness);
    }
    BootstrapWitness.prototype.clone = function () {
        var _a;
        return new BootstrapWitness({
            pubKey: this.pubKey.clone(),
            signature: this.signature.clone(),
            chainCode: this.chainCode.clone(),
            attributes: this.attributes.slice()
        }, (_a = this.cborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    BootstrapWitness.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BootstrapWitness.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BootstrapWitness.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            this.pubKey.toCborObj(),
            this.signature.toCborObj(),
            this.chainCode.toCborObj(),
            new cbor_1.CborBytes(this.attributes)
        ]);
    };
    BootstrapWitness.fromCbor = function (cStr) {
        return BootstrapWitness.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    BootstrapWitness.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray &&
            cObj.array[3] instanceof cbor_1.CborBytes))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BootstrapWitness");
        return new BootstrapWitness({
            pubKey: Hash32_1.Hash32.fromCborObj(cObj.array[0]),
            signature: Signature_1.Signature.fromCborObj(cObj.array[1]),
            chainCode: Hash32_1.Hash32.fromCborObj(cObj.array[2]),
            attributes: cObj.array[3].bytes
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    BootstrapWitness.prototype.toJSON = function () { return this.toJson(); };
    BootstrapWitness.prototype.toJson = function () {
        this.chainCode;
        return {
            pubKey: this.pubKey.toString(),
            signature: this.signature.toString(),
            chainCode: this.chainCode.toString(),
            attributes: (0, uint8array_utils_1.toHex)(this.attributes)
        };
    };
    return BootstrapWitness;
}());
exports.BootstrapWitness = BootstrapWitness;
