"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxOutRef = exports.MaryUTxO = exports.isIMaryUTxO = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var MaryTxOut_1 = require("./MaryTxOut.js");
var TxOutRef_1 = require("../../common/TxOutRef.js");
Object.defineProperty(exports, "TxOutRef", { enumerable: true, get: function () { return TxOutRef_1.TxOutRef; } });
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
function isIMaryUTxO(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, obj_utils_1.hasOwn)(stuff, "utxoRef") && (0, TxOutRef_1.isITxOutRef)(stuff.utxoRef) &&
        (0, obj_utils_1.hasOwn)(stuff, "resolved") && (0, MaryTxOut_1.isIMaryTxOut)(stuff.resolved));
}
exports.isIMaryUTxO = isIMaryUTxO;
var MaryUTxO = /** @class */ (function () {
    function MaryUTxO(_a, cborRef) {
        var utxoRef = _a.utxoRef, resolved = _a.resolved;
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        this.utxoRef = utxoRef instanceof TxOutRef_1.TxOutRef ? utxoRef : new TxOutRef_1.TxOutRef(utxoRef);
        this.resolved = resolved instanceof MaryTxOut_1.MaryTxOut ? resolved : new MaryTxOut_1.MaryTxOut(resolved);
    }
    MaryUTxO.prototype.clone = function () {
        return new MaryUTxO(this);
    };
    MaryUTxO.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    MaryUTxO.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    MaryUTxO.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            this.utxoRef.toCborObj(),
            this.resolved.toCborObj()
        ]);
    };
    MaryUTxO.fromCbor = function (cStr) {
        return MaryUTxO.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    MaryUTxO.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("MaryUTxO");
        var _a = __read(cObj.array, 2), ref = _a[0], res = _a[1];
        var utxoRef;
        var resolved;
        if (ref === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("MaryUTxO");
        if (res === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("MaryUTxO", "if you are trying to parse only a TxOutRef instead (<hex>#<index>) you should use `TxOutRef.fromCborObj`");
        utxoRef = TxOutRef_1.TxOutRef.fromCborObj(ref);
        resolved = MaryTxOut_1.MaryTxOut.fromCborObj(res);
        return new MaryUTxO({
            utxoRef: utxoRef,
            resolved: resolved
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    MaryUTxO.prototype.toJSON = function () { return this.toJson(); };
    MaryUTxO.prototype.toJson = function () {
        return {
            utxoRef: this.utxoRef.toJson(),
            resolved: this.resolved.toJson()
        };
    };
    MaryUTxO.sort = function (a, b) {
        return TxOutRef_1.TxOutRef.sort(a.utxoRef, b.utxoRef);
    };
    return MaryUTxO;
}());
exports.MaryUTxO = MaryUTxO;
