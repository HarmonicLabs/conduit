import { ToCbor, CborString, CborMap, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Address, AddressStr, Value, IValue } from "../../../ledger/index.js";
import { ToJson } from "../../../utils/ToJson.js";
export interface IMaryTxOut {
    address: Address | AddressStr;
    value: Value | IValue;
}
export declare function isIMaryTxOut(stuff: any): stuff is IMaryTxOut;
export declare class MaryTxOut implements IMaryTxOut, ToCbor, Cloneable<MaryTxOut>, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly address: Address;
    readonly value: Value;
    constructor(MaryTxOutput: IMaryTxOut, cborRef?: SubCborRef | undefined);
    clone(): MaryTxOut;
    static get fake(): MaryTxOut;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cStr: CanBeCborString): MaryTxOut;
    static fromCborObj(cObj: CborObj): MaryTxOut;
    toJSON(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
    };
    toJson(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
    };
}
