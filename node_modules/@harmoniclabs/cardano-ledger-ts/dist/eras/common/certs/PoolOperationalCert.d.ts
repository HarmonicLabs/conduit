import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor } from "@harmoniclabs/cbor";
import { U8Arr } from "../../../utils/U8Arr.js";
import { KesPubKey } from "../Kes.js";
import { CanBeUInteger } from "../../../utils/ints.js";
export interface IPoolOperationalCert {
    kesPubKey: Uint8Array;
    sequenceNumber: CanBeUInteger;
    kesPeriod: CanBeUInteger;
    signature: Uint8Array;
}
export interface IPoolOperationalCertChecked extends IPoolOperationalCert {
    kesPubKey: KesPubKey;
    sequenceNumber: CanBeUInteger;
    kesPeriod: CanBeUInteger;
    signature: U8Arr<64>;
}
export declare function isIPoolOperationalCert(thing: any): thing is IPoolOperationalCertChecked;
export declare class PoolOperationalCert implements IPoolOperationalCert, ToCbor {
    readonly cborRef: SubCborRef | undefined;
    readonly kesPubKey: KesPubKey;
    readonly sequenceNumber: bigint;
    readonly kesPeriod: bigint;
    readonly signature: U8Arr<64>;
    constructor(cert: IPoolOperationalCert, cborRef?: SubCborRef | undefined);
    clone(): PoolOperationalCert;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): PoolOperationalCert;
    static fromCborObj(cbor: CborObj, _originalBytes?: Uint8Array): PoolOperationalCert;
}
