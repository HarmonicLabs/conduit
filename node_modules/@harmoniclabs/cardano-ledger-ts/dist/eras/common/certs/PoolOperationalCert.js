"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolOperationalCert = exports.isIPoolOperationalCert = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var U8Arr_1 = require("../../../utils/U8Arr.js");
var Kes_1 = require("../Kes.js");
var ints_1 = require("../../../utils/ints.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
function isIPoolOperationalCert(thing) {
    return (0, obj_utils_1.isObject)(thing) && ((0, Kes_1.isKesPubKey)(thing.kesPubKey) &&
        (0, ints_1.canBeUInteger)(thing.sequenceNumber) &&
        (0, ints_1.canBeUInteger)(thing.kesPeriod) &&
        (0, U8Arr_1.isU8Arr)(thing.signature, 64));
}
exports.isIPoolOperationalCert = isIPoolOperationalCert;
var PoolOperationalCert = /** @class */ (function () {
    function PoolOperationalCert(cert, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!isIPoolOperationalCert(cert))
            throw new Error("Invalid PoolOperationalCert");
        this.kesPubKey = cert.kesPubKey;
        this.sequenceNumber = (0, ints_1.forceBigUInt)(cert.sequenceNumber);
        this.kesPeriod = (0, ints_1.forceBigUInt)(cert.kesPeriod);
        this.signature = cert.signature;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(cert);
    }
    PoolOperationalCert.prototype.clone = function () {
        var _a;
        return new PoolOperationalCert({
            kesPubKey: Uint8Array.prototype.slice.call(this.kesPubKey, 0, 32),
            sequenceNumber: this.sequenceNumber,
            kesPeriod: this.kesPeriod,
            signature: Uint8Array.prototype.slice.call(this.signature, 0, 64)
        }, (_a = this.cborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    PoolOperationalCert.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    PoolOperationalCert.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    PoolOperationalCert.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborBytes(this.kesPubKey),
            new cbor_1.CborUInt(this.sequenceNumber),
            new cbor_1.CborUInt(this.kesPeriod),
            new cbor_1.CborBytes(this.signature)
        ]);
    };
    PoolOperationalCert.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return PoolOperationalCert.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    PoolOperationalCert.fromCborObj = function (cbor, _originalBytes) {
        if (!(cbor instanceof cbor_1.CborArray
        // && cbor.array.length >= 4
        ))
            throw new Error("invalid cbor for PoolOperationalCert");
        var _a = __read(cbor.array, 4), cKes = _a[0], cSeq = _a[1], cPeriod = _a[2], cSig = _a[3];
        if (!(cKes instanceof cbor_1.CborBytes
            && cKes.bytes.length === 32
            && cSeq instanceof cbor_1.CborUInt
            && cPeriod instanceof cbor_1.CborUInt
            && cSig instanceof cbor_1.CborBytes
            && cSig.bytes.length === 64))
            throw new Error("invalid cbor for PoolOperationalCert");
        return new PoolOperationalCert({
            kesPubKey: cKes.bytes,
            sequenceNumber: cSeq.num,
            kesPeriod: cPeriod.num,
            signature: cSig.bytes
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, _originalBytes));
    };
    return PoolOperationalCert;
}());
exports.PoolOperationalCert = PoolOperationalCert;
