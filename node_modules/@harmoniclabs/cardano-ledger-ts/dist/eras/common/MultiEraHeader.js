"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiEraHeader = void 0;
var ConwayHeader_1 = require("../conway/header/ConwayHeader.js");
var BabbageHeader_1 = require("../babbage/header/BabbageHeader.js");
var AlonzoHeader_1 = require("../alonzo/header/AlonzoHeader.js");
var MaryHeader_1 = require("../mary/header/MaryHeader.js");
var AllegraHeader_1 = require("../allegra/header/AllegraHeader.js");
var ShelleyHeader_1 = require("../shelley/header/ShelleyHeader.js");
var cbor_1 = require("@harmoniclabs/cbor");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var MultiEraHeader = /** @class */ (function () {
    function MultiEraHeader(header, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        this.era = header.era;
        this.header = header.header;
    }
    MultiEraHeader.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    MultiEraHeader.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    MultiEraHeader.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(BigInt(this.era)),
            this.header.toCborObj()
        ]);
    };
    MultiEraHeader.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return MultiEraHeader.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    MultiEraHeader.fromCborObj = function (cObj, _originalBytes) {
        // console.log("multiEraHeader.fromCborObj", cObj);
        if (!(cObj instanceof cbor_1.CborArray
            && cObj.array.length >= 2))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("Invalid CBOR for MultiEraHeader");
        var _era = cObj.array[0];
        var _headerData = cObj.array[1];
        // console.log("_multiEraHeaderData", _headerData)
        if (!(_era instanceof cbor_1.CborUInt))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("Era must be a CborUInt");
        var header;
        switch (Number(_era.num)) {
            case 7: // Conway era
                header = ConwayHeader_1.ConwayHeader.fromCborObj(_headerData);
                break;
            case 6: // Babbage era
                header = BabbageHeader_1.BabbageHeader.fromCborObj(_headerData);
                break;
            case 5: // Alonzo era
                header = AlonzoHeader_1.AlonzoHeader.fromCborObj(_headerData);
                break;
            case 4: // Mary era
                header = MaryHeader_1.MaryHeader.fromCborObj(_headerData);
                break;
            case 3: // Allegra era
                header = AllegraHeader_1.AllegraHeader.fromCborObj(_headerData);
                break;
            case 2: // Shelley era
                header = ShelleyHeader_1.ShelleyHeader.fromCborObj(_headerData);
                break;
            default:
                throw new Error("Unsupported era: ".concat(_era.num));
        }
        var multiEraHeader = new MultiEraHeader({
            era: Number(_era.num),
            header: header
        }, (0, getSubCborRef_1.getSubCborRef)(cObj, _originalBytes));
        /*
        console.log("multiEraHeader",
            JSON.stringify(multiEraHeader.toJSON(),
            (k, v) => {
              if (typeof v === "bigint") return v.toString();
              if (v instanceof Uint8Array) return toHex(v);
              return v;
            },
            2 // indentation
          )
        );
        //*/
        return multiEraHeader;
    };
    MultiEraHeader.prototype.toJSON = function () {
        return this.toJson();
    };
    ;
    MultiEraHeader.prototype.toJson = function () {
        return {
            era: this.era,
            header: this.header
        };
    };
    return MultiEraHeader;
}());
exports.MultiEraHeader = MultiEraHeader;
