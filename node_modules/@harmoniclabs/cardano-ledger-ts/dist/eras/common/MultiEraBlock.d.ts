import { ConwayBlock } from '../conway/block/ConwayBlock.js';
import { BabbageBlock } from '../babbage/block/BabbageBlock.js';
import { AlonzoBlock } from '../alonzo/block/AlonzoBlock.js';
import { MaryBlock } from '../mary/block/MaryBlock.js';
import { AllegraBlock } from '../allegra/block/AllegraBlock.js';
import { ShelleyBlock } from '../shelley/block/ShelleyBlock.js';
import { CborArray, ToCbor, SubCborRef, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { ToJson } from "../../utils/ToJson.js";
import { CardanoEra } from "./types/CardanoEra.js";
export interface IMultiEraBlock {
    era: CardanoEra;
    block: ConwayBlock | BabbageBlock | AlonzoBlock | MaryBlock | AllegraBlock | ShelleyBlock;
}
export declare class MultiEraBlock implements IMultiEraBlock, ToCbor, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly era: CardanoEra;
    readonly block: ConwayBlock | BabbageBlock | AlonzoBlock | MaryBlock | AllegraBlock | ShelleyBlock;
    constructor(block: IMultiEraBlock, cborRef?: SubCborRef | undefined);
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): MultiEraBlock;
    static fromCborObj(cObj: CborObj, _originalBytes?: Uint8Array): MultiEraBlock;
    toJSON(): {
        era: number;
        block: {
            header: import("../index.js").ConwayHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
                scriptDataHash: string | undefined;
                collateralInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
                requiredSigners: string[] | undefined;
                network: import("./ledger/index.js").NetworkT | undefined;
                collateralReturn: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                } | undefined;
                totCollateral: string | undefined;
                refInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
                plutusV1Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV1;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                datums: any[] | undefined;
                redeemers: {
                    tag: "Spend" | "Mint" | "Cert" | "Withdraw" | "Voting" | "Proposing";
                    index: number;
                    execUnits: {
                        steps: string;
                        memory: string;
                    };
                    data: any;
                }[] | undefined;
                plutusV2Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV2;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                plutusV3Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV3;
                    description: string;
                    cborHex: string;
                })[] | undefined;
            }[];
            auxiliaryDataSet: {};
            invalidTransactions: (number | bigint)[] | undefined;
        } | {
            header: import("../index.js").BabbageHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
                scriptDataHash: string | undefined;
                collateralInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
                requiredSigners: string[] | undefined;
                network: import("./ledger/index.js").NetworkT | undefined;
                collateralReturn: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                } | undefined;
                totCollateral: string | undefined;
                refInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
                plutusV1Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV1;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                datums: any[] | undefined;
                redeemers: {
                    tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                    index: number;
                    execUnits: {
                        steps: string;
                        memory: string;
                    };
                    data: any;
                }[] | undefined;
                plutusV2Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV2;
                    description: string;
                    cborHex: string;
                })[] | undefined;
            }[];
            auxiliaryDataSet: {};
            invalidTransactions: (number | bigint)[] | undefined;
        } | {
            header: import("../index.js").AlonzoHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
                scriptDataHash: string | undefined;
                collateralInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                    };
                }[] | undefined;
                requiredSigners: string[] | undefined;
                network: import("./ledger/index.js").NetworkT | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
                plutusV1Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV1;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                datums: any[] | undefined;
                redeemers: {
                    tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                    index: number;
                    execUnits: {
                        steps: string;
                        memory: string;
                    };
                    data: any;
                }[] | undefined;
            }[];
            auxiliaryDataSet: {};
            invalidTransactions: (number | bigint)[] | undefined;
        } | {
            header: import("../index.js").MaryHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
            }[];
            auxiliaryDataSet: [string, import("../index.js").MaryAuxiliaryData];
        } | {
            header: import("../index.js").AllegraHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
            }[];
            auxiliaryDataSet: [string, import("../index.js").AllegraAuxiliaryData];
        } | {
            header: import("../index.js").ShelleyHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
            }[];
            metadataSet: {};
        };
    };
    toJson(): {
        era: number;
        block: {
            header: import("../index.js").ConwayHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
                scriptDataHash: string | undefined;
                collateralInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
                requiredSigners: string[] | undefined;
                network: import("./ledger/index.js").NetworkT | undefined;
                collateralReturn: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                } | undefined;
                totCollateral: string | undefined;
                refInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
                plutusV1Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV1;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                datums: any[] | undefined;
                redeemers: {
                    tag: "Spend" | "Mint" | "Cert" | "Withdraw" | "Voting" | "Proposing";
                    index: number;
                    execUnits: {
                        steps: string;
                        memory: string;
                    };
                    data: any;
                }[] | undefined;
                plutusV2Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV2;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                plutusV3Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV3;
                    description: string;
                    cborHex: string;
                })[] | undefined;
            }[];
            auxiliaryDataSet: {};
            invalidTransactions: (number | bigint)[] | undefined;
        } | {
            header: import("../index.js").BabbageHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
                scriptDataHash: string | undefined;
                collateralInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
                requiredSigners: string[] | undefined;
                network: import("./ledger/index.js").NetworkT | undefined;
                collateralReturn: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                        type: import("../../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                } | undefined;
                totCollateral: string | undefined;
                refInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                        refScript: import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                            type: import("../../index.js").LitteralScriptType;
                            description: string;
                            cborHex: string;
                        } | undefined;
                    };
                }[] | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
                plutusV1Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV1;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                datums: any[] | undefined;
                redeemers: {
                    tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                    index: number;
                    execUnits: {
                        steps: string;
                        memory: string;
                    };
                    data: any;
                }[] | undefined;
                plutusV2Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV2;
                    description: string;
                    cborHex: string;
                })[] | undefined;
            }[];
            auxiliaryDataSet: {};
            invalidTransactions: (number | bigint)[] | undefined;
        } | {
            header: import("../index.js").AlonzoHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                    datum: any;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
                scriptDataHash: string | undefined;
                collateralInputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                        datum: any;
                    };
                }[] | undefined;
                requiredSigners: string[] | undefined;
                network: import("./ledger/index.js").NetworkT | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
                plutusV1Scripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.PlutusV1;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                datums: any[] | undefined;
                redeemers: {
                    tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                    index: number;
                    execUnits: {
                        steps: string;
                        memory: string;
                    };
                    data: any;
                }[] | undefined;
            }[];
            auxiliaryDataSet: {};
            invalidTransactions: (number | bigint)[] | undefined;
        } | {
            header: import("../index.js").MaryHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
                mint: import("./Value/index.js").ValueJson | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
            }[];
            auxiliaryDataSet: [string, import("../index.js").MaryAuxiliaryData];
        } | {
            header: import("../index.js").AllegraHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
                validityIntervalStart: string | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
            }[];
            auxiliaryDataSet: [string, import("../index.js").AllegraAuxiliaryData];
        } | {
            header: import("../index.js").ShelleyHeader;
            transactionBodies: {
                inputs: {
                    utxoRef: import("./TxOutRef.js").UTxORefJson;
                    resolved: {
                        address: `addr1${string}` | `addr_test1${string}`;
                        value: import("../../ledger/index.js").ValueJson;
                    };
                }[];
                outputs: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../ledger/index.js").ValueJson;
                }[];
                fee: string;
                ttl: string | undefined;
                certs: ({
                    certType: "PoolRegistration";
                    poolParams: {
                        operator: string;
                        vrfKeyHash: string;
                        pledge: string;
                        cost: string;
                        margin: number;
                        rewardAccount: import("./ledger/index.js").StakeAddress<import("./ledger/index.js").StakeAddressType>;
                        owners: string[];
                        relays: ({
                            type: string;
                            port: number | undefined;
                            ipv4: string | undefined;
                            ipv6: string | undefined;
                            dnsName?: undefined;
                        } | {
                            type: string;
                            port: number | undefined;
                            dnsName: string;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        } | {
                            type: string;
                            dnsName: string;
                            port?: undefined;
                            ipv4?: undefined;
                            ipv6?: undefined;
                        })[];
                        metadata: {
                            poolMetadataUrl: string;
                            hash: string;
                        } | undefined;
                    };
                } | {
                    certType: "PoolRetirement";
                    poolHash: string;
                    epoch: string;
                } | {
                    certType: "StakeDeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "StakeDelegation";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                } | {
                    certType: "StakeRegistration";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "AuthCommitteeHot";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    hotCredential: {
                        credentialType: string;
                        hash: string;
                    };
                } | {
                    certType: "GenesisKeyDelegation";
                    genesisHash: string;
                    genesisDelegateHash: string;
                    vrfKeyHash: string;
                } | {
                    certType: "RegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "RegistrationDrep";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "ResignCommitteeCold";
                    coldCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "StakeVoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "StakeVoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "UnRegistrationDeposit";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    deposit: string;
                } | {
                    certType: "UnRegistrationDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    coin: string;
                } | {
                    certType: "UpdateDrep";
                    drepCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    anchor: {
                        url: string;
                        anchorDataHash: string;
                    } | null;
                } | {
                    certType: "VoteDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                } | {
                    certType: "VoteRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    drep: {
                        drepType: string;
                    };
                    coin: string;
                } | {
                    certType: "MoveInstantRewards";
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            credentialType: string;
                            hash: string;
                        };
                        amount: string;
                    }[];
                } | {
                    certType: "StakeRegistrationDeleg";
                    stakeCredential: {
                        credentialType: string;
                        hash: string;
                    };
                    poolKeyHash: string;
                    coin: string;
                })[] | undefined;
                withdrawals: {
                    [rewardAccount: string]: string;
                } | undefined;
                protocolUpdate: object | undefined;
                auxDataHash: string | undefined;
            }[];
            transactionWitnessSets: {
                vkeyWitnesses: {
                    vkey: string;
                    signature: string;
                }[] | undefined;
                nativeScripts: (import("../../index.js").ScriptSignature | import("../../index.js").ScriptAll | import("../../index.js").ScriptAny | import("../../index.js").ScriptAtLeast | import("../../index.js").ScriptAfter | import("../../index.js").ScriptBefore | {
                    type: import("../../index.js").ScriptType.NativeScript;
                    description: string;
                    cborHex: string;
                })[] | undefined;
                bootstrapWitnesses: {
                    pubKey: string;
                    signature: string;
                    chainCode: string;
                    attributes: string;
                }[] | undefined;
            }[];
            metadataSet: {};
        };
    };
}
