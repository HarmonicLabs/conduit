"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyPPUpdateProposalFromCborObj = exports.LegacyPPUpdateProposalToCborObj = exports.LegacyPPUpdateMapFromCborObj = exports.LegacyPPUpdateMapToCborObj = exports.protocolUpdateToJson = exports.isLegacyPPUpdateProposal = exports.isLegacyPPUpdateMap = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var GenesisHash_1 = require("../../hashes/Hash28/GenesisHash.js");
var ints_1 = require("../../utils/ints.js");
var Rational_1 = require("./Rational.js");
function isLegacyPPUpdateMap(something) {
    return (Array.isArray(something) &&
        something.every(function (entry) {
            return ((0, obj_utils_1.isObject)(entry)
                && entry.genesisHash instanceof GenesisHash_1.GenesisHash
                && (0, obj_utils_1.isObject)(entry.changes)
                && Object.entries(entry.changes).every(function (_a) {
                    var _b = __read(_a, 2), paramName = _b[0], value = _b[1];
                    return typeof paramName === "string"
                        && ((0, ints_1.canBeUInteger)(value) || (0, Rational_1.isRational)(value));
                }));
        }));
}
exports.isLegacyPPUpdateMap = isLegacyPPUpdateMap;
function isLegacyPPUpdateProposal(something) {
    return (Array.isArray(something) &&
        something.length >= 2 &&
        isLegacyPPUpdateMap(something[0]) &&
        (0, ints_1.canBeUInteger)(something[1]));
}
exports.isLegacyPPUpdateProposal = isLegacyPPUpdateProposal;
function protocolUpdateToJson(pUp, partialProtocolParamsToJson) {
    return {
        epoch: (0, ints_1.forceBigUInt)(pUp[1]).toString(),
        parametersUpdate: pUp[0].map(function (_a) {
            var genesisHash = _a.genesisHash, changes = _a.changes;
            return ({
                genesisHash: genesisHash.toString(),
                changes: partialProtocolParamsToJson(changes)
            });
        })
    };
}
exports.protocolUpdateToJson = protocolUpdateToJson;
function LegacyPPUpdateMapToCborObj(ppUpdate, partialProtocolParametersToCborObj) {
    return new cbor_1.CborMap(ppUpdate.map(function (entry) {
        return {
            k: entry.genesisHash.toCborObj(),
            v: partialProtocolParametersToCborObj(entry.changes)
        };
    }));
}
exports.LegacyPPUpdateMapToCborObj = LegacyPPUpdateMapToCborObj;
function LegacyPPUpdateMapFromCborObj(cObj, partialProtocolParametersFromCborObj) {
    if (!(cObj instanceof cbor_1.CborMap))
        throw new Error("Invalid CBOR format for \"LegacyPPUpdateProposal\"");
    return cObj.map.map(function (_a) {
        var k = _a.k, v = _a.v;
        return ({
            genesisHash: GenesisHash_1.GenesisHash.fromCborObj(k),
            changes: partialProtocolParametersFromCborObj(v)
        });
    });
}
exports.LegacyPPUpdateMapFromCborObj = LegacyPPUpdateMapFromCborObj;
function LegacyPPUpdateProposalToCborObj(protocolUpdate, LegacyPPUpdateMapToCborObj) {
    return new cbor_1.CborArray([
        LegacyPPUpdateMapToCborObj(protocolUpdate[0]),
        new cbor_1.CborUInt((0, ints_1.forceBigUInt)(protocolUpdate[1]))
    ]);
}
exports.LegacyPPUpdateProposalToCborObj = LegacyPPUpdateProposalToCborObj;
function LegacyPPUpdateProposalFromCborObj(cObj, LegacyPPUpdateMapFromCborObj) {
    if (!(cObj instanceof cbor_1.CborArray))
        throw new Error("Invalid CBOR format for \"LegacyPPUpdateProposal\"");
    var _a = __read(cObj.array, 2), proposalMap = _a[0], epoch = _a[1];
    if (!(epoch instanceof cbor_1.CborUInt))
        throw new Error("Invalid CBOR format for \"LegacyPPUpdateProposal\"");
    return [
        LegacyPPUpdateMapFromCborObj(proposalMap),
        epoch.num
    ];
}
exports.LegacyPPUpdateProposalFromCborObj = LegacyPPUpdateProposalFromCborObj;
