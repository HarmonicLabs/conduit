import { CborMap, CborObj } from "@harmoniclabs/cbor";
import { CanBeUInteger } from "../../utils/ints.js";
import { Epoch } from "./ledger/Epoch.js";
import { Hash28 } from "../../hashes/index.js";
import { Rational } from "./Rational.js";
export type LegacyPPUpdateProposal = [LegacyPPUpdateMap, Epoch];
export type AnyEraPartialParams = {
    [paramName: string]: Rational | CanBeUInteger;
};
export type LegacyPPUpdateMap = {
    genesisHash: Hash28;
    changes: AnyEraPartialParams;
}[];
export declare function isLegacyPPUpdateMap(something: object): something is LegacyPPUpdateMap;
export declare function isLegacyPPUpdateProposal(something: any): something is LegacyPPUpdateProposal;
export declare function protocolUpdateToJson(pUp: LegacyPPUpdateProposal, partialProtocolParamsToJson: (params: AnyEraPartialParams) => any): object;
export declare function LegacyPPUpdateMapToCborObj(ppUpdate: LegacyPPUpdateMap, partialProtocolParametersToCborObj: (params: AnyEraPartialParams) => CborObj): CborMap;
export declare function LegacyPPUpdateMapFromCborObj(cObj: CborObj, partialProtocolParametersFromCborObj: (cObj: CborObj) => AnyEraPartialParams): LegacyPPUpdateMap;
export declare function LegacyPPUpdateProposalToCborObj(protocolUpdate: LegacyPPUpdateProposal, LegacyPPUpdateMapToCborObj: (params: LegacyPPUpdateMap) => CborObj): CborObj;
export declare function LegacyPPUpdateProposalFromCborObj(cObj: CborObj, LegacyPPUpdateMapFromCborObj: (cObj: CborObj) => LegacyPPUpdateMap): LegacyPPUpdateProposal;
