import { ConwayHeader } from '../conway/header/ConwayHeader.js';
import { BabbageHeader } from '../babbage/header/BabbageHeader.js';
import { AlonzoHeader } from '../alonzo/header/AlonzoHeader.js';
import { MaryHeader } from '../mary/header/MaryHeader.js';
import { AllegraHeader } from '../allegra/header/AllegraHeader.js';
import { ShelleyHeader } from '../shelley/header/ShelleyHeader.js';
import { CborArray, ToCbor, SubCborRef, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { ToJson } from "../../utils/ToJson.js";
import { CardanoEra } from "./types/CardanoEra.js";
export interface IMultiEraHeader {
    era: CardanoEra;
    header: ConwayHeader | BabbageHeader | AlonzoHeader | MaryHeader | AllegraHeader | ShelleyHeader;
}
export declare class MultiEraHeader implements IMultiEraHeader, ToCbor, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly era: CardanoEra;
    readonly header: ConwayHeader | BabbageHeader | AlonzoHeader | MaryHeader | AllegraHeader | ShelleyHeader;
    constructor(header: IMultiEraHeader, cborRef?: SubCborRef | undefined);
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): MultiEraHeader;
    static fromCborObj(cObj: CborObj, _originalBytes?: Uint8Array): MultiEraHeader;
    toJSON(): {
        era: number;
        header: ConwayHeader | BabbageHeader | AlonzoHeader | MaryHeader | AllegraHeader | ShelleyHeader;
    };
    toJson(): {
        era: number;
        header: ConwayHeader | BabbageHeader | AlonzoHeader | MaryHeader | AllegraHeader | ShelleyHeader;
    };
}
