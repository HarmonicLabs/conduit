"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VKeyWitness = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var hashes_1 = require("../../hashes/index.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var VKey_1 = require("./VKey.js");
var VKeyWitness = /** @class */ (function () {
    function VKeyWitness(vkeys, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var vkey = vkeys.vkey, signature = vkeys.signature;
        if (!(vkey instanceof hashes_1.Hash32))
            throw new Error("can't construct 'VKeyWitness' without a 'VKey' as first argument");
        this.vkey = new VKey_1.VKey(vkey);
        if (!(signature instanceof hashes_1.Signature))
            throw new Error("can't construct 'VKeyWitness' without a 'Signature' as second argument");
        this.signature = signature;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(vkeys);
    }
    VKeyWitness.prototype.clone = function () {
        var _a;
        return new VKeyWitness({
            vkey: new VKey_1.VKey(this.vkey),
            signature: new hashes_1.Signature(this.signature)
        }, (_a = this.cborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    VKeyWitness.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    VKeyWitness.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    VKeyWitness.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            this.vkey.toCborObj(),
            this.signature.toCborObj()
        ]);
    };
    VKeyWitness.fromCbor = function (cStr) {
        return VKeyWitness.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    VKeyWitness.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("VKeyWitness");
        return new VKeyWitness({
            vkey: hashes_1.Hash32.fromCborObj(cObj.array[0]),
            signature: hashes_1.Signature.fromCborObj(cObj.array[1]),
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    VKeyWitness.prototype.toJSON = function () { return this.toJson(); };
    VKeyWitness.prototype.toJson = function () {
        return {
            vkey: this.vkey.asString,
            signature: this.signature.asString
        };
    };
    return VKeyWitness;
}());
exports.VKeyWitness = VKeyWitness;
