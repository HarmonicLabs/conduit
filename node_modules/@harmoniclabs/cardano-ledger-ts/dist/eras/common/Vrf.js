"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VrfCert = exports.isIVrfCert = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var U8Arr_1 = require("../../utils/U8Arr.js");
var cbor_1 = require("@harmoniclabs/cbor");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
function isIVrfCert(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && ((stuff instanceof VrfCert) // already validated at construction, shortcut
        || ((0, U8Arr_1.isU8Arr)(stuff.proofHash, 64) &&
            (0, U8Arr_1.isU8Arr)(stuff.proof, 80)));
}
exports.isIVrfCert = isIVrfCert;
/** $vrf_cert = [bytes, bytes .size 80] **/
var VrfCert = /** @class */ (function () {
    function VrfCert(cert, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!isIVrfCert(cert))
            throw new Error("Invalid VrfCert");
        this.proofHash = cert.proofHash;
        this.proof = cert.proof;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(cert);
    }
    VrfCert.prototype.clone = function () {
        var _a;
        return new VrfCert({
            proofHash: this.proofHash,
            proof: this.proof
        }, (_a = this.cborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    VrfCert.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    VrfCert.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    VrfCert.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborBytes(this.proofHash),
            new cbor_1.CborBytes(this.proof)
        ]);
    };
    VrfCert.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return VrfCert.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    VrfCert.fromCborObj = function (cbor, _originalBytes) {
        if (_originalBytes === void 0) { _originalBytes = undefined; }
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborBytes &&
            cbor.array[1] instanceof cbor_1.CborBytes &&
            cbor.array[1].bytes.length === 80))
            throw new Error("invalid cbor for 'VrfCert'");
        return new VrfCert({
            proofHash: cbor.array[0].bytes,
            proof: cbor.array[1].bytes
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, _originalBytes));
    };
    return VrfCert;
}());
exports.VrfCert = VrfCert;
