import { ToCbor, SubCborRef, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Hash, Hash32, Signature } from "../../hashes/index.js";
import { VKey } from "../../tx/index.js";
import { ToJson } from "../../utils/ToJson.js";
export interface IBootstrapWitness {
    pubKey: Hash | Hash32;
    signature: Signature;
    chainCode: Hash | Hash32;
    attributes: Uint8Array;
}
export declare class BootstrapWitness implements ToCbor, Cloneable<BootstrapWitness>, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly pubKey: VKey;
    readonly signature: Signature;
    readonly chainCode: Hash | Hash32;
    readonly attributes: Uint8Array;
    constructor(witness: IBootstrapWitness, cborRef?: SubCborRef | undefined);
    clone(): BootstrapWitness;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): BootstrapWitness;
    static fromCborObj(cObj: CborObj): BootstrapWitness;
    toJSON(): {
        pubKey: string;
        signature: string;
        chainCode: string;
        attributes: string;
    };
    toJson(): {
        pubKey: string;
        signature: string;
        chainCode: string;
        attributes: string;
    };
}
