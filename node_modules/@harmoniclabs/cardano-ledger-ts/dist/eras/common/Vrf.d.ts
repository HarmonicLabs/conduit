import { U8Arr } from "../../utils/U8Arr.js";
import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor } from "@harmoniclabs/cbor";
/** just an alias to accepts all bytes, but still give indications **/
export type VrfProofHashBytes = Uint8Array;
export type VrfProofHash = U8Arr<64>;
export type VrfProofBytes = U8Arr<80>;
export interface IVrfCert {
    proofHash: VrfProofHashBytes;
    proof: VrfProofBytes;
}
export interface IVrfCertChecked extends IVrfCert {
    proofHash: VrfProofHash;
    proof: VrfProofBytes;
}
export declare function isIVrfCert(stuff: any): stuff is IVrfCertChecked;
/** $vrf_cert = [bytes, bytes .size 80] **/
export declare class VrfCert implements IVrfCertChecked, ToCbor {
    readonly cborRef: SubCborRef | undefined;
    readonly proofHash: VrfProofHash;
    readonly proof: VrfProofBytes;
    constructor(cert: IVrfCert, cborRef?: SubCborRef | undefined);
    clone(): VrfCert;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): VrfCert;
    static fromCborObj(cbor: CborObj, _originalBytes?: Uint8Array | undefined): VrfCert;
}
