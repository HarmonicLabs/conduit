"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolVersion = exports.isIProtocolVersion = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var ints_1 = require("../../utils/ints.js");
function isIProtocolVersion(thing) {
    return (0, obj_utils_1.isObject)(thing) && (thing instanceof ProtocolVersion // already validated at construction, shortcut
        || ((0, ints_1.canBeUInteger)(thing.major) &&
            (0, ints_1.canBeUInteger)(thing.minor)));
}
exports.isIProtocolVersion = isIProtocolVersion;
var ProtocolVersion = /** @class */ (function () {
    function ProtocolVersion(v, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!isIProtocolVersion(v))
            throw new Error("Invalid ProtocolVersion");
        this.major = (0, ints_1.u32)(v.major);
        this.minor = (0, ints_1.u32)(v.minor);
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(v);
    }
    ProtocolVersion.prototype.clone = function () {
        var _a;
        return new ProtocolVersion({
            major: this.major,
            minor: this.minor
        }, (_a = this.cborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    ProtocolVersion.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    ProtocolVersion.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    ProtocolVersion.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.major),
            new cbor_1.CborUInt(this.minor)
        ]);
    };
    ProtocolVersion.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return ProtocolVersion.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    ProtocolVersion.fromCborObj = function (cbor, _originalBytes) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            cbor.array[1] instanceof cbor_1.CborUInt))
            throw new Error("Invalid ProtocolVersion");
        return new ProtocolVersion({
            major: cbor.array[0].num,
            minor: cbor.array[1].num
        }, (0, getSubCborRef_1.getSubCborRef)(cbor, _originalBytes));
    };
    return ProtocolVersion;
}());
exports.ProtocolVersion = ProtocolVersion;
