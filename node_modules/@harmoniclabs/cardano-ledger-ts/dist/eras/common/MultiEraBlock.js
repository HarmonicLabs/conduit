"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiEraBlock = void 0;
var ConwayBlock_1 = require("../conway/block/ConwayBlock.js");
var BabbageBlock_1 = require("../babbage/block/BabbageBlock.js");
var AlonzoBlock_1 = require("../alonzo/block/AlonzoBlock.js");
var MaryBlock_1 = require("../mary/block/MaryBlock.js");
var AllegraBlock_1 = require("../allegra/block/AllegraBlock.js");
var ShelleyBlock_1 = require("../shelley/block/ShelleyBlock.js");
var cbor_1 = require("@harmoniclabs/cbor");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var MultiEraBlock = /** @class */ (function () {
    function MultiEraBlock(block, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        this.era = block.era;
        this.block = block.block;
    }
    MultiEraBlock.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    MultiEraBlock.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    MultiEraBlock.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(BigInt(this.era)),
            this.block.toCborObj()
        ]);
    };
    MultiEraBlock.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return MultiEraBlock.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    MultiEraBlock.fromCborObj = function (cObj, _originalBytes) {
        if (!(cObj instanceof cbor_1.CborArray
            && cObj.array.length >= 2))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("Invalid CBOR for MultiEraBlock");
        var _era = cObj.array[0];
        var _blockData = cObj.array[1];
        if (!(_era instanceof cbor_1.CborUInt))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("Era must be a CborUInt");
        var block;
        switch (Number(_era.num)) {
            case 7: // Conway era
                block = ConwayBlock_1.ConwayBlock.fromCborObj(_blockData);
                break;
            case 6: // Babbage era
                block = BabbageBlock_1.BabbageBlock.fromCborObj(_blockData);
                break;
            case 5: // Alonzo era
                block = AlonzoBlock_1.AlonzoBlock.fromCborObj(_blockData);
                break;
            case 4: // Mary era
                block = MaryBlock_1.MaryBlock.fromCborObj(_blockData);
                break;
            case 3: // Allegra era
                block = AllegraBlock_1.AllegraBlock.fromCborObj(_blockData);
                break;
            case 2: // Shelley era
                block = ShelleyBlock_1.ShelleyBlock.fromCborObj(_blockData);
                break;
            default:
                throw new Error("Unsupported era: ".concat(_era.num));
        }
        var multiEraBlock = new MultiEraBlock({
            era: Number(_era.num),
            block: block
        }, (0, getSubCborRef_1.getSubCborRef)(cObj, _originalBytes));
        // console.log("multiEraBlock", multiEraBlock.toJSON());
        return multiEraBlock;
    };
    MultiEraBlock.prototype.toJSON = function () {
        return this.toJson();
    };
    ;
    MultiEraBlock.prototype.toJson = function () {
        return {
            era: this.era,
            block: this.block.toJson()
        };
    };
    return MultiEraBlock;
}());
exports.MultiEraBlock = MultiEraBlock;
