"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllegraTxOut = exports.isIAllegraTxOut = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ledger_1 = require("../../../ledger/index.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var BasePlutsError_1 = require("../../../utils/BasePlutsError.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
function isIAllegraTxOut(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, obj_utils_1.hasOwn)(stuff, "address") && (stuff.address instanceof ledger_1.Address || (0, ledger_1.isAddressStr)(stuff.address)) &&
        (0, obj_utils_1.hasOwn)(stuff, "value") && (stuff.value instanceof ledger_1.Value || (0, ledger_1.isIValue)(stuff.value)));
}
exports.isIAllegraTxOut = isIAllegraTxOut;
var AllegraTxOut = /** @class */ (function () {
    function AllegraTxOut(AllegraTxOutput, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!((0, obj_utils_1.isObject)(AllegraTxOutput) &&
            (0, obj_utils_1.hasOwn)(AllegraTxOutput, "address") &&
            (0, obj_utils_1.hasOwn)(AllegraTxOutput, "value")))
            throw new Error("AllegraTxOutput is missing some necessary fields");
        var address = AllegraTxOutput.address, value = AllegraTxOutput.value;
        if ((0, ledger_1.isAddressStr)(address)) {
            address = ledger_1.Address.fromString(address);
        }
        if (!(address instanceof ledger_1.Address))
            throw new Error("invlaid 'address' while constructing 'AllegraTxOut'");
        if (!(value instanceof ledger_1.Value))
            throw new Error("invlaid 'value' while constructing 'AllegraTxOut'");
        this.address = address;
        this.value = value;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(AllegraTxOutput);
    }
    AllegraTxOut.prototype.clone = function () {
        return new AllegraTxOut({
            address: this.address.clone(),
            value: this.value.clone()
        });
    };
    Object.defineProperty(AllegraTxOut, "fake", {
        get: function () {
            return new AllegraTxOut({
                address: ledger_1.Address.fake,
                value: ledger_1.Value.lovelaces(0)
            });
        },
        enumerable: false,
        configurable: true
    });
    AllegraTxOut.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    AllegraTxOut.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    AllegraTxOut.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        if (!ledger_1.Value.isPositive(this.value)) {
            console.error(JSON.stringify(this.toJson(), undefined, 2));
            throw new BasePlutsError_1.BasePlutsError("AllegraTxOut values can only be positive; value was: " + JSON.stringify(this.value.toJson()));
        }
        return new cbor_1.CborMap([
            {
                k: new cbor_1.CborUInt(0),
                v: this.address.toCborObj()
            },
            {
                k: new cbor_1.CborUInt(1),
                v: this.value.toCborObj()
            }
        ].filter(function (elem) { return elem !== undefined; }));
    };
    AllegraTxOut.fromCbor = function (cStr) {
        return AllegraTxOut.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    AllegraTxOut.fromCborObj = function (cObj) {
        var _a;
        if (!(
        // cObj instanceof CborMap ||
        // cObj instanceof CborArray
        cObj instanceof cbor_1.CborMap && cObj.map.length >= 2 ||
            cObj instanceof cbor_1.CborArray && cObj.array.length >= 2))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("AllegraTxOut");
        // legacy
        if (cObj instanceof cbor_1.CborArray) {
            var _b = __read(cObj.array, 2), _addr_1 = _b[0], _val = _b[1];
            return new AllegraTxOut({
                address: ledger_1.Address.fromCborObj(_addr_1),
                value: ledger_1.Value.fromCborObj(_val),
            });
        }
        var fields = new Array(2).fill(undefined);
        var _loop_1 = function (i) {
            var v = ((_a = cObj.map.find(function (_a) {
                var k = _a.k;
                if (!(k instanceof cbor_1.CborUInt))
                    throw new InvalidCborFormatError_1.InvalidCborFormatError("TxBody");
                return Number(k.num) === i;
            })) !== null && _a !== void 0 ? _a : { v: undefined }).v;
            if (v === undefined)
                return "continue";
            fields[i] = v;
        };
        for (var i = 0; i < 2; i++) {
            _loop_1(i);
        }
        var _c = __read(fields, 2), _addr = _c[0], _amt = _c[1];
        if (_addr === undefined || _amt === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("AllegraTxOut");
        return new AllegraTxOut({
            address: ledger_1.Address.fromCborObj(_addr),
            value: ledger_1.Value.fromCborObj(_amt)
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    AllegraTxOut.prototype.toJSON = function () { return this.toJson(); };
    AllegraTxOut.prototype.toJson = function () {
        return {
            address: this.address.toString(),
            value: this.value.toJson()
        };
    };
    return AllegraTxOut;
}());
exports.AllegraTxOut = AllegraTxOut;
