import { ToCbor, CborString, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToJson } from "../../../utils/ToJson.js";
import { IAllegraTxOut, AllegraTxOut } from "./AllegraTxOut.js";
import { ITxOutRef, TxOutRef } from "../../common/TxOutRef.js";
export interface IAllegraUTxO {
    utxoRef: ITxOutRef;
    resolved: IAllegraTxOut;
}
export declare function isIAllegraUTxO(stuff: any): stuff is IAllegraUTxO;
export declare class AllegraUTxO implements IAllegraUTxO, ToJson, ToCbor, Cloneable<AllegraUTxO> {
    readonly cborRef: SubCborRef | undefined;
    readonly utxoRef: TxOutRef;
    readonly resolved: AllegraTxOut;
    constructor({ utxoRef, resolved }: IAllegraUTxO, cborRef?: SubCborRef | undefined);
    clone(): AllegraUTxO;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): AllegraUTxO;
    static fromCborObj(cObj: CborObj): AllegraUTxO;
    toJSON(): {
        utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
        };
    };
    toJson(): {
        utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
        };
    };
    static sort(a: IAllegraUTxO, b: IAllegraUTxO): number;
}
export { TxOutRef };
