import { ToCbor, CborString, CborMap, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Address, AddressStr, Value, IValue } from "../../../ledger/index.js";
import { ToJson } from "../../../utils/ToJson.js";
export interface IAllegraTxOut {
    address: Address | AddressStr;
    value: Value | IValue;
}
export declare function isIAllegraTxOut(stuff: any): stuff is IAllegraTxOut;
export declare class AllegraTxOut implements IAllegraTxOut, ToCbor, Cloneable<AllegraTxOut>, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly address: Address;
    readonly value: Value;
    constructor(AllegraTxOutput: IAllegraTxOut, cborRef?: SubCborRef | undefined);
    clone(): AllegraTxOut;
    static get fake(): AllegraTxOut;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cStr: CanBeCborString): AllegraTxOut;
    static fromCborObj(cObj: CborObj): AllegraTxOut;
    toJSON(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
    };
    toJson(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
    };
}
