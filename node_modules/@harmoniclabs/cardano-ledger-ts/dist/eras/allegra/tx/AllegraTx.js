"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllegraTx = void 0;
var bip32_ed25519_1 = require("@harmoniclabs/bip32_ed25519");
var cbor_1 = require("@harmoniclabs/cbor");
var crypto_1 = require("@harmoniclabs/crypto");
var credentials_1 = require("../../../credentials/index.js");
var hashes_1 = require("../../../hashes/index.js");
var _1 = require("./index.js");
var common_1 = require("../../common/index.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var AllegraTx = /** @class */ (function () {
    function AllegraTx(tx, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        var body = tx.body, witnesses = tx.witnesses, auxiliaryData = tx.auxiliaryData;
        if (!(body instanceof _1.AllegraTxBody ||
            (0, _1.isIAllegraTxBody)(body)))
            throw new Error("invalid transaction body; must be instance of 'AllegraTxBody'");
        if (!(witnesses instanceof _1.AllegraTxWitnessSet ||
            (0, _1.isIAllegraTxWitnessSet)(witnesses)))
            throw new Error("invalid wintesses; must be instance of 'AllegraTxWitnessSet'");
        if (!(auxiliaryData === undefined ||
            auxiliaryData === null ||
            auxiliaryData instanceof _1.AllegraAuxiliaryData))
            throw new Error("invalid transaction auxiliray data; must be instance of 'AllegraAuxiliaryData'");
        this.body = new _1.AllegraTxBody(body);
        this.witnesses = new _1.AllegraTxWitnessSet(witnesses, (0, getSubCborRef_1.subCborRefOrUndef)(witnesses), getAllRequiredSigners(this.body));
        this.auxiliaryData = auxiliaryData;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(tx);
    }
    AllegraTx.prototype.clone = function () {
        return new AllegraTx(this);
    };
    /**
     * checks that the signer is needed
     * if true adds the witness
     * otherwise nothing happens (the signature is not added)
     *
     * one might prefer to use this method instead of `signWith`
     * when signature is provided by a third party (example CIP30 wallet)
    **/
    AllegraTx.prototype.addVKeyWitness = function (vkeyWit) {
        this.witnesses.addVKeyWitness(vkeyWit);
    };
    /**
     * checks that the signer is needed
     * if true signs the transaction with the specified key
     * otherwise nothing happens (the signature is not added)
    **/
    AllegraTx.prototype.signWith = function (signer) {
        if (signer instanceof Uint8Array && signer.length >= 64) {
            signer = bip32_ed25519_1.XPrv.fromExtended(signer.slice(0, 64), new Uint8Array(32));
        }
        if (signer instanceof bip32_ed25519_1.XPrv) {
            var _a = signer.sign(this.body.hash.toBuffer()), pubKey_1 = _a.pubKey, signature_1 = _a.signature;
            this.addVKeyWitness(new common_1.VKeyWitness({
                vkey: new common_1.VKey(pubKey_1),
                signature: new hashes_1.Signature(signature_1)
            }));
            return;
        }
        var _b = (0, crypto_1.signEd25519_sync)(this.body.hash.toBuffer(), signer instanceof Uint8Array ? signer : signer.toBuffer()), pubKey = _b.pubKey, signature = _b.signature;
        this.addVKeyWitness(new common_1.VKeyWitness({
            vkey: new common_1.VKey(pubKey),
            signature: new hashes_1.Signature(signature)
        }));
    };
    /**
     * signs the transaction using any browser wallet
     * that follows the [CIP-0030 standard]
     * (https://github.com/cardano-foundation/CIPs/tree/master/CIP-0030#apisigntxtx-cbortransaction-partialsign-bool--false-promisecbortransaction_witness_set)
    **/
    AllegraTx.prototype.signWithCip30Wallet = function (cip30) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var wits, _b, _c, vkeys, vkeys_1, vkeys_1_1, wit;
            var e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _c = (_b = _1.AllegraTxWitnessSet).fromCbor;
                        return [4 /*yield*/, cip30.signTx(
                            // signAllegraTx expects the entire transaction by standard (not only the body ¯\_(ツ)_/¯)
                            this.toCbor().toString(), true)];
                    case 1:
                        wits = _c.apply(_b, [_e.sent()]);
                        vkeys = (_a = wits.vkeyWitnesses) !== null && _a !== void 0 ? _a : [];
                        try {
                            for (vkeys_1 = __values(vkeys), vkeys_1_1 = vkeys_1.next(); !vkeys_1_1.done; vkeys_1_1 = vkeys_1.next()) {
                                wit = vkeys_1_1.value;
                                this.addVKeyWitness(wit);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (vkeys_1_1 && !vkeys_1_1.done && (_d = vkeys_1.return)) _d.call(vkeys_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(AllegraTx.prototype, "isComplete", {
        /**
         * @returns {boolean}
         *  `true` if all the signers needed
         *  have signed the transaction; `false` otherwise
         *
         * signers needed are:
         *  - required to spend an utxo
         *  - required by certificate
         *  - required by withdrawals
         *  - additional spefified in the `requiredSigners` field
         */
        get: function () {
            return this.witnesses.isComplete;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AllegraTx.prototype, "hash", {
        get: function () {
            return this.body.hash;
        },
        enumerable: false,
        configurable: true
    });
    AllegraTx.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    AllegraTx.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    AllegraTx.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        return new cbor_1.CborArray([
            this.body.toCborObj(),
            this.witnesses.toCborObj(),
            this.auxiliaryData === undefined || this.auxiliaryData === null ?
                new cbor_1.CborSimple(null) :
                this.auxiliaryData.toCborObj()
        ]);
    };
    AllegraTx.fromCbor = function (cStr) {
        return AllegraTx.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    AllegraTx.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray
            && cObj.array.length >= 3))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("AllegraTx");
        var _a = __read(cObj.array, 3), _body = _a[0], _wits = _a[1], _aux = _a[2];
        var noAllegraAuxiliaryData = _aux instanceof cbor_1.CborSimple && (_aux.simple === null || _aux.simple === undefined);
        return new AllegraTx({
            body: _1.AllegraTxBody.fromCborObj(_body),
            witnesses: _1.AllegraTxWitnessSet.fromCborObj(_wits),
            auxiliaryData: noAllegraAuxiliaryData ? undefined : _1.AllegraAuxiliaryData.fromCborObj(_aux)
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    AllegraTx.prototype.toJSON = function () {
        return this.toJson();
    };
    AllegraTx.prototype.toJson = function () {
        var _a;
        return {
            body: this.body.toJson(),
            witnesses: this.witnesses.toJson(),
            auxiliaryData: (_a = this.auxiliaryData) === null || _a === void 0 ? void 0 : _a.toJson()
        };
    };
    return AllegraTx;
}());
exports.AllegraTx = AllegraTx;
/**
 * signers needed are:
 *  - required to spend an utxo
 *  - required by certificate
 *  - required by withdrawals
 *  - additional specified in the `requiredSigners` field
 */
function getAllRequiredSigners(body) {
    var _a, _b, _c, _d;
    return (
    // required for spending pubKey utxo
    body.inputs.reduce(function (acc, _in) {
        var _a = _in.resolved.address.paymentCreds, type = _a.type, hash = _a.hash;
        if (type === credentials_1.CredentialType.KeyHash)
            acc.push(new credentials_1.PubKeyHash(hash));
        return acc;
    }, [])
        // required to sign certificate
        .concat((_b = (_a = body.certs) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, cert) { return acc.concat(cert.getRequiredSigners()); }, [])) !== null && _b !== void 0 ? _b : [])
        // requred for withdrawal
        .concat((_d = (_c = body.withdrawals) === null || _c === void 0 ? void 0 : _c.map.map(function (_a) {
        var rewardAccount = _a.rewardAccount;
        return rewardAccount.credentials.clone();
    })) !== null && _d !== void 0 ? _d : [])
    // remove duplicates
    ).filter(function (elem, i, thisArr) { return thisArr.indexOf(elem) === i; });
}
function getNSignersNeeded(body) {
    var n = getAllRequiredSigners(body).length;
    return n === 0 ? 1 : n;
}
