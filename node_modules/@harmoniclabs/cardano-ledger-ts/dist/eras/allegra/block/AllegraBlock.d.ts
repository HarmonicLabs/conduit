import { CborArray, ToCbor, SubCborRef, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { IAllegraHeader, AllegraHeader } from "../header/AllegraHeader.js";
import { IAllegraTxBody, AllegraTxBody } from "../tx/AllegraTxBody.js";
import { IAllegraTxWitnessSet, AllegraTxWitnessSet } from "../tx/AllegraTxWitnessSet.js";
import { IAllegraAuxiliaryData, AllegraAuxiliaryData } from "../tx/AllegraAuxiliaryData.js";
import { ToJson } from "../../../utils/ToJson.js";
export interface IAllegraBlock {
    header: IAllegraHeader;
    transactionBodies: IAllegraTxBody[];
    transactionWitnessSets: IAllegraTxWitnessSet[];
    auxiliaryDataSet: {
        [transactionIndex: number]: IAllegraAuxiliaryData;
    };
}
export declare class AllegraBlock implements IAllegraBlock, ToCbor, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly header: AllegraHeader;
    readonly transactionBodies: AllegraTxBody[];
    readonly transactionWitnessSets: AllegraTxWitnessSet[];
    readonly auxiliaryDataSet: {
        [transactionIndex: number]: AllegraAuxiliaryData;
    };
    constructor(block: IAllegraBlock, cborRef?: SubCborRef | undefined);
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): AllegraBlock;
    static fromCborObj(cObj: CborObj, _originalBytes?: Uint8Array): AllegraBlock;
    toJSON(): {
        header: AllegraHeader;
        transactionBodies: {
            inputs: {
                utxoRef: import("../../index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../../ledger/index.js").ValueJson;
                };
            }[];
            outputs: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
            }[];
            fee: string;
            ttl: string | undefined;
            certs: ({
                certType: "PoolRegistration";
                poolParams: {
                    operator: string;
                    vrfKeyHash: string;
                    pledge: string;
                    cost: string;
                    margin: number;
                    rewardAccount: import("../../common/ledger/index.js").StakeAddress<import("../../common/ledger/index.js").StakeAddressType>;
                    owners: string[];
                    relays: ({
                        type: string;
                        port: number | undefined;
                        ipv4: string | undefined;
                        ipv6: string | undefined;
                        dnsName?: undefined;
                    } | {
                        type: string;
                        port: number | undefined;
                        dnsName: string;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    } | {
                        type: string;
                        dnsName: string;
                        port?: undefined;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    })[];
                    metadata: {
                        poolMetadataUrl: string;
                        hash: string;
                    } | undefined;
                };
            } | {
                certType: "PoolRetirement";
                poolHash: string;
                epoch: string;
            } | {
                certType: "StakeDeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "StakeDelegation";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
            } | {
                certType: "StakeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "AuthCommitteeHot";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                hotCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "GenesisKeyDelegation";
                genesisHash: string;
                genesisDelegateHash: string;
                vrfKeyHash: string;
            } | {
                certType: "RegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "RegistrationDrep";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                coin: string;
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "ResignCommitteeCold";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "StakeVoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
            } | {
                certType: "StakeVoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "UnRegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "UnRegistrationDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                };
                coin: string;
            } | {
                certType: "UpdateDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "VoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
            } | {
                certType: "VoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "MoveInstantRewards";
                source: "Reserves" | "Treasurery";
                destination: string | {
                    stakeCreds: {
                        credentialType: string;
                        hash: string;
                    };
                    amount: string;
                }[];
            } | {
                certType: "StakeRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                coin: string;
            })[] | undefined;
            withdrawals: {
                [rewardAccount: string]: string;
            } | undefined;
            protocolUpdate: object | undefined;
            auxDataHash: string | undefined;
            validityIntervalStart: string | undefined;
        }[];
        transactionWitnessSets: {
            vkeyWitnesses: {
                vkey: string;
                signature: string;
            }[] | undefined;
            nativeScripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            bootstrapWitnesses: {
                pubKey: string;
                signature: string;
                chainCode: string;
                attributes: string;
            }[] | undefined;
        }[];
        auxiliaryDataSet: [string, AllegraAuxiliaryData];
    };
    toJson(): {
        header: AllegraHeader;
        transactionBodies: {
            inputs: {
                utxoRef: import("../../index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../../ledger/index.js").ValueJson;
                };
            }[];
            outputs: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
            }[];
            fee: string;
            ttl: string | undefined;
            certs: ({
                certType: "PoolRegistration";
                poolParams: {
                    operator: string;
                    vrfKeyHash: string;
                    pledge: string;
                    cost: string;
                    margin: number;
                    rewardAccount: import("../../common/ledger/index.js").StakeAddress<import("../../common/ledger/index.js").StakeAddressType>;
                    owners: string[];
                    relays: ({
                        type: string;
                        port: number | undefined;
                        ipv4: string | undefined;
                        ipv6: string | undefined;
                        dnsName?: undefined;
                    } | {
                        type: string;
                        port: number | undefined;
                        dnsName: string;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    } | {
                        type: string;
                        dnsName: string;
                        port?: undefined;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    })[];
                    metadata: {
                        poolMetadataUrl: string;
                        hash: string;
                    } | undefined;
                };
            } | {
                certType: "PoolRetirement";
                poolHash: string;
                epoch: string;
            } | {
                certType: "StakeDeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "StakeDelegation";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
            } | {
                certType: "StakeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "AuthCommitteeHot";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                hotCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "GenesisKeyDelegation";
                genesisHash: string;
                genesisDelegateHash: string;
                vrfKeyHash: string;
            } | {
                certType: "RegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "RegistrationDrep";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                coin: string;
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "ResignCommitteeCold";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "StakeVoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
            } | {
                certType: "StakeVoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "UnRegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "UnRegistrationDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                };
                coin: string;
            } | {
                certType: "UpdateDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "VoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
            } | {
                certType: "VoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "MoveInstantRewards";
                source: "Reserves" | "Treasurery";
                destination: string | {
                    stakeCreds: {
                        credentialType: string;
                        hash: string;
                    };
                    amount: string;
                }[];
            } | {
                certType: "StakeRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                coin: string;
            })[] | undefined;
            withdrawals: {
                [rewardAccount: string]: string;
            } | undefined;
            protocolUpdate: object | undefined;
            auxDataHash: string | undefined;
            validityIntervalStart: string | undefined;
        }[];
        transactionWitnessSets: {
            vkeyWitnesses: {
                vkey: string;
                signature: string;
            }[] | undefined;
            nativeScripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            bootstrapWitnesses: {
                pubKey: string;
                signature: string;
                chainCode: string;
                attributes: string;
            }[] | undefined;
        }[];
        auxiliaryDataSet: [string, AllegraAuxiliaryData];
    };
}
