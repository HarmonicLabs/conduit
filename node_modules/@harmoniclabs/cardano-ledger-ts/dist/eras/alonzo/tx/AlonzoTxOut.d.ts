import { ToCbor, CborString, CborMap, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Data, ToData } from "@harmoniclabs/plutus-data";
import { Hash32 } from "../../../hashes/index.js";
import { Address, AddressStr, Value, IValue } from "../../../ledger/index.js";
import { ToJson } from "../../../utils/ToJson.js";
import { ToDataVersion } from "../../../toData/defaultToDataVersion.js";
export interface IAlonzoTxOut {
    address: Address | AddressStr;
    value: Value | IValue;
    datum?: Hash32 | Data;
}
export declare function isIAlonzoTxOut(stuff: any): stuff is IAlonzoTxOut;
export declare class AlonzoTxOut implements IAlonzoTxOut, ToCbor, Cloneable<AlonzoTxOut>, ToData, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly address: Address;
    readonly value: Value;
    readonly datum?: Hash32 | Data;
    constructor(AlonzoTxOutput: IAlonzoTxOut, cborRef?: SubCborRef | undefined);
    clone(): AlonzoTxOut;
    static get fake(): AlonzoTxOut;
    toData(version?: ToDataVersion): Data;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cStr: CanBeCborString): AlonzoTxOut;
    static fromCborObj(cObj: CborObj): AlonzoTxOut;
    toJSON(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
        datum: any;
    };
    toJson(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
        datum: any;
    };
}
