import { XPrv } from "@harmoniclabs/bip32_ed25519";
import { ToCbor, SubCborRef, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { PrivateKey } from "../../../credentials/index.js";
import { Hash32 } from "../../../hashes/index.js";
import { IAlonzoTxBody, IAlonzoTxWitnessSet, AlonzoAuxiliaryData, AlonzoTxBody, AlonzoTxWitnessSet } from "./index.js";
import { VKeyWitness } from "../../common/index.js";
import { ToJson } from "../../../utils/ToJson.js";
export interface IAlonzoTx {
    body: IAlonzoTxBody;
    witnesses: IAlonzoTxWitnessSet;
    isScriptValid?: boolean;
    auxiliaryData?: AlonzoAuxiliaryData | null;
}
export interface Cip30LikeSignAlonzoTx {
    /**
     *
     * @param {string} txCbor receives the current transaction (`this`) cbor
     * @param {boolean} partial (standard parameter) wheather to throw or not if the wallet can not sign the entire transaction (`true` always passed)
     * @returns {string} the cbor of the `AlonzoTxWitnessSet` (!!! NOT the cbor of the signe transaction !!!)
     */
    signTx: (txCbor: string, partial?: boolean) => (string | Promise<string>);
}
export declare class AlonzoTx implements IAlonzoTx, ToCbor, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly body: AlonzoTxBody;
    readonly witnesses: AlonzoTxWitnessSet;
    readonly isScriptValid: boolean;
    readonly auxiliaryData?: AlonzoAuxiliaryData | null | undefined;
    clone(): AlonzoTx;
    constructor(tx: IAlonzoTx, cborRef?: SubCborRef | undefined);
    /**
     * checks that the signer is needed
     * if true adds the witness
     * otherwise nothing happens (the signature is not added)
     *
     * one might prefer to use this method instead of `signWith`
     * when signature is provided by a third party (example CIP30 wallet)
    **/
    addVKeyWitness(this: AlonzoTx, vkeyWit: VKeyWitness): void;
    /**
     * checks that the signer is needed
     * if true signs the transaction with the specified key
     * otherwise nothing happens (the signature is not added)
    **/
    signWith(signer: PrivateKey | Uint8Array | XPrv): void;
    /**
     * signs the transaction using any browser wallet
     * that follows the [CIP-0030 standard]
     * (https://github.com/cardano-foundation/CIPs/tree/master/CIP-0030#apisigntxtx-cbortransaction-partialsign-bool--false-promisecbortransaction_witness_set)
    **/
    signWithCip30Wallet(cip30: Cip30LikeSignAlonzoTx): Promise<void>;
    /**
     * @returns {boolean}
     *  `true` if all the signers needed
     *  have signed the transaction; `false` otherwise
     *
     * signers needed are:
     *  - required to spend an utxo
     *  - required by certificate
     *  - required by withdrawals
     *  - additional spefified in the `requiredSigners` field
     */
    get isComplete(): boolean;
    get hash(): Hash32;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): AlonzoTx;
    static fromCborObj(cObj: CborObj): AlonzoTx;
    toJSON(): {
        body: {
            inputs: {
                utxoRef: import("../../common/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../../ledger/index.js").ValueJson;
                    datum: any;
                };
            }[];
            outputs: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
                datum: any;
            }[];
            fee: string;
            ttl: string | undefined;
            certs: ({
                certType: "PoolRegistration";
                poolParams: {
                    operator: string;
                    vrfKeyHash: string;
                    pledge: string;
                    cost: string;
                    margin: number;
                    rewardAccount: import("../../common/ledger/index.js").StakeAddress<import("../../common/ledger/index.js").StakeAddressType>;
                    owners: string[];
                    relays: ({
                        type: string;
                        port: number | undefined;
                        ipv4: string | undefined;
                        ipv6: string | undefined;
                        dnsName?: undefined;
                    } | {
                        type: string;
                        port: number | undefined;
                        dnsName: string;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    } | {
                        type: string;
                        dnsName: string;
                        port?: undefined;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    })[];
                    metadata: {
                        poolMetadataUrl: string;
                        hash: string;
                    } | undefined;
                };
            } | {
                certType: "PoolRetirement";
                poolHash: string;
                epoch: string;
            } | {
                certType: "StakeDeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "StakeDelegation";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
            } | {
                certType: "StakeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "AuthCommitteeHot";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                hotCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "GenesisKeyDelegation";
                /**
                 * checks that the signer is needed
                 * if true signs the transaction with the specified key
                 * otherwise nothing happens (the signature is not added)
                **/
                genesisHash: string;
                genesisDelegateHash: string;
                vrfKeyHash: string;
            } | {
                certType: "RegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "RegistrationDrep";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                coin: string;
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "ResignCommitteeCold";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "StakeVoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
            } | {
                certType: "StakeVoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "UnRegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "UnRegistrationDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                }; /**
                 * checks that the signer is needed
                 * if true signs the transaction with the specified key
                 * otherwise nothing happens (the signature is not added)
                **/
                coin: string;
            } | {
                certType: "UpdateDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "VoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
            } | {
                certType: "VoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "MoveInstantRewards";
                source: "Reserves" | "Treasurery";
                destination: string | {
                    stakeCreds: {
                        credentialType: string;
                        hash: string;
                    };
                    amount: string;
                }[];
            } | {
                certType: "StakeRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                coin: string;
            })[] | undefined;
            withdrawals: {
                [rewardAccount: string]: string;
            } | undefined;
            protocolUpdate: object | undefined;
            auxDataHash: string | undefined;
            validityIntervalStart: string | undefined;
            mint: import("../../common/Value/index.js").ValueJson | undefined;
            scriptDataHash: string | undefined;
            collateralInputs: {
                utxoRef: import("../../common/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../../ledger/index.js").ValueJson;
                    datum: any;
                };
            }[] | undefined;
            requiredSigners: string[] | undefined;
            network: import("../../common/ledger/index.js").NetworkT | undefined;
        };
        witnesses: {
            vkeyWitnesses: {
                vkey: string;
                signature: string;
            }[] | undefined;
            nativeScripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            bootstrapWitnesses: {
                pubKey: string;
                signature: string;
                chainCode: string;
                attributes: string;
            }[] | undefined;
            plutusV1Scripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.PlutusV1;
                description: string;
                cborHex: string;
            })[] | undefined;
            datums: any[] | undefined;
            redeemers: {
                tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                index: number;
                execUnits: {
                    steps: string;
                    memory: string;
                };
                data: any;
            }[] | undefined;
        };
        isScriptValid: boolean;
        auxiliaryData: {
            metadata: any;
            nativeScripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            plutusV1Scripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.PlutusV1;
                description: string;
                cborHex: string;
            })[] | undefined;
        } | undefined;
    };
    toJson(): {
        body: {
            inputs: {
                utxoRef: import("../../common/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../../ledger/index.js").ValueJson;
                    datum: any;
                };
            }[];
            outputs: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
                datum: any;
            }[];
            fee: string;
            ttl: string | undefined;
            certs: ({
                certType: "PoolRegistration";
                poolParams: {
                    operator: string;
                    vrfKeyHash: string;
                    pledge: string;
                    cost: string;
                    margin: number;
                    rewardAccount: import("../../common/ledger/index.js").StakeAddress<import("../../common/ledger/index.js").StakeAddressType>;
                    owners: string[];
                    relays: ({
                        type: string;
                        port: number | undefined;
                        ipv4: string | undefined;
                        ipv6: string | undefined;
                        dnsName?: undefined;
                    } | {
                        type: string;
                        port: number | undefined;
                        dnsName: string;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    } | {
                        type: string;
                        dnsName: string;
                        port?: undefined;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    })[];
                    metadata: {
                        poolMetadataUrl: string;
                        hash: string;
                    } | undefined;
                };
            } | {
                certType: "PoolRetirement";
                poolHash: string;
                epoch: string;
            } | {
                certType: "StakeDeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "StakeDelegation";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
            } | {
                certType: "StakeRegistration";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "AuthCommitteeHot";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                hotCredential: {
                    credentialType: string;
                    hash: string;
                };
            } | {
                certType: "GenesisKeyDelegation";
                /**
                 * checks that the signer is needed
                 * if true signs the transaction with the specified key
                 * otherwise nothing happens (the signature is not added)
                **/
                genesisHash: string;
                genesisDelegateHash: string;
                vrfKeyHash: string;
            } | {
                certType: "RegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "RegistrationDrep";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                coin: string;
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "ResignCommitteeCold";
                coldCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "StakeVoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
            } | {
                certType: "StakeVoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "UnRegistrationDeposit";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                deposit: string;
            } | {
                certType: "UnRegistrationDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                }; /**
                 * checks that the signer is needed
                 * if true signs the transaction with the specified key
                 * otherwise nothing happens (the signature is not added)
                **/
                coin: string;
            } | {
                certType: "UpdateDrep";
                drepCredential: {
                    credentialType: string;
                    hash: string;
                };
                anchor: {
                    url: string;
                    anchorDataHash: string;
                } | null;
            } | {
                certType: "VoteDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
            } | {
                certType: "VoteRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                drep: {
                    drepType: string;
                };
                coin: string;
            } | {
                certType: "MoveInstantRewards";
                source: "Reserves" | "Treasurery";
                destination: string | {
                    stakeCreds: {
                        credentialType: string;
                        hash: string;
                    };
                    amount: string;
                }[];
            } | {
                certType: "StakeRegistrationDeleg";
                stakeCredential: {
                    credentialType: string;
                    hash: string;
                };
                poolKeyHash: string;
                coin: string;
            })[] | undefined;
            withdrawals: {
                [rewardAccount: string]: string;
            } | undefined;
            protocolUpdate: object | undefined;
            auxDataHash: string | undefined;
            validityIntervalStart: string | undefined;
            mint: import("../../common/Value/index.js").ValueJson | undefined;
            scriptDataHash: string | undefined;
            collateralInputs: {
                utxoRef: import("../../common/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../../../ledger/index.js").ValueJson;
                    datum: any;
                };
            }[] | undefined;
            requiredSigners: string[] | undefined;
            network: import("../../common/ledger/index.js").NetworkT | undefined;
        };
        witnesses: {
            vkeyWitnesses: {
                vkey: string;
                signature: string;
            }[] | undefined;
            nativeScripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            bootstrapWitnesses: {
                pubKey: string;
                signature: string;
                chainCode: string;
                attributes: string;
            }[] | undefined;
            plutusV1Scripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.PlutusV1;
                description: string;
                cborHex: string;
            })[] | undefined;
            datums: any[] | undefined;
            redeemers: {
                tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                index: number;
                execUnits: {
                    steps: string;
                    memory: string;
                };
                data: any;
            }[] | undefined;
        };
        isScriptValid: boolean;
        auxiliaryData: {
            metadata: any;
            nativeScripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            plutusV1Scripts: (import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").ScriptType.PlutusV1;
                description: string;
                cborHex: string;
            })[] | undefined;
        } | undefined;
    };
}
