import { ToCbor, SubCborRef, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { CanBeUInteger } from "@harmoniclabs/cbor/dist/utils/ints";
import { PubKeyHash } from "../../../credentials/index.js";
import { AuxiliaryDataHash, ScriptDataHash, CanBeHash28, Hash32 } from "../../../hashes/index.js";
import { Coin, TxWithdrawals, ITxWithdrawals, Value, NetworkT, Certificate } from "../../common/ledger/index.js";
import { LegacyPPUpdateProposal } from "../../common/LegacyPPUpdateProposal.js";
import { AlonzoTxOut } from "./index.js";
import { AlonzoUTxO } from "./AlonzoUTxO.js";
import { ToJson } from "../../../utils/ToJson.js";
export interface IAlonzoTxBody {
    inputs: [AlonzoUTxO, ...AlonzoUTxO[]];
    outputs: AlonzoTxOut[];
    fee: Coin;
    ttl?: CanBeUInteger;
    certs?: Certificate[];
    withdrawals?: TxWithdrawals | ITxWithdrawals;
    protocolUpdate?: LegacyPPUpdateProposal;
    auxDataHash?: AuxiliaryDataHash;
    validityIntervalStart?: CanBeUInteger;
    mint?: Value;
    scriptDataHash?: ScriptDataHash;
    collateralInputs?: AlonzoUTxO[];
    requiredSigners?: CanBeHash28[];
    network?: NetworkT;
}
export declare function isIAlonzoTxBody(body: Readonly<object>): body is IAlonzoTxBody;
export declare class AlonzoTxBody implements IAlonzoTxBody, ToCbor, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly inputs: [AlonzoUTxO, ...AlonzoUTxO[]];
    readonly outputs: AlonzoTxOut[];
    readonly fee: bigint;
    readonly ttl?: bigint;
    readonly certs?: Certificate[];
    readonly withdrawals?: TxWithdrawals;
    readonly protocolUpdate?: LegacyPPUpdateProposal;
    readonly auxDataHash?: AuxiliaryDataHash;
    readonly validityIntervalStart?: bigint;
    readonly mint?: Value;
    readonly scriptDataHash?: ScriptDataHash;
    readonly collateralInputs?: AlonzoUTxO[];
    readonly requiredSigners?: PubKeyHash[];
    readonly network?: NetworkT;
    /**
     * getter
     */
    get hash(): Hash32;
    private _isHashValid;
    private _hash;
    /**
     *
     * @param body object describing the transaction
     * @throws only if the the `body` parameter does not respect the `IConwayAlonzoTxBody` interface
     *      **DOES NOT THROW** if the transaction is unbalanced; that needs to be checked using `ConwayAlonzoTxBody.isValueConserved` static method
     */
    constructor(body: IAlonzoTxBody, cborRef?: SubCborRef | undefined);
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): AlonzoTxBody;
    static fromCborObj(cObj: CborObj): AlonzoTxBody;
    toJSON(): {
        inputs: {
            utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
            resolved: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
                datum: any;
            };
        }[];
        outputs: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
            datum: any;
        }[];
        fee: string;
        ttl: string | undefined;
        certs: ({
            certType: "PoolRegistration";
            poolParams: {
                operator: string;
                vrfKeyHash: string;
                pledge: string;
                cost: string;
                margin: number;
                rewardAccount: import("../../common/ledger/index.js").StakeAddress<import("../../common/ledger/index.js").StakeAddressType>;
                owners: string[];
                relays: ({
                    type: string;
                    port: number | undefined;
                    ipv4: string | undefined;
                    ipv6: string | undefined;
                    dnsName?: undefined;
                } | {
                    type: string;
                    port: number | undefined;
                    dnsName: string;
                    ipv4?: undefined;
                    ipv6?: undefined;
                } | {
                    type: string;
                    dnsName: string;
                    port?: undefined;
                    ipv4?: undefined;
                    ipv6?: undefined;
                })[];
                metadata: {
                    poolMetadataUrl: string;
                    hash: string;
                } | undefined;
            };
        } | {
            certType: "PoolRetirement";
            poolHash: string;
            epoch: string;
        } | {
            certType: "StakeDeRegistration";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
        } | {
            certType: "StakeDelegation";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
        } | {
            certType: "StakeRegistration";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
        } | {
            certType: "AuthCommitteeHot";
            coldCredential: {
                credentialType: string;
                hash: string;
            };
            hotCredential: {
                credentialType: string;
                hash: string;
            };
        } | {
            certType: "GenesisKeyDelegation";
            genesisHash: string;
            genesisDelegateHash: string;
            vrfKeyHash: string;
        } | {
            certType: "RegistrationDeposit";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            deposit: string;
        } | {
            certType: "RegistrationDrep";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            coin: string;
            anchor: {
                url: string;
                anchorDataHash: string;
            } | null;
        } | {
            certType: "ResignCommitteeCold";
            coldCredential: {
                credentialType: string;
                hash: string;
            };
            anchor: {
                url: string;
                anchorDataHash: string;
            } | null;
        } | {
            certType: "StakeVoteDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
            drep: {
                drepType: string;
            };
        } | {
            certType: "StakeVoteRegistrationDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
            drep: {
                drepType: string;
            };
            coin: string;
        } | {
            certType: "UnRegistrationDeposit";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            deposit: string;
        } | {
            certType: "UnRegistrationDrep";
            drepCredential: {
                credentialType: string;
                hash: string;
            };
            coin: string;
        } | {
            certType: "UpdateDrep";
            drepCredential: {
                credentialType: string;
                hash: string;
            };
            anchor: {
                url: string;
                anchorDataHash: string;
            } | null;
        } | {
            certType: "VoteDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            drep: {
                drepType: string;
            };
        } | {
            certType: "VoteRegistrationDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            drep: {
                drepType: string;
            };
            coin: string;
        } | {
            certType: "MoveInstantRewards";
            source: "Reserves" | "Treasurery";
            destination: string | {
                stakeCreds: {
                    credentialType: string;
                    hash: string;
                };
                amount: string;
            }[];
        } | {
            certType: "StakeRegistrationDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
            coin: string;
        })[] | undefined;
        withdrawals: {
            [rewardAccount: string]: string;
        } | undefined;
        protocolUpdate: object | undefined;
        auxDataHash: string | undefined;
        validityIntervalStart: string | undefined;
        mint: import("../../common/ledger/index.js").ValueJson | undefined;
        scriptDataHash: string | undefined;
        collateralInputs: {
            utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
            resolved: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
                datum: any;
            };
        }[] | undefined;
        requiredSigners: string[] | undefined;
        network: NetworkT | undefined;
    };
    toJson(): {
        inputs: {
            utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
            resolved: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
                datum: any;
            };
        }[];
        outputs: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
            datum: any;
        }[];
        fee: string;
        ttl: string | undefined;
        certs: ({
            certType: "PoolRegistration";
            poolParams: {
                operator: string;
                vrfKeyHash: string;
                pledge: string;
                cost: string;
                margin: number;
                rewardAccount: import("../../common/ledger/index.js").StakeAddress<import("../../common/ledger/index.js").StakeAddressType>;
                owners: string[];
                relays: ({
                    type: string;
                    port: number | undefined;
                    ipv4: string | undefined;
                    ipv6: string | undefined;
                    dnsName?: undefined;
                } | {
                    type: string;
                    port: number | undefined;
                    dnsName: string;
                    ipv4?: undefined;
                    ipv6?: undefined;
                } | {
                    type: string;
                    dnsName: string;
                    port?: undefined;
                    ipv4?: undefined;
                    ipv6?: undefined;
                })[];
                metadata: {
                    poolMetadataUrl: string;
                    hash: string;
                } | undefined;
            };
        } | {
            certType: "PoolRetirement";
            poolHash: string;
            epoch: string;
        } | {
            certType: "StakeDeRegistration";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
        } | {
            certType: "StakeDelegation";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
        } | {
            certType: "StakeRegistration";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
        } | {
            certType: "AuthCommitteeHot";
            coldCredential: {
                credentialType: string;
                hash: string;
            };
            hotCredential: {
                credentialType: string;
                hash: string;
            };
        } | {
            certType: "GenesisKeyDelegation";
            genesisHash: string;
            genesisDelegateHash: string;
            vrfKeyHash: string;
        } | {
            certType: "RegistrationDeposit";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            deposit: string;
        } | {
            certType: "RegistrationDrep";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            coin: string;
            anchor: {
                url: string;
                anchorDataHash: string;
            } | null;
        } | {
            certType: "ResignCommitteeCold";
            coldCredential: {
                credentialType: string;
                hash: string;
            };
            anchor: {
                url: string;
                anchorDataHash: string;
            } | null;
        } | {
            certType: "StakeVoteDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
            drep: {
                drepType: string;
            };
        } | {
            certType: "StakeVoteRegistrationDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
            drep: {
                drepType: string;
            };
            coin: string;
        } | {
            certType: "UnRegistrationDeposit";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            deposit: string;
        } | {
            certType: "UnRegistrationDrep";
            drepCredential: {
                credentialType: string;
                hash: string;
            };
            coin: string;
        } | {
            certType: "UpdateDrep";
            drepCredential: {
                credentialType: string;
                hash: string;
            };
            anchor: {
                url: string;
                anchorDataHash: string;
            } | null;
        } | {
            certType: "VoteDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            drep: {
                drepType: string;
            };
        } | {
            certType: "VoteRegistrationDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            drep: {
                drepType: string;
            };
            coin: string;
        } | {
            certType: "MoveInstantRewards";
            source: "Reserves" | "Treasurery";
            destination: string | {
                stakeCreds: {
                    credentialType: string;
                    hash: string;
                };
                amount: string;
            }[];
        } | {
            certType: "StakeRegistrationDeleg";
            stakeCredential: {
                credentialType: string;
                hash: string;
            };
            poolKeyHash: string;
            coin: string;
        })[] | undefined;
        withdrawals: {
            [rewardAccount: string]: string;
        } | undefined;
        protocolUpdate: object | undefined;
        auxDataHash: string | undefined;
        validityIntervalStart: string | undefined;
        mint: import("../../common/ledger/index.js").ValueJson | undefined;
        scriptDataHash: string | undefined;
        collateralInputs: {
            utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
            resolved: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../../../ledger/index.js").ValueJson;
                datum: any;
            };
        }[] | undefined;
        requiredSigners: string[] | undefined;
        network: NetworkT | undefined;
    };
    /**
     * tests that
     * inputs + withdrawals + refund + mints === outputs + burns + deposit + fee
     *
     * @todo add mints and burns
     * @deprecated until mints and burns are added
     */
    static isValueConserved(tx: AlonzoTxBody): boolean;
}
