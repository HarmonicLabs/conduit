"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlonzoHeaderBody = exports.isIAlonzoHeaderBody = void 0;
var ints_1 = require("@harmoniclabs/cbor/dist/utils/ints");
var cbor_1 = require("@harmoniclabs/cbor");
var crypto_1 = require("@harmoniclabs/crypto");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var hashes_1 = require("../../../hashes/index.js");
var Vrf_1 = require("../../common/Vrf.js");
var protocolVersion_1 = require("../../common/protocolVersion.js");
var PoolOperationalCert_1 = require("../../common/certs/PoolOperationalCert.js");
var ints_2 = require("../../../utils/ints.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
function isIAlonzoHeaderBody(thing) {
    return (0, obj_utils_1.isObject)(thing) && (thing instanceof AlonzoHeaderBody ||
        ((0, ints_1.canBeUInteger)(thing.blockNumber) &&
            (0, ints_1.canBeUInteger)(thing.slot) &&
            (thing.prevHash === undefined || (0, hashes_1.canBeHash32)(thing.prevHash)) &&
            (0, hashes_1.canBeHash32)(thing.issuerPubKey) &&
            (0, hashes_1.canBeHash32)(thing.vrfPubKey) &&
            (0, Vrf_1.isIVrfCert)(thing.nonceVrfResult) &&
            (0, Vrf_1.isIVrfCert)(thing.leaderVrfResult) &&
            (0, ints_1.canBeUInteger)(thing.blockBodySize) &&
            (0, hashes_1.canBeHash32)(thing.blockBodyHash) &&
            (0, PoolOperationalCert_1.isIPoolOperationalCert)(thing.opCert) &&
            (0, protocolVersion_1.isIProtocolVersion)(thing.protocolVersion)));
}
exports.isIAlonzoHeaderBody = isIAlonzoHeaderBody;
var AlonzoHeaderBody = /** @class */ (function () {
    function AlonzoHeaderBody(hdrBody, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!isIAlonzoHeaderBody(hdrBody))
            throw new Error("Invalid AlonzoHeaderBody");
        this.blockNumber = (0, ints_2.forceBigUInt)(hdrBody.blockNumber);
        this.slot = (0, ints_2.forceBigUInt)(hdrBody.slot);
        this.prevHash = typeof hdrBody.prevHash !== "undefined" ? (0, hashes_1.hash32bytes)(hdrBody.prevHash) : undefined;
        this.issuerPubKey = (0, hashes_1.hash32bytes)(hdrBody.issuerPubKey);
        this.vrfPubKey = (0, hashes_1.hash32bytes)(hdrBody.vrfPubKey);
        this.nonceVrfResult = new Vrf_1.VrfCert(hdrBody.nonceVrfResult);
        this.leaderVrfResult = new Vrf_1.VrfCert(hdrBody.leaderVrfResult);
        this.blockBodySize = (0, ints_2.u32)(hdrBody.blockBodySize);
        this.blockBodyHash = (0, hashes_1.hash32bytes)(hdrBody.blockBodyHash);
        this.opCert = new PoolOperationalCert_1.PoolOperationalCert(hdrBody.opCert);
        this.protocolVersion = new protocolVersion_1.ProtocolVersion(hdrBody.protocolVersion);
    }
    AlonzoHeaderBody.prototype.getLeaderVrfCert = function () {
        return this.leaderVrfResult;
    };
    AlonzoHeaderBody.prototype.getNonceVrfCert = function () {
        return this.nonceVrfResult;
    };
    AlonzoHeaderBody.prototype.leaderVrfOutput = function () {
        return (0, crypto_1.sha2_256_sync)(this.leaderVrfResult.proofHash);
    };
    AlonzoHeaderBody.prototype.nonceVrfOutput = function () {
        return (0, crypto_1.sha2_256_sync)(this.nonceVrfResult.proofHash);
    };
    AlonzoHeaderBody.prototype.clone = function () {
        var _a, _b;
        return new AlonzoHeaderBody({
            blockNumber: this.blockNumber,
            slot: this.slot,
            prevHash: (_a = this.prevHash) === null || _a === void 0 ? void 0 : _a.slice(),
            issuerPubKey: this.issuerPubKey.slice(),
            vrfPubKey: this.vrfPubKey.slice(),
            nonceVrfResult: this.nonceVrfResult.clone(),
            leaderVrfResult: this.leaderVrfResult.clone(),
            blockBodySize: this.blockBodySize,
            blockBodyHash: this.blockBodyHash.slice(),
            opCert: this.opCert.clone(),
            protocolVersion: this.protocolVersion.clone()
        }, (_b = this.cborRef) === null || _b === void 0 ? void 0 : _b.clone());
    };
    AlonzoHeaderBody.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    AlonzoHeaderBody.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return new cbor_1.CborString(this.cborRef.toBuffer());
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    AlonzoHeaderBody.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.blockNumber),
            new cbor_1.CborUInt(this.slot),
            this.prevHash ? new cbor_1.CborBytes(this.prevHash) : new cbor_1.CborSimple(null),
            new cbor_1.CborBytes(this.issuerPubKey),
            new cbor_1.CborBytes(this.vrfPubKey),
            this.nonceVrfResult.toCborObj(),
            this.leaderVrfResult.toCborObj(),
            new cbor_1.CborUInt(this.blockBodySize),
            new cbor_1.CborBytes(this.blockBodyHash),
            new cbor_1.CborBytes(this.opCert.kesPubKey),
            new cbor_1.CborUInt(this.opCert.sequenceNumber),
            new cbor_1.CborUInt(this.opCert.kesPeriod),
            new cbor_1.CborBytes(this.opCert.signature),
            new cbor_1.CborUInt(this.protocolVersion.major),
            new cbor_1.CborUInt(this.protocolVersion.minor)
        ]);
    };
    AlonzoHeaderBody.fromCbor = function (cbor) {
        var bytes = cbor instanceof Uint8Array ? cbor : (0, cbor_1.forceCborString)(cbor).toBuffer();
        return AlonzoHeaderBody.fromCborObj(cbor_1.Cbor.parse(bytes, { keepRef: true }), bytes);
    };
    AlonzoHeaderBody.fromCborObj = function (cHdrBody, _originalBytes) {
        // console.log("cHdrBody Alonzo", cHdrBody);
        if (!(cHdrBody instanceof cbor_1.CborArray
        // && cHdrBody.array.length === 15
        ))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("AlonzoHeaderBody");
        var _a = __read(cHdrBody instanceof cbor_1.CborArray && cHdrBody.array.length === 15
            ? cHdrBody.array
            : cHdrBody instanceof cbor_1.CborArray && cHdrBody.array[0] instanceof cbor_1.CborArray
                ? cHdrBody.array[0].array
                : (function () { throw new InvalidCborFormatError_1.InvalidCborFormatError("AlonzoHeaderBody"); })(), 15), _cBlockNo = _a[0], _cSlotNo = _a[1], _cPrevHash = _a[2], _cIssuerVkey = _a[3], _cVrfVkey = _a[4], _cNonceVrfCert = _a[5], _cLeaderVrfCert = _a[6], _cBlockBodySize = _a[7], _cBlockBodyHash = _a[8], _cOpCertHotVkey = _a[9], _cOpCertSeqNum = _a[10], _cOpCertKesPeriod = _a[11], _cOpCertSigma = _a[12], _cProtMajor = _a[13], _cProtMinor = _a[14];
        if (!(_cBlockNo instanceof cbor_1.CborUInt &&
            _cSlotNo instanceof cbor_1.CborUInt &&
            (_cPrevHash instanceof cbor_1.CborBytes || _cPrevHash instanceof cbor_1.CborSimple) &&
            _cIssuerVkey instanceof cbor_1.CborBytes && _cIssuerVkey.bytes.length === 32 &&
            _cVrfVkey instanceof cbor_1.CborBytes && _cVrfVkey.bytes.length === 32 &&
            _cNonceVrfCert instanceof cbor_1.CborArray &&
            _cLeaderVrfCert instanceof cbor_1.CborArray &&
            _cBlockBodySize instanceof cbor_1.CborUInt &&
            _cBlockBodyHash instanceof cbor_1.CborBytes && _cBlockBodyHash.bytes.length === 32 &&
            _cOpCertHotVkey instanceof cbor_1.CborBytes && _cOpCertHotVkey.bytes.length === 32 &&
            _cOpCertSeqNum instanceof cbor_1.CborUInt &&
            _cOpCertKesPeriod instanceof cbor_1.CborUInt &&
            _cOpCertSigma instanceof cbor_1.CborBytes && _cOpCertSigma.bytes.length === 64 &&
            _cProtMajor instanceof cbor_1.CborUInt &&
            _cProtMinor instanceof cbor_1.CborUInt)) {
            throw new Error("invalid types in AlonzoHeaderBody");
        }
        var prevHash = _cPrevHash instanceof cbor_1.CborBytes ? (0, hashes_1.hash32bytes)(_cPrevHash.bytes) : undefined;
        var opCert = new PoolOperationalCert_1.PoolOperationalCert({
            kesPubKey: (0, hashes_1.hash32bytes)(_cOpCertHotVkey.bytes),
            sequenceNumber: (0, ints_2.forceBigUInt)(_cOpCertSeqNum.num),
            kesPeriod: (0, ints_2.forceBigUInt)(_cOpCertKesPeriod.num),
            signature: _cOpCertSigma.bytes
        });
        var protocolVersion = new protocolVersion_1.ProtocolVersion({
            major: (0, ints_2.u32)(_cProtMajor.num),
            minor: (0, ints_2.u32)(_cProtMinor.num)
        });
        return new AlonzoHeaderBody({
            blockNumber: (0, ints_2.forceBigUInt)(_cBlockNo.num),
            slot: (0, ints_2.forceBigUInt)(_cSlotNo.num),
            prevHash: prevHash,
            issuerPubKey: (0, hashes_1.hash32bytes)(_cIssuerVkey.bytes),
            vrfPubKey: (0, hashes_1.hash32bytes)(_cVrfVkey.bytes),
            nonceVrfResult: Vrf_1.VrfCert.fromCborObj(_cNonceVrfCert),
            leaderVrfResult: Vrf_1.VrfCert.fromCborObj(_cLeaderVrfCert),
            blockBodySize: (0, ints_2.u32)(_cBlockBodySize.num),
            blockBodyHash: (0, hashes_1.hash32bytes)(_cBlockBodyHash.bytes),
            opCert: opCert,
            protocolVersion: protocolVersion
        }, (0, getSubCborRef_1.getSubCborRef)(cHdrBody, _originalBytes));
    };
    return AlonzoHeaderBody;
}());
exports.AlonzoHeaderBody = AlonzoHeaderBody;
