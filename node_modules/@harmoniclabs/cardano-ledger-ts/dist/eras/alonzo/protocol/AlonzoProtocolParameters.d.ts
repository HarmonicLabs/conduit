import { ExBudget, ExBudgetJson } from "@harmoniclabs/plutus-machine";
import { CborPositiveRational, CborObj, CborMap } from "@harmoniclabs/cbor";
import { CostModels } from "@harmoniclabs/cardano-costmodels-ts";
import { Data } from "@harmoniclabs/plutus-data";
import type { Epoch } from "../../common/ledger/Epoch.js";
import type { Coin } from "../../common/ledger/Coin.js";
import { CanBeUInteger } from "../../../utils/ints.js";
import { Rational, IProtocolVersion } from "../../common/index.js";
export interface AlonzoProtocolParameters {
    txFeePerByte: CanBeUInteger;
    txFeeFixed: CanBeUInteger;
    maxBlockBodySize: CanBeUInteger;
    maxTxSize: CanBeUInteger;
    maxBlockHeaderSize: CanBeUInteger;
    stakeAddressDeposit: Coin;
    stakePoolDeposit: Coin;
    poolRetireMaxEpoch: Epoch;
    stakePoolTargetNum: CanBeUInteger;
    poolPledgeInfluence: Rational;
    monetaryExpansion: Rational;
    treasuryCut: Rational;
    protocolVersion?: IProtocolVersion;
    minPoolCost: Coin;
    utxoCostPerByte: Coin;
    costModels: CostModels;
    executionUnitPrices: [
        mem_price: CborPositiveRational,
        step_price: CborPositiveRational
    ] | {
        priceMemory: number;
        priceSteps: number;
    };
    maxTxExecutionUnits: ExBudget | ExBudgetJson;
    maxBlockExecutionUnits: ExBudget | ExBudgetJson;
    maxValueSize: CanBeUInteger;
    collateralPercentage: CanBeUInteger;
    maxCollateralInputs: CanBeUInteger;
}
export declare function isAlonzoProtocolParameters(something: any): something is AlonzoProtocolParameters;
export declare function isPartialAlonzoProtocolParameters(something: object): something is Partial<AlonzoProtocolParameters>;
export declare function partialAlonzoProtocolParametersToCborObj(pps: Partial<AlonzoProtocolParameters>): CborMap;
export declare function partialAlonzoProtocolParametersToData(pps: Partial<AlonzoProtocolParameters>): Data;
export declare function partialAlonzoProtocolParametersFromCborObj(cObj: CborObj): Partial<AlonzoProtocolParameters>;
export declare const defaultAlonzoProtocolParameters: AlonzoProtocolParameters;
export declare function partialAlonzoProtocolParamsToJson(pp: Partial<AlonzoProtocolParameters>): {
    poolPledgeInfluence: number | undefined;
    monetaryExpansion: number | undefined;
    treasuryCut: number | undefined;
    costModels: {
        PlutusScriptV1: {};
        PlutusScriptV2: {};
        PlutusScriptV3: {};
    } | undefined;
    executionUnitPrices: {
        priceMemory: number;
        priceSteps: number;
    } | undefined;
    maxTxExecutionUnits: ExBudgetJson | {
        steps: string;
        memory: string;
    } | undefined;
    maxBlockExecutionUnits: ExBudgetJson | {
        steps: string;
        memory: string;
    } | undefined;
    txFeePerByte?: CanBeUInteger | undefined;
    txFeeFixed?: CanBeUInteger | undefined;
    maxBlockBodySize?: CanBeUInteger | undefined;
    maxTxSize?: CanBeUInteger | undefined;
    maxBlockHeaderSize?: CanBeUInteger | undefined;
    stakeAddressDeposit?: CanBeUInteger | undefined;
    stakePoolDeposit?: CanBeUInteger | undefined;
    poolRetireMaxEpoch?: CanBeUInteger | undefined;
    stakePoolTargetNum?: CanBeUInteger | undefined;
    protocolVersion?: IProtocolVersion | undefined;
    minPoolCost?: CanBeUInteger | undefined;
    utxoCostPerByte?: CanBeUInteger | undefined;
    maxValueSize?: CanBeUInteger | undefined;
    collateralPercentage?: CanBeUInteger | undefined;
    maxCollateralInputs?: CanBeUInteger | undefined;
};
