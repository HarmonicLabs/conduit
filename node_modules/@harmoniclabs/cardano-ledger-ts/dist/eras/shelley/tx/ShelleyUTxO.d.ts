import { ToCbor, CborString, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToJson } from "../../../utils/ToJson.js";
import { IShelleyTxOut, ShelleyTxOut } from "./ShelleyTxOut.js";
import { TxOutRef } from "../../common/TxOutRef.js";
import { HasUtxoRef } from "../../common/HasUtxoRef.js";
export interface IShelleyUTxO extends HasUtxoRef {
    resolved: IShelleyTxOut;
}
export declare function isIShelleyUTxO(stuff: any): stuff is IShelleyUTxO;
export declare class ShelleyUTxO implements IShelleyUTxO, ToJson, ToCbor, Cloneable<ShelleyUTxO> {
    readonly cborRef: SubCborRef | undefined;
    readonly utxoRef: TxOutRef;
    readonly resolved: ShelleyTxOut;
    constructor({ utxoRef, resolved }: IShelleyUTxO, cborRef?: SubCborRef | undefined);
    clone(): ShelleyUTxO;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): ShelleyUTxO;
    static fromCborObj(cObj: CborObj): ShelleyUTxO;
    toJSON(): {
        utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
        };
    };
    toJson(): {
        utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
        };
    };
    static sort(a: IShelleyUTxO, b: IShelleyUTxO): number;
}
export { TxOutRef };
