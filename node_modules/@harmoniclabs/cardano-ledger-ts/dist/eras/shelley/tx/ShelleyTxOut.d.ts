import { ToCbor, CborString, CborMap, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Address, AddressStr, Value, IValue } from "../../../ledger/index.js";
import { ToJson } from "../../../utils/ToJson.js";
export interface IShelleyTxOut {
    address: Address | AddressStr;
    value: Value | IValue;
}
export declare function isIShelleyTxOut(stuff: any): stuff is IShelleyTxOut;
export declare class ShelleyTxOut implements IShelleyTxOut, ToCbor, Cloneable<ShelleyTxOut>, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly address: Address;
    readonly value: Value;
    constructor(ShelleyTxOutput: IShelleyTxOut, cborRef?: SubCborRef | undefined);
    clone(): ShelleyTxOut;
    static get fake(): ShelleyTxOut;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cStr: CanBeCborString): ShelleyTxOut;
    static fromCborObj(cObj: CborObj): ShelleyTxOut;
    toJSON(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
    };
    toJson(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
    };
}
