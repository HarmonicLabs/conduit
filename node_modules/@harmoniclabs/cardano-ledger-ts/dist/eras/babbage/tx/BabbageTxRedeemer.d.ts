import { ToCbor, CborString, CborArray, CanBeCborString, CborObj, CborMapEntry, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Data } from "@harmoniclabs/plutus-data";
import { ExBudget } from "@harmoniclabs/plutus-machine";
import { ToJson } from "../../../utils/ToJson.js";
import { CanBeUInteger } from "../../../utils/ints.js";
export declare enum BabbageTxRedeemerTag {
    Spend = 0,
    Mint = 1,
    Cert = 2,
    Withdraw = 3
}
export type BabbageTxRedeemerTagStr<Tag extends BabbageTxRedeemerTag> = Tag extends BabbageTxRedeemerTag.Spend ? "Spend" : Tag extends BabbageTxRedeemerTag.Mint ? "Mint" : Tag extends BabbageTxRedeemerTag.Cert ? "Cert" : Tag extends BabbageTxRedeemerTag.Withdraw ? "Withdraw" : never;
export declare function BabbageTxRedeemerTagToString<Tag extends BabbageTxRedeemerTag>(tag: Tag): BabbageTxRedeemerTagStr<Tag>;
export interface IBabbageTxRedeemer {
    tag: BabbageTxRedeemerTag;
    index: CanBeUInteger;
    data: Data;
    execUnits: ExBudget;
}
export declare class BabbageTxRedeemer implements IBabbageTxRedeemer, ToCbor, Cloneable<BabbageTxRedeemer>, ToJson {
    readonly cborRef: SubCborRef | undefined;
    readonly tag: BabbageTxRedeemerTag;
    /**
     * index of the input the redeemer corresponds to
    **/
    readonly index: number;
    /**
     * the actual value of the redeemer
    **/
    readonly data: Data;
    private _execUnits;
    get execUnits(): ExBudget;
    set execUnits(newExUnits: ExBudget);
    constructor(redeemer: IBabbageTxRedeemer, cborRef?: SubCborRef | undefined);
    clone(): BabbageTxRedeemer;
    toCborMapEntry(): CborMapEntry;
    static fromCborMapEntry(entry: CborMapEntry): BabbageTxRedeemer;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cStr: CanBeCborString): BabbageTxRedeemer;
    static fromCborObj(cObj: CborObj): BabbageTxRedeemer;
    toJSON(): {
        tag: "Spend" | "Mint" | "Cert" | "Withdraw";
        index: number;
        execUnits: {
            steps: string;
            memory: string;
        };
        data: any;
    };
    toJson(): {
        tag: "Spend" | "Mint" | "Cert" | "Withdraw";
        index: number;
        execUnits: {
            steps: string;
            memory: string;
        };
        data: any;
    };
}
