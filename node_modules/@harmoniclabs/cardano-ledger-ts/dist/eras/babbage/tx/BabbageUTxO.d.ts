import { ToCbor, CborString, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToData, Data } from "@harmoniclabs/plutus-data";
import { ToJson } from "../../../utils/ToJson.js";
import { IBabbageTxOut, BabbageTxOut } from "./BabbageTxOut.js";
import { ITxOutRef, TxOutRef } from "../../common/TxOutRef.js";
import { ToDataVersion } from "../../../toData/defaultToDataVersion.js";
export interface IBabbageUTxO {
    utxoRef: ITxOutRef;
    resolved: IBabbageTxOut;
}
export declare function isIBabbageUTxO(stuff: any): stuff is IBabbageUTxO;
export declare class BabbageUTxO implements IBabbageUTxO, ToData, ToJson, ToCbor, Cloneable<BabbageUTxO> {
    readonly cborRef: SubCborRef | undefined;
    readonly utxoRef: TxOutRef;
    readonly resolved: BabbageTxOut;
    constructor({ utxoRef, resolved }: IBabbageUTxO, cborRef?: SubCborRef | undefined);
    clone(): BabbageUTxO;
    toData(version?: ToDataVersion): Data;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): BabbageUTxO;
    static fromCborObj(cObj: CborObj): BabbageUTxO;
    toJSON(): {
        utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
            datum: any;
            refScript: import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").LitteralScriptType;
                description: string;
                cborHex: string;
            } | undefined;
        };
    };
    toJson(): {
        utxoRef: import("../../common/TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../ledger/index.js").ValueJson;
            datum: any;
            refScript: import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").LitteralScriptType;
                description: string;
                cborHex: string;
            } | undefined;
        };
    };
    static sort(a: IBabbageUTxO, b: IBabbageUTxO): number;
}
export { TxOutRef };
