"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BabbageTxRedeemer = exports.BabbageTxRedeemerTagToString = exports.BabbageTxRedeemerTag = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var plutus_machine_1 = require("@harmoniclabs/plutus-machine");
var BasePlutsError_1 = require("../../../utils/BasePlutsError.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var ints_1 = require("../../../utils/ints.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
var BabbageTxRedeemerTag;
(function (BabbageTxRedeemerTag) {
    BabbageTxRedeemerTag[BabbageTxRedeemerTag["Spend"] = 0] = "Spend";
    BabbageTxRedeemerTag[BabbageTxRedeemerTag["Mint"] = 1] = "Mint";
    BabbageTxRedeemerTag[BabbageTxRedeemerTag["Cert"] = 2] = "Cert";
    BabbageTxRedeemerTag[BabbageTxRedeemerTag["Withdraw"] = 3] = "Withdraw";
})(BabbageTxRedeemerTag = exports.BabbageTxRedeemerTag || (exports.BabbageTxRedeemerTag = {}));
;
Object.freeze(BabbageTxRedeemerTag);
function BabbageTxRedeemerTagToString(tag) {
    switch (tag) {
        case BabbageTxRedeemerTag.Spend: return "Spend";
        case BabbageTxRedeemerTag.Mint: return "Mint";
        case BabbageTxRedeemerTag.Cert: return "Cert";
        case BabbageTxRedeemerTag.Withdraw: return "Withdraw";
        default:
            throw new BasePlutsError_1.BasePlutsError("invalid BabbageTxRedeemerTag");
    }
}
exports.BabbageTxRedeemerTagToString = BabbageTxRedeemerTagToString;
var BabbageTxRedeemer = /** @class */ (function () {
    function BabbageTxRedeemer(redeemer, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!((0, obj_utils_1.isObject)(redeemer) &&
            (0, obj_utils_1.hasOwn)(redeemer, "tag") &&
            (0, obj_utils_1.hasOwn)(redeemer, "index") &&
            (0, obj_utils_1.hasOwn)(redeemer, "data") &&
            (0, obj_utils_1.hasOwn)(redeemer, "execUnits")))
            throw new Error("invalid object passed to construct a 'BabbageTxRedeemer'");
        var tag = redeemer.tag, index = redeemer.index, data = redeemer.data, execUnits = redeemer.execUnits;
        if (!(tag === 0 ||
            tag === 1 ||
            tag === 2 ||
            tag === 3))
            throw new Error("invalid redeemer tag");
        this.tag = tag;
        if (!((0, ints_1.canBeUInteger)(index)))
            throw new Error("invlaid redeemer index");
        this.index = Number((0, ints_1.forceBigUInt)(index));
        if (!((0, plutus_data_1.isData)(data)))
            throw new Error("redeemer's data was not 'Data'");
        this.data = data;
        if (!(execUnits instanceof plutus_machine_1.ExBudget))
            throw new Error("invalid 'execUnits' constructing 'BabbageTxRedeemer'");
        this._execUnits = execUnits.clone();
        /* Done: this.cboRref params */
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(redeemer);
    }
    Object.defineProperty(BabbageTxRedeemer.prototype, "execUnits", {
        get: function () {
            return this._execUnits;
        },
        set: function (newExUnits) {
            if (!(newExUnits instanceof plutus_machine_1.ExBudget)) {
                throw new Error("invalid 'execUnits' setting 'BabbageTxRedeemer'");
            }
            this._execUnits = newExUnits;
        },
        enumerable: false,
        configurable: true
    });
    BabbageTxRedeemer.prototype.clone = function () {
        return new BabbageTxRedeemer(__assign(__assign({}, this), { data: this.data.clone(), execUnits: this.execUnits.clone() }));
    };
    BabbageTxRedeemer.prototype.toCborMapEntry = function () {
        return {
            k: new cbor_1.CborArray([
                new cbor_1.CborUInt(this.tag),
                new cbor_1.CborUInt(this.index),
            ]),
            v: new cbor_1.CborArray([
                (0, plutus_data_1.dataToCborObj)(this.data),
                this.execUnits.toCborObj()
            ])
        };
    };
    BabbageTxRedeemer.fromCborMapEntry = function (entry) {
        if (!((0, obj_utils_1.isObject)(entry) &&
            entry.k instanceof cbor_1.CborArray &&
            entry.k.array.length >= 2 &&
            entry.k.array[0] instanceof cbor_1.CborUInt &&
            entry.k.array[1] instanceof cbor_1.CborUInt &&
            entry.v instanceof cbor_1.CborArray &&
            entry.v.array.length >= 2))
            throw new Error("invalid CborMapEntry building BabbageTxRedeemer");
        return new BabbageTxRedeemer({
            tag: Number(entry.k.array[0].num),
            index: Number(entry.k.array[1].num),
            data: (0, plutus_data_1.dataFromCborObj)(entry.v.array[0]),
            execUnits: plutus_machine_1.ExBudget.fromCborObj(entry.v.array[1])
        });
    };
    BabbageTxRedeemer.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BabbageTxRedeemer.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BabbageTxRedeemer.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.tag),
            new cbor_1.CborUInt(this.index),
            (0, plutus_data_1.dataToCborObj)(this.data),
            this.execUnits.toCborObj()
        ]);
    };
    BabbageTxRedeemer.fromCbor = function (cStr) {
        return BabbageTxRedeemer.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    BabbageTxRedeemer.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray &&
            cObj.array.length >= 4 &&
            cObj.array[0] instanceof cbor_1.CborUInt &&
            cObj.array[1] instanceof cbor_1.CborUInt))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxRedeemer");
        var _a = __read(cObj.array, 4), _tag = _a[0], _index = _a[1], _data = _a[2], _execUnits = _a[3];
        return new BabbageTxRedeemer({
            tag: Number(cObj.array[0].num),
            index: cObj.array[1].num,
            data: (0, plutus_data_1.dataFromCborObj)(cObj.array[2]),
            execUnits: plutus_machine_1.ExBudget.fromCborObj(cObj.array[3])
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    BabbageTxRedeemer.prototype.toJSON = function () { return this.toJson(); };
    BabbageTxRedeemer.prototype.toJson = function () {
        return {
            tag: BabbageTxRedeemerTagToString(this.tag),
            index: this.index,
            execUnits: this.execUnits.toJson(),
            data: this.data.toJson(),
        };
    };
    return BabbageTxRedeemer;
}());
exports.BabbageTxRedeemer = BabbageTxRedeemer;
