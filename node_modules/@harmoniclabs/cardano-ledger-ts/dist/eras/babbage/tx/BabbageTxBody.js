"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BabbageTxBody = exports.isIBabbageTxBody = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var ints_1 = require("@harmoniclabs/cbor/dist/utils/ints");
var crypto_1 = require("@harmoniclabs/crypto");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var credentials_1 = require("../../../credentials/index.js");
var hashes_1 = require("../../../hashes/index.js");
var ledger_1 = require("../../common/ledger/index.js");
var LegacyPPUpdateProposal_1 = require("../../common/LegacyPPUpdateProposal.js");
var protocol_1 = require("../protocol/index.js");
var TxOutRef_1 = require("../../common/TxOutRef.js");
var BabbageUTxO_1 = require("./BabbageUTxO.js");
var _1 = require("./index.js");
var getCborSet_1 = require("../../../utils/getCborSet.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
var ints_2 = require("../../../utils/ints.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
function isIBabbageTxBody(body) {
    if (!(0, obj_utils_1.isObject)(body))
        return false;
    var fields = Object.keys(body);
    var b = body;
    return (fields.length >= 3 &&
        (0, obj_utils_1.hasOwn)(b, "inputs") &&
        Array.isArray(b.inputs) && b.inputs.length > 0 &&
        b.inputs.every(function (_in) { return _in instanceof BabbageUTxO_1.BabbageUTxO || (0, BabbageUTxO_1.isIBabbageUTxO)(_in); }) &&
        (0, obj_utils_1.hasOwn)(b, "outputs") &&
        Array.isArray(b.outputs) && b.outputs.length > 0 &&
        b.outputs.every(function (out) { return out instanceof _1.BabbageTxOut || (0, _1.isIBabbageTxOut)(out); }) &&
        (0, obj_utils_1.hasOwn)(b, "fee") && (0, ints_1.canBeUInteger)(b.fee) &&
        (b.ttl === undefined || (0, ints_1.canBeUInteger)(b.ttl)) &&
        (b.certs === undefined || b.certs.every(ledger_1.isCertificate)) &&
        (b.withdrawals === undefined || (0, ledger_1.canBeTxWithdrawals)(b.withdrawals)) &&
        (b.protocolUpdate === undefined || (0, LegacyPPUpdateProposal_1.isLegacyPPUpdateProposal)(b.protocolUpdate)) &&
        (b.auxDataHash === undefined || b.auxDataHash instanceof hashes_1.Hash32) &&
        (b.validityIntervalStart === undefined || (0, ints_1.canBeUInteger)(b.validityIntervalStart)) &&
        (b.mint === undefined || b.mint instanceof ledger_1.Value) &&
        (b.scriptDataHash === undefined || b.scriptDataHash instanceof hashes_1.Hash32) &&
        (b.network === undefined || b.network === "mainnet" || b.network === "testnet") &&
        (b.collateralReturn === undefined || b.collateralReturn instanceof _1.BabbageTxOut || (0, _1.isIBabbageTxOut)(b.collateralReturn)) &&
        (b.totCollateral === undefined || (0, ints_1.canBeUInteger)(b.totCollateral)) &&
        (b.collateralInputs === undefined || (Array.isArray(b.collateralInputs) &&
            b.collateralInputs.every(function (collateral) { return collateral instanceof BabbageUTxO_1.BabbageUTxO; }))) &&
        (b.requiredSigners === undefined || (Array.isArray(b.requiredSigners) &&
            b.requiredSigners.every(function (sig) { return sig instanceof credentials_1.PubKeyHash; }))) &&
        (b.refInputs === undefined || (Array.isArray(b.refInputs) &&
            b.refInputs.every(function (ref) { return ref instanceof BabbageUTxO_1.BabbageUTxO || (0, BabbageUTxO_1.isIBabbageUTxO)(ref); }))));
}
exports.isIBabbageTxBody = isIBabbageTxBody;
var BabbageTxBody = /** @class */ (function () {
    /**
     *
     * @param body object describing the transaction
     * @throws only if the the `body` parameter does not respect the `IConwayBabbageTxBody` interface
     *      **DOES NOT THROW** if the transaction is unbalanced; that needs to be checked using `ConwayBabbageTxBody.isValueConserved` static method
     */
    function BabbageTxBody(body, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        this._isHashValid = false;
        this._hash = undefined;
        var inputs = body.inputs, outputs = body.outputs, fee = body.fee, ttl = body.ttl, certs = body.certs, withdrawals = body.withdrawals, protocolUpdate = body.protocolUpdate, auxDataHash = body.auxDataHash, validityIntervalStart = body.validityIntervalStart, mint = body.mint, scriptDataHash = body.scriptDataHash, collateralInputs = body.collateralInputs, requiredSigners = body.requiredSigners, network = body.network, collateralReturn = body.collateralReturn, totCollateral = body.totCollateral, refInputs = body.refInputs;
        // -------------------------------------- inputs -------------------------------------- //
        if (!(Array.isArray(inputs) &&
            inputs.length > 0 &&
            inputs.every(BabbageUTxO_1.isIBabbageUTxO)))
            throw new Error("invalid 'inputs' field");
        this.inputs = inputs.map(function (i) { return i instanceof BabbageUTxO_1.BabbageUTxO ? i : new BabbageUTxO_1.BabbageUTxO(i); });
        // -------------------------------------- outputs -------------------------------------- //
        if (!(Array.isArray(outputs) &&
            outputs.length > 0 &&
            outputs.every(_1.isIBabbageTxOut)))
            throw new Error("invald 'outputs' field");
        this.outputs = outputs.map(function (out) { return out instanceof _1.BabbageTxOut ? out : new _1.BabbageTxOut(out); });
        // -------------------------------------- fee -------------------------------------- //
        if (!(0, ints_1.canBeUInteger)(fee))
            throw new Error("invald 'fee' field");
        this.fee = (0, ints_1.forceBigUInt)(fee);
        // -------------------------------------- ttl -------------------------------------- //
        this.ttl = ttl === undefined ? undefined : (0, ints_1.forceBigUInt)(ttl);
        // -------------------------------------- certs -------------------------------------- //
        if (!(certs === undefined ||
            (Array.isArray(certs)
                && certs.every(ledger_1.isCertificate))))
            throw new Error("invalid 'certs' field");
        if (certs === undefined
            || certs.length <= 0)
            this.certs = undefined;
        else
            this.certs = certs;
        // -------------------------------------- withdrawals -------------------------------------- //
        if (!(withdrawals === undefined ||
            (0, ledger_1.canBeTxWithdrawals)(withdrawals)))
            throw new Error("invalid 'withdrawals' field");
        this.withdrawals = (withdrawals === undefined ? undefined :
            (0, ledger_1.forceTxWithdrawals)(withdrawals));
        // -------------------------------------- protocolUpdate -------------------------------------- //
        if (!(protocolUpdate === undefined ||
            (0, LegacyPPUpdateProposal_1.isLegacyPPUpdateProposal)(protocolUpdate)))
            this.protocolUpdate = protocolUpdate;
        // -------------------------------------- auxDataHash -------------------------------------- //
        if (!(auxDataHash === undefined ||
            auxDataHash instanceof hashes_1.Hash32))
            throw new Error("invalid 'auxDataHash' field");
        this.auxDataHash = auxDataHash === undefined ? undefined : new hashes_1.AuxiliaryDataHash(auxDataHash);
        // -------------------------------------- validityIntervalStart -------------------------------------- //
        if (!(validityIntervalStart === undefined ||
            (0, ints_1.canBeUInteger)(validityIntervalStart)))
            throw new Error("invalid 'validityIntervalStart' field");
        this.validityIntervalStart = validityIntervalStart === undefined ? undefined : (0, ints_1.forceBigUInt)(validityIntervalStart);
        // -------------------------------------- mint -------------------------------------- //
        if (!(mint === undefined
            || mint instanceof ledger_1.Value
            || (0, ledger_1.isIValue)(mint)))
            throw new Error("invalid 'mint' field");
        if (mint === undefined)
            this.mint = undefined;
        else if (mint instanceof ledger_1.Value)
            this.mint = mint;
        else
            this.mint = new ledger_1.Value(mint);
        // -------------------------------------- scriptDataHash -------------------------------------- //
        if (!(scriptDataHash === undefined ||
            scriptDataHash instanceof hashes_1.Hash32))
            throw new Error("invalid 'scriptDataHash' field");
        this.scriptDataHash = scriptDataHash === undefined ? undefined : new hashes_1.ScriptDataHash(scriptDataHash);
        // -------------------------------------- collateral inputs -------------------------------------- //
        if (!(collateralInputs === undefined ||
            (Array.isArray(collateralInputs) &&
                collateralInputs.every(BabbageUTxO_1.isIBabbageUTxO))))
            throw new Error("invalid 'collateralInputs' field");
        this.collateralInputs = collateralInputs === null || collateralInputs === void 0 ? void 0 : collateralInputs.map(function (collateral) {
            return collateral instanceof BabbageUTxO_1.BabbageUTxO ? collateral :
                new BabbageUTxO_1.BabbageUTxO(collateral);
        });
        // -------------------------------------- requiredSigners -------------------------------------- //
        if (!(requiredSigners === undefined ||
            (Array.isArray(requiredSigners) &&
                requiredSigners.every(hashes_1.canBeHash28))))
            throw new Error("invalid 'requiredSigners' field");
        this.requiredSigners = requiredSigners === null || requiredSigners === void 0 ? void 0 : requiredSigners.map(function (signer) {
            return signer instanceof credentials_1.PubKeyHash ? signer :
                new credentials_1.PubKeyHash(signer);
        });
        // -------------------------------------- network -------------------------------------- //
        if (!(network === undefined ||
            network === "mainnet" ||
            network === "testnet"))
            throw new Error("invalid 'network' field");
        this.network = network;
        // -------------------------------------- collateralReturn -------------------------------------- //
        if (!(collateralReturn === undefined ||
            collateralReturn instanceof _1.BabbageTxOut ||
            (0, _1.isIBabbageTxOut)(collateralReturn)))
            throw new Error("invalid 'collateralReturn' field");
        this.collateralReturn = (collateralReturn === undefined ? undefined :
            collateralReturn instanceof _1.BabbageTxOut ? collateralReturn :
                new _1.BabbageTxOut(collateralReturn));
        // -------------------------------------- totCollateral -------------------------------------- //
        if (!(totCollateral === undefined ||
            (0, ints_1.canBeUInteger)(totCollateral)))
            this.totCollateral = (0, ints_2.maybeBigUint)(totCollateral);
        // -------------------------------------- reference inputs -------------------------------------- //  
        if (!(refInputs === undefined ||
            (Array.isArray(refInputs) &&
                refInputs.every(BabbageUTxO_1.isIBabbageUTxO))))
            throw new Error("invalid 'refInputs' field");
        this.refInputs = refInputs === null || refInputs === void 0 ? void 0 : refInputs.map(function (refIn) {
            return refIn instanceof BabbageUTxO_1.BabbageUTxO ? refIn :
                new BabbageUTxO_1.BabbageUTxO(refIn);
        });
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(body);
    }
    Object.defineProperty(BabbageTxBody.prototype, "hash", {
        /**
         * getter
         */
        get: function () {
            if (this._isHashValid === true
                && this._hash !== undefined
                && this._hash instanceof hashes_1.Hash32)
                return this._hash;
            this._hash = new hashes_1.Hash32(new Uint8Array((0, crypto_1.blake2b_256)(this.toCbor().toBuffer())));
            this._isHashValid = true;
            return this._hash;
        },
        enumerable: false,
        configurable: true
    });
    BabbageTxBody.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BabbageTxBody.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BabbageTxBody.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        return new cbor_1.CborMap([
            {
                k: new cbor_1.CborUInt(0),
                v: new cbor_1.CborArray(this.inputs.map(function (input) { return input.utxoRef.toCborObj(); }))
            },
            {
                k: new cbor_1.CborUInt(1),
                v: new cbor_1.CborArray(this.outputs.map(function (out) { return out.toCborObj(); }))
            },
            {
                k: new cbor_1.CborUInt(2),
                v: new cbor_1.CborUInt(this.fee)
            },
            this.ttl === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(3),
                    v: new cbor_1.CborUInt(this.ttl)
                },
            this.certs === undefined || this.certs.length === 0 ? undefined :
                {
                    k: new cbor_1.CborUInt(4),
                    v: new cbor_1.CborArray(this.certs.map(function (cert) { return cert.toCborObj(); }))
                },
            this.withdrawals === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(5),
                    v: this.withdrawals.toCborObj()
                },
            this.protocolUpdate === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(6),
                    v: (0, LegacyPPUpdateProposal_1.LegacyPPUpdateProposalToCborObj)(this.protocolUpdate, function () { return (0, protocol_1.partialBabbageProtocolParametersToCborObj)(protocol_1.defaultBabbageProtocolParameters); })
                },
            this.auxDataHash === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(7),
                    v: this.auxDataHash.toCborObj()
                },
            this.validityIntervalStart === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(8),
                    v: new cbor_1.CborUInt(this.validityIntervalStart)
                },
            this.mint === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(9),
                    v: this.mint.toCborObj()
                },
            this.scriptDataHash === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(11),
                    v: this.scriptDataHash.toCborObj()
                },
            this.collateralInputs === undefined || this.collateralInputs.length === 0 ? undefined :
                {
                    k: new cbor_1.CborUInt(13),
                    v: new cbor_1.CborArray(this.collateralInputs.map(function (collateral) { return collateral.utxoRef.toCborObj(); }))
                },
            this.requiredSigners === undefined || this.requiredSigners.length === 0 ? undefined :
                {
                    k: new cbor_1.CborUInt(14),
                    v: new cbor_1.CborArray(this.requiredSigners.map(function (signer) { return signer.toCborObj(); }))
                },
            this.network === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(15),
                    v: new cbor_1.CborUInt(this.network === "testnet" ? 0 : 1)
                },
            this.collateralReturn === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(16),
                    v: this.collateralReturn.toCborObj()
                },
            this.totCollateral === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(17),
                    v: new cbor_1.CborUInt(this.totCollateral)
                },
            this.refInputs === undefined || this.refInputs.length === 0 ? undefined :
                {
                    k: new cbor_1.CborUInt(18),
                    v: new cbor_1.CborArray(this.refInputs.map(function (refIn) { return refIn.utxoRef.toCborObj(); }))
                }
        ].filter(function (entry) { return entry !== undefined; }));
    };
    BabbageTxBody.fromCbor = function (cStr) {
        return BabbageTxBody.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    BabbageTxBody.fromCborObj = function (cObj) {
        var _a;
        if (!(cObj instanceof cbor_1.CborMap
        // && cObj.map.length >= 19
        ))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxBody");
        var fields = new Array(19).fill(undefined);
        var _loop_1 = function (i) {
            var v = ((_a = cObj.map.find(function (_a) {
                var k = _a.k;
                return k instanceof cbor_1.CborUInt && Number(k.num) === i;
            })) !== null && _a !== void 0 ? _a : { v: undefined }).v;
            if (v === undefined)
                return "continue";
            fields[i] = v;
        };
        for (var i = 0; i < 19; i++) {
            _loop_1(i);
        }
        var _b = __read(fields, 19), _ins_ = _b[0], // 0 // set
        _outs = _b[1], // 1
        _fee = _b[2], // 2
        _ttl = _b[3], // 3
        _certs_ = _b[4], // 4
        _withdrawals = _b[5], // 5
        _pUp = _b[6], // 6
        _auxDataHash = _b[7], // 7
        _validityStart = _b[8], // 8
        _mint = _b[9], // 9
        _10 = _b[10], // 10
        _scriptDataHash = _b[11], // 11
        _12 = _b[12], // 12
        _collIns = _b[13], // 13 // set
        _reqSigs = _b[14], // 14 // set
        _net = _b[15], // 15
        _collRet = _b[16], // 16
        _totColl = _b[17], // 17
        _refIns = _b[18];
        if (_ins_ === undefined || _outs === undefined || _fee === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxBody");
        if (!(
        // _ins  instanceof CborArray &&
        _outs instanceof cbor_1.CborArray &&
            _fee instanceof cbor_1.CborUInt))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxBody");
        var ttl = undefined;
        if (_ttl !== undefined) {
            if (!(_ttl instanceof cbor_1.CborUInt))
                throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxBody");
            ttl = _ttl.num;
        }
        return new BabbageTxBody({
            inputs: (0, getCborSet_1.getCborSet)(_ins_).map(txOutRefAsUTxOFromCborObj),
            outputs: _outs.array.map(_1.BabbageTxOut.fromCborObj),
            fee: _fee.num,
            ttl: ttl,
            certs: _certs_ !== undefined ? (0, getCborSet_1.getCborSet)(_certs_).map(ledger_1.certificateFromCborObj) : undefined,
            withdrawals: _withdrawals === undefined ? undefined : ledger_1.TxWithdrawals.fromCborObj(_withdrawals),
            protocolUpdate: _pUp === undefined ? undefined : (0, LegacyPPUpdateProposal_1.LegacyPPUpdateProposalFromCborObj)(_pUp, function (cObj) { return (0, LegacyPPUpdateProposal_1.LegacyPPUpdateMapFromCborObj)(cObj, protocol_1.partialBabbageProtocolParametersFromCborObj); }),
            auxDataHash: _auxDataHash === undefined ? undefined : hashes_1.AuxiliaryDataHash.fromCborObj(_auxDataHash),
            validityIntervalStart: _validityStart instanceof cbor_1.CborUInt ? _validityStart.num : undefined,
            mint: _mint === undefined ? undefined : ledger_1.Value.fromCborObj(_mint),
            scriptDataHash: _scriptDataHash === undefined ? undefined : hashes_1.ScriptDataHash.fromCborObj(_scriptDataHash),
            collateralInputs: _collIns !== undefined ? (0, getCborSet_1.getCborSet)(_collIns).map(txOutRefAsUTxOFromCborObj) : undefined,
            requiredSigners: _reqSigs !== undefined ? (0, getCborSet_1.getCborSet)(_reqSigs).map(credentials_1.PubKeyHash.fromCborObj) : undefined,
            network: _net instanceof cbor_1.CborUInt ? (Number(_net.num) === 0 ? "testnet" : "mainnet") : undefined,
            collateralReturn: _collRet === undefined ? undefined : _1.BabbageTxOut.fromCborObj(_collRet),
            totCollateral: _totColl instanceof cbor_1.CborUInt ? _totColl.num : undefined,
            refInputs: _refIns !== undefined ? (0, getCborSet_1.getCborSet)(_refIns).map(txOutRefAsUTxOFromCborObj) : undefined
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    BabbageTxBody.prototype.toJSON = function () { return this.toJson(); };
    BabbageTxBody.prototype.toJson = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return {
            inputs: this.inputs.map(function (i) { return i.toJson(); }),
            outputs: this.outputs.map(function (o) { return o.toJson(); }),
            fee: this.fee.toString(),
            ttl: (_a = this.ttl) === null || _a === void 0 ? void 0 : _a.toString(),
            certs: (_b = this.certs) === null || _b === void 0 ? void 0 : _b.map(function (c) { return c.toJson(); }),
            withdrawals: (_c = this.withdrawals) === null || _c === void 0 ? void 0 : _c.toJson(),
            protocolUpdate: this.protocolUpdate === undefined ? undefined : (0, LegacyPPUpdateProposal_1.protocolUpdateToJson)(this.protocolUpdate, protocol_1.partialBabbageProtocolParamsToJson),
            auxDataHash: (_d = this.auxDataHash) === null || _d === void 0 ? void 0 : _d.toString(),
            validityIntervalStart: (_e = this.validityIntervalStart) === null || _e === void 0 ? void 0 : _e.toString(),
            mint: (_f = this.mint) === null || _f === void 0 ? void 0 : _f.toJson(),
            scriptDataHash: (_g = this.scriptDataHash) === null || _g === void 0 ? void 0 : _g.toString(),
            collateralInputs: (_h = this.collateralInputs) === null || _h === void 0 ? void 0 : _h.map(function (i) { return i.toJson(); }),
            requiredSigners: (_j = this.requiredSigners) === null || _j === void 0 ? void 0 : _j.map(function (sig) { return sig.toString(); }),
            network: this.network,
            collateralReturn: (_k = this.collateralReturn) === null || _k === void 0 ? void 0 : _k.toJson(),
            totCollateral: (_l = this.totCollateral) === null || _l === void 0 ? void 0 : _l.toString(),
            refInputs: (_m = this.refInputs) === null || _m === void 0 ? void 0 : _m.map(function (i) { return i.toJson(); })
        };
    };
    /**
     * tests that
     * inputs + withdrawals + refund + mints === outputs + burns + deposit + fee
     *
     * @todo add mints and burns
     * @deprecated until mints and burns are added
     */
    BabbageTxBody.isValueConserved = function (tx) {
        var inputs = tx.inputs, withdrawals = tx.withdrawals, outputs = tx.outputs, certs = tx.certs, fee = tx.fee;
        // withdrawals
        var tot = withdrawals === undefined ? ledger_1.Value.zero : withdrawals.toTotalWitdrawn();
        // + inputs
        tot = inputs.reduce(function (a, b) { return ledger_1.Value.add(a, b.resolved.value); }, tot);
        // - (outputs + fee)
        // - outputs - fee
        tot = ledger_1.Value.sub(tot, outputs.reduce(function (a, b) { return ledger_1.Value.add(a, b.value); }, ledger_1.Value.lovelaces(fee)));
        return ledger_1.Value.isZero(certs === undefined ?
            tot :
            ledger_1.Value.add(tot, ledger_1.Value.lovelaces((0, ledger_1.certificatesToDepositLovelaces)(certs))));
    };
    return BabbageTxBody;
}());
exports.BabbageTxBody = BabbageTxBody;
;
function txOutRefAsUTxOFromCborObj(cObj) {
    return new BabbageUTxO_1.BabbageUTxO({
        utxoRef: TxOutRef_1.TxOutRef.fromCborObj(cObj),
        resolved: _1.BabbageTxOut.fake
    });
}
