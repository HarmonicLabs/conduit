"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BabbageTxOut = exports.isIBabbageTxOut = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var hashes_1 = require("../../../hashes/index.js");
var ledger_1 = require("../../../ledger/index.js");
var script_1 = require("../../../script/index.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var maybeData_1 = require("../../../utils/maybeData.js");
var BasePlutsError_1 = require("../../../utils/BasePlutsError.js");
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
function isIBabbageTxOut(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, obj_utils_1.hasOwn)(stuff, "address") && (stuff.address instanceof ledger_1.Address || (0, ledger_1.isAddressStr)(stuff.address)) &&
        (0, obj_utils_1.hasOwn)(stuff, "value") && (stuff.value instanceof ledger_1.Value || (0, ledger_1.isIValue)(stuff.value)) &&
        (stuff.datum === undefined || stuff.datum instanceof hashes_1.Hash32 || (0, plutus_data_1.isData)(stuff.datum)) &&
        (stuff.refScript === undefined || stuff.refScript instanceof script_1.Script));
}
exports.isIBabbageTxOut = isIBabbageTxOut;
var BabbageTxOut = /** @class */ (function () {
    function BabbageTxOut(BabbageTxOutput, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!((0, obj_utils_1.isObject)(BabbageTxOutput) &&
            (0, obj_utils_1.hasOwn)(BabbageTxOutput, "address") &&
            (0, obj_utils_1.hasOwn)(BabbageTxOutput, "value")))
            throw new Error("BabbageTxOutput is missing some necessary fields");
        var address = BabbageTxOutput.address, value = BabbageTxOutput.value, datum = BabbageTxOutput.datum, refScript = BabbageTxOutput.refScript;
        if ((0, ledger_1.isAddressStr)(address)) {
            address = ledger_1.Address.fromString(address);
        }
        if (!(address instanceof ledger_1.Address))
            throw new Error("invlaid 'address' while constructing 'BabbageTxOut'");
        if (!(value instanceof ledger_1.Value))
            throw new Error("invlaid 'value' while constructing 'BabbageTxOut'");
        this.address = address;
        this.value = value;
        if (datum !== undefined)
            if (!(datum instanceof hashes_1.Hash32 || (0, plutus_data_1.isData)(datum)))
                throw new Error("invalid 'datum' field");
        this.datum = datum;
        if (refScript !== undefined)
            if (!(refScript instanceof script_1.Script))
                throw new Error("invalid 'refScript' field");
        this.refScript = refScript;
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(BabbageTxOutput);
    }
    BabbageTxOut.prototype.clone = function () {
        var _a, _b;
        return new BabbageTxOut({
            address: this.address.clone(),
            value: this.value.clone(),
            datum: (_a = this.datum) === null || _a === void 0 ? void 0 : _a.clone(),
            refScript: (_b = this.refScript) === null || _b === void 0 ? void 0 : _b.clone()
        });
    };
    Object.defineProperty(BabbageTxOut, "fake", {
        get: function () {
            return new BabbageTxOut({
                address: ledger_1.Address.fake,
                value: ledger_1.Value.lovelaces(0),
                datum: undefined,
                refScript: undefined
            });
        },
        enumerable: false,
        configurable: true
    });
    BabbageTxOut.prototype.toData = function (version) {
        var _a, _b;
        if (version === void 0) { version = "v2"; }
        if (version === "v1") {
            if ((0, plutus_data_1.isData)(this.datum))
                throw new BasePlutsError_1.BasePlutsError("trying to convert v2 utxo to v1");
            return new plutus_data_1.DataConstr(0, [
                this.address.toData(version),
                this.value.toData(version),
                (0, maybeData_1.maybeData)((_a = this.datum) === null || _a === void 0 ? void 0 : _a.toData(version))
            ]);
        }
        var datumData = this.datum === undefined ?
            new plutus_data_1.DataConstr(0, []) :
            this.datum instanceof hashes_1.Hash32 ?
                new plutus_data_1.DataConstr(1, [this.datum.toData(version)]) :
                new plutus_data_1.DataConstr(// inline
                2, [this.datum.clone()]);
        return new plutus_data_1.DataConstr(0, [
            this.address.toData(version),
            this.value.toData(version),
            datumData,
            (0, maybeData_1.maybeData)((_b = this.refScript) === null || _b === void 0 ? void 0 : _b.hash.toData(version))
        ]);
    };
    BabbageTxOut.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    BabbageTxOut.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BabbageTxOut.prototype.toCborObj = function () {
        var datum = this.datum;
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        if (!ledger_1.Value.isPositive(this.value)) {
            console.log(JSON.stringify(this.toJson(), undefined, 2));
            throw new BasePlutsError_1.BasePlutsError("BabbageTxOut values can only be positive; value was: " + JSON.stringify(this.value.toJson()));
        }
        return new cbor_1.CborMap([
            {
                k: new cbor_1.CborUInt(0),
                v: this.address.toCborObj()
            },
            {
                k: new cbor_1.CborUInt(1),
                v: this.value.toCborObj()
            },
            datum === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(2),
                    v: datum instanceof hashes_1.Hash32 ?
                        new cbor_1.CborArray([
                            new cbor_1.CborUInt(0),
                            datum.toCborObj()
                        ]) :
                        new cbor_1.CborArray([
                            new cbor_1.CborUInt(1),
                            new cbor_1.CborTag(24, new cbor_1.CborBytes((0, plutus_data_1.dataToCbor)(datum).toBuffer()))
                        ])
                },
            this.refScript === undefined ? undefined :
                {
                    k: new cbor_1.CborUInt(3),
                    v: new cbor_1.CborTag(24, new cbor_1.CborBytes(this.refScript.toCbor().toBuffer()))
                }
        ].filter(function (elem) { return elem !== undefined; }));
    };
    BabbageTxOut.fromCbor = function (cStr) {
        return BabbageTxOut.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    BabbageTxOut.fromCborObj = function (cObj) {
        var _a;
        if (!(cObj instanceof cbor_1.CborMap ||
            cObj instanceof cbor_1.CborArray
        // cObj instanceof CborMap && cObj.map.length >= 4 ||
        // cObj instanceof CborArray && cObj.array.length >= 4
        ))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
        // legacy
        if (cObj instanceof cbor_1.CborArray) {
            var _b = __read(cObj.array, 4), _addr_1 = _b[0], _val = _b[1], _dat_1 = _b[2], _refScript_1 = _b[3];
            return new BabbageTxOut({
                address: ledger_1.Address.fromCborObj(_addr_1),
                value: ledger_1.Value.fromCborObj(_val),
                datum: _dat_1 === undefined ? undefined : hashes_1.Hash32.fromCborObj(_dat_1),
            });
        }
        var fields = new Array(4).fill(undefined);
        var _loop_1 = function (i) {
            var v = ((_a = cObj.map.find(function (_a) {
                var k = _a.k;
                if (!(k instanceof cbor_1.CborUInt))
                    throw new InvalidCborFormatError_1.InvalidCborFormatError("TxBody");
                return Number(k.num) === i;
            })) !== null && _a !== void 0 ? _a : { v: undefined }).v;
            if (v === undefined)
                return "continue";
            fields[i] = v;
        };
        for (var i = 0; i < 4; i++) {
            _loop_1(i);
        }
        var _c = __read(fields, 4), _addr = _c[0], _amt = _c[1], _dat = _c[2], _refScript = _c[3];
        var datum = undefined;
        if (_dat !== undefined) {
            if (!(_dat instanceof cbor_1.CborArray))
                throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
            var _d = __read(_dat.array, 2), _0 = _d[0], _1 = _d[1];
            if (!(_0 instanceof cbor_1.CborUInt))
                throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
            var opt = Number(_0.num);
            if (opt === 0) {
                if (!(_1 instanceof cbor_1.CborBytes))
                    throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
                datum = new hashes_1.Hash32(_1.buffer);
            }
            else if (opt === 1) {
                if (!(_1 instanceof cbor_1.CborTag &&
                    _1.data instanceof cbor_1.CborBytes)) {
                    throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
                }
                datum = (0, plutus_data_1.dataFromCborObj)(cbor_1.Cbor.parse(_1.data.buffer));
            }
            else
                throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
        }
        var refScript = undefined;
        if (_refScript !== undefined) {
            if (!(_refScript instanceof cbor_1.CborTag &&
                _refScript.data instanceof cbor_1.CborBytes))
                throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
            refScript = new script_1.Script({
                scriptType: script_1.ScriptType.PlutusV2,
                bytes: _refScript.data.buffer
            });
        }
        if (_addr === undefined || _amt === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BabbageTxOut");
        return new BabbageTxOut({
            address: ledger_1.Address.fromCborObj(_addr),
            value: ledger_1.Value.fromCborObj(_amt),
            datum: datum,
            refScript: refScript
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    BabbageTxOut.prototype.toJSON = function () { return this.toJson(); };
    BabbageTxOut.prototype.toJson = function () {
        var _a;
        return {
            address: this.address.toString(),
            value: this.value.toJson(),
            datum: this.datum === undefined ? undefined :
                this.datum instanceof hashes_1.Hash32 ?
                    this.datum.toString() :
                    this.datum.toJson(),
            refScript: (_a = this.refScript) === null || _a === void 0 ? void 0 : _a.toJson()
        };
    };
    return BabbageTxOut;
}());
exports.BabbageTxOut = BabbageTxOut;
