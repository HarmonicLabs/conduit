import { CborArray, SubCborRef, CborString } from "@harmoniclabs/cbor";
import { DataConstr, ToData } from "@harmoniclabs/plutus-data";
import { CanBeHash28, Hash28 } from "../../../hashes/index.js";
import { ToDataVersion } from "../../../toData/defaultToDataVersion.js";
export declare enum VoterKind {
    ConstitutionalCommitteKeyHash = 0,
    ConstitutionalCommitteScript = 1,
    DRepKeyHash = 3,
    DRepScript = 4,
    StakingPoolKeyHash = 5
}
export declare function isVoterKind(stuff: any): stuff is VoterKind;
export interface IVoter {
    kind: VoterKind;
    hash: CanBeHash28;
}
export declare function isIVoter(stuff: any): stuff is IVoter;
export declare function eqIVoter(a: IVoter, b: IVoter): boolean;
export declare class Voter implements IVoter, ToData {
    readonly cborRef: SubCborRef | undefined;
    readonly kind: VoterKind;
    readonly hash: Hash28;
    constructor({ kind, hash }: IVoter, cborRef?: SubCborRef | undefined);
    static ConstitutionalCommitteKeyHash(hash: CanBeHash28): Voter;
    static ConstitutionalCommitteScript(hash: CanBeHash28): Voter;
    static DRepKeyHash(hash: CanBeHash28): Voter;
    static DRepScript(hash: CanBeHash28): Voter;
    static StakingPoolKeyHash(hash: CanBeHash28): Voter;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    toData(version?: ToDataVersion): DataConstr;
}
