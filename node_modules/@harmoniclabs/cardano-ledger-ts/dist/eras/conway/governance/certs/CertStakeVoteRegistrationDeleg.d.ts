import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { DataList } from "@harmoniclabs/plutus-data";
import { Credential } from "../../../../credentials/index.js";
import { CertificateType } from "../../../common/certs/CertificateType.js";
import { ICert } from "../../../common/certs/ICert.js";
import { DRepLike } from "../../governance/DRep/DRepLike.js";
import { DRep } from "../../governance/DRep/DRep.js";
import { CanBeHash28, Hash28 } from "../../../../hashes/index.js";
import { Coin } from "../../../common/ledger/Coin.js";
import { ToDataVersion } from "../../../../toData/defaultToDataVersion.js";
export interface ICertStakeVoteRegistrationDeleg {
    stakeCredential: Credential;
    poolKeyHash: CanBeHash28;
    drep: DRepLike;
    coin: Coin;
}
export declare class CertStakeVoteRegistrationDeleg implements ICert, ICertStakeVoteRegistrationDeleg {
    readonly cborRef: SubCborRef | undefined;
    readonly certType: CertificateType.StakeVoteRegistrationDeleg;
    readonly stakeCredential: Credential;
    readonly poolKeyHash: Hash28;
    readonly drep: DRep;
    readonly coin: bigint;
    constructor({ stakeCredential, poolKeyHash, drep, coin }: ICertStakeVoteRegistrationDeleg, cborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataList;
    getRequiredSigners(): Hash28[];
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertStakeVoteRegistrationDeleg;
    toJSON(): {
        certType: "StakeVoteRegistrationDeleg";
        stakeCredential: {
            credentialType: string;
            hash: string;
        };
        poolKeyHash: string;
        drep: {
            drepType: string;
        };
        coin: string;
    };
    toJson(): {
        certType: "StakeVoteRegistrationDeleg";
        stakeCredential: {
            credentialType: string;
            hash: string;
        };
        poolKeyHash: string;
        drep: {
            drepType: string;
        };
        coin: string;
    };
}
