"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveInstantRewardsCert = exports.rewardSourceToStr = exports.InstantRewardsSource = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var ints_1 = require("../../../../utils/ints.js");
var CertificateType_1 = require("../../../common/certs/CertificateType.js");
var credentials_1 = require("../../../../credentials/index.js");
var defaultToDataVersion_1 = require("../../../../toData/defaultToDataVersion.js");
var getSubCborRef_1 = require("../../../../utils/getSubCborRef.js");
var InstantRewardsSource;
(function (InstantRewardsSource) {
    InstantRewardsSource[InstantRewardsSource["Reserves"] = 0] = "Reserves";
    InstantRewardsSource[InstantRewardsSource["Treasurery"] = 1] = "Treasurery";
})(InstantRewardsSource = exports.InstantRewardsSource || (exports.InstantRewardsSource = {}));
Object.freeze(InstantRewardsSource);
function rewardSourceToStr(source) {
    switch (source) {
        case InstantRewardsSource.Reserves: return "Reserves";
        case InstantRewardsSource.Treasurery: return "Treasurery";
        default:
            throw new Error("unknown instant rewards source");
    }
}
exports.rewardSourceToStr = rewardSourceToStr;
function rewardsMapToCborObj(map) {
    return new cbor_1.CborMap(map.map(function (entry) {
        var amt = entry.amount;
        return {
            k: entry.stakeCredentials.toCborObj(),
            v: amt < 0 ? new cbor_1.CborNegInt(amt) : new cbor_1.CborUInt(amt)
        };
    }));
}
function rewardsMapFromCborObj(cObj) {
    if (!(cObj instanceof cbor_1.CborMap))
        throw new Error("Invalid CBOR fromat for \"MoveInstantRewardsCert\"");
    var map = cObj.map;
    var len = map.length;
    var rewMap = new Array(len);
    for (var i = 0; i < len; i++) {
        var _a = map[i], k = _a.k, v = _a.v;
        if (!(v instanceof cbor_1.CborUInt ||
            v instanceof cbor_1.CborNegInt))
            throw new Error("Invalid CBOR fromat for \"MoveInstantRewardsCert\"");
        rewMap[i] = {
            stakeCredentials: credentials_1.Credential.fromCborObj(k),
            amount: v.num
        };
    }
    return rewMap;
}
/** @deprecated */
var MoveInstantRewardsCert = /** @class */ (function () {
    function MoveInstantRewardsCert(_a, cborRef) {
        var source = _a.source, destination = _a.destination;
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!(source === InstantRewardsSource.Reserves ||
            source === InstantRewardsSource.Treasurery))
            throw new Error("invalid 'source' while constructing 'MoveInstantRewardsCert'");
        if (!((0, ints_1.canBeUInteger)(destination) ||
            (Array.isArray(destination) &&
                destination.every(function (entry) { return ((0, obj_utils_1.hasOwn)(entry, "amount") &&
                    (0, obj_utils_1.hasOwn)(entry, "stakeCredentials") &&
                    ((typeof (entry.amount) === "number" && entry.amount === Math.round(entry.amount)) ||
                        (typeof (entry.amount) === "bigint")) &&
                    entry.stakeCredentials instanceof credentials_1.Credential); }))))
            throw new Error("invalid 'destintaiton' while constructing 'MoveInstantRewardsCert'");
        this.certType = CertificateType_1.CertificateType.MoveInstantRewards;
        this.source = source;
        this.destination = destination;
        /* TODO: deprecated */
        // this.cborRef = cborRef ?? getSubCborRef( this );
    }
    MoveInstantRewardsCert.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        if (version !== "v1" && version !== "v2")
            throw new Error("MIR certificate was deprecated with plutus v3; version:" + version);
        return new plutus_data_1.DataConstr(6, []);
    };
    MoveInstantRewardsCert.prototype.getRequiredSigners = function () {
        return [];
    };
    MoveInstantRewardsCert.prototype.toCborBytes = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef)
            return this.cborRef.toBuffer();
        return this.toCbor().toBuffer();
    };
    MoveInstantRewardsCert.prototype.toCbor = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.cborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    MoveInstantRewardsCert.prototype.toCborObj = function () {
        if (this.cborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.cborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.source),
            (0, ints_1.canBeUInteger)(this.destination) ?
                new cbor_1.CborUInt((0, ints_1.forceBigUInt)(this.destination)) :
                rewardsMapToCborObj(this.destination)
        ]);
    };
    MoveInstantRewardsCert.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray))
            throw new Error("Invalid CBOR fromat for \"MoveInstantRewardsCert\"");
        var _a = __read(cObj.array, 2), _src = _a[0], _dst = _a[1];
        if (!(_src instanceof cbor_1.CborUInt))
            throw new Error("Invalid CBOR fromat for \"MoveInstantRewardsCert\"");
        return new MoveInstantRewardsCert({
            source: Number(_src.num),
            destination: _dst instanceof cbor_1.CborUInt ?
                _dst.num :
                rewardsMapFromCborObj(_dst)
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    MoveInstantRewardsCert.prototype.toJSON = function () { return this.toJson(); };
    MoveInstantRewardsCert.prototype.toJson = function () {
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            source: rewardSourceToStr(this.source),
            destination: (0, ints_1.canBeUInteger)(this.destination) ?
                (0, ints_1.forceBigUInt)(this.destination).toString() :
                this.destination.map(function (_a) {
                    var stakeCredentials = _a.stakeCredentials, amount = _a.amount;
                    return ({
                        stakeCreds: stakeCredentials.toJson(),
                        amount: (0, ints_1.forceBigUInt)(amount).toString()
                    });
                })
        };
    };
    return MoveInstantRewardsCert;
}());
exports.MoveInstantRewardsCert = MoveInstantRewardsCert;
