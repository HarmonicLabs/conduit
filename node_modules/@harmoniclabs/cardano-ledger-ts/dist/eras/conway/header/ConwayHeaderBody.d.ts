import { CanBeUInteger } from "@harmoniclabs/cbor/dist/utils/ints";
import { CanBeCborString, CborArray, CborObj, CborString, SubCborRef, ToCbor } from "@harmoniclabs/cbor";
import { CanBeHash32 } from "../../../hashes/index.js";
import { IVrfCert, VrfCert } from "../../common/Vrf.js";
import { IProtocolVersion, ProtocolVersion } from "../../common/protocolVersion.js";
import { IPoolOperationalCert, PoolOperationalCert } from "../../common/certs/PoolOperationalCert.js";
import { U8Arr, U8Arr32 } from "../../../utils/U8Arr.js";
import { IPraosHeaderBody } from "../../common/interfaces/IPraosHeader.js";
export interface IConwayHeaderBody {
    blockNumber: CanBeUInteger;
    slot: CanBeUInteger;
    prevHash: CanBeHash32 | undefined;
    issuerPubKey: CanBeHash32;
    vrfPubKey: CanBeHash32;
    vrfResult: IVrfCert;
    /** u32 **/
    blockBodySize: CanBeUInteger;
    blockBodyHash: CanBeHash32;
    opCert: IPoolOperationalCert;
    protocolVersion: IProtocolVersion;
}
export declare function isIConwayHeaderBody(thing: any): thing is IConwayHeaderBody;
export declare class ConwayHeaderBody implements IConwayHeaderBody, ToCbor, IPraosHeaderBody {
    readonly cborRef: SubCborRef | undefined;
    readonly blockNumber: bigint;
    readonly slot: bigint;
    readonly prevHash: U8Arr<32> | undefined;
    readonly issuerPubKey: U8Arr<32>;
    readonly vrfPubKey: U8Arr<32>;
    readonly vrfResult: VrfCert;
    readonly blockBodySize: number;
    readonly blockBodyHash: U8Arr<32>;
    readonly opCert: PoolOperationalCert;
    readonly protocolVersion: ProtocolVersion;
    constructor(hdrBody: IConwayHeaderBody, cborRef?: SubCborRef | undefined);
    leaderVrfOutput(): U8Arr<32>;
    nonceVrfOutput: () => U8Arr32;
    clone(): ConwayHeaderBody;
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cbor: CanBeCborString): ConwayHeaderBody;
    static fromCborObj(cHdrBody: CborObj, _originalBytes?: Uint8Array): ConwayHeaderBody;
}
