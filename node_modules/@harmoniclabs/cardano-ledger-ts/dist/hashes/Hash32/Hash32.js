"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hash32 = exports.canBeHash32 = exports.hash32bytes = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var hex_1 = require("../../utils/hex.js");
var Hash_1 = require("../Hash.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
function hash32bytes(hash) {
    if (typeof hash === "string" && hash.length === 64)
        return (0, uint8array_utils_1.fromHex)(hash);
    if (hash instanceof Hash32)
        return hash.toBuffer();
    if (hash instanceof Uint8Array && hash.length >= 32)
        return (hash.length === 32 ? hash :
            Uint8Array.prototype.slice.call(hash, 0, 32));
    throw new Error("Invalid hash32: ".concat(hash));
}
exports.hash32bytes = hash32bytes;
function canBeHash32(stuff) {
    if (stuff instanceof Hash32)
        return true;
    if (typeof stuff === "string") {
        return stuff.length === 64 && (0, hex_1.isHex)(stuff);
    }
    if (stuff instanceof Uint8Array) {
        return stuff.length === 32;
    }
    return (0, Hash_1.canBeHashInstance)(stuff) && canBeHash32(stuff.toBuffer());
}
exports.canBeHash32 = canBeHash32;
var Hash32 = /** @class */ (function (_super) {
    __extends(Hash32, _super);
    function Hash32(bs, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        var _this = _super.call(this, bs instanceof Hash32 ? bs.toBuffer() : bs) || this;
        _this.cborRef = cborRef;
        if (!(_this._bytes.length === 32))
            throw new Error("'Hash32' must be an hash of length 32; length was: " + _this._bytes.length);
        /* Done: this.cboRref params */
        _this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(bs);
        return _this;
    }
    Hash32.fromCbor = function (cStr) {
        return Hash32.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    Hash32.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborBytes))
            throw new Error("Invalid CBOR fromat for \"Hash\"");
        return new Hash32(cObj.bytes, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    return Hash32;
}(Hash_1.Hash));
exports.Hash32 = Hash32;
