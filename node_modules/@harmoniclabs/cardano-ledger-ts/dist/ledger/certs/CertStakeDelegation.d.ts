import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { Credential } from "../../credentials/index.js";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { CanBeHash28, Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface ICertStakeDelegation {
    stakeCredential: Credential;
    poolKeyHash: CanBeHash28;
}
export declare class CertStakeDelegation implements ICert, ICertStakeDelegation {
    readonly cborRef: SubCborRef | undefined;
    readonly certType: CertificateType.StakeDelegation;
    readonly stakeCredential: Credential;
    readonly poolKeyHash: Hash28;
    constructor({ stakeCredential, poolKeyHash }: ICertStakeDelegation, cborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCborBytes(): Uint8Array;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertStakeDelegation;
    toJSON(): {
        certType: "StakeDelegation";
        stakeCredential: {
            credentialType: string;
            hash: string;
        };
        poolKeyHash: string;
    };
    toJson(): {
        certType: "StakeDelegation";
        stakeCredential: {
            credentialType: string;
            hash: string;
        };
        poolKeyHash: string;
    };
}
