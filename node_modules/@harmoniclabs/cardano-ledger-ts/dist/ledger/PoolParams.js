"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolParams = exports.typedPoolParamsMetadata = exports.isIPoolParamsMetadata = void 0;
var PubKeyHash_1 = require("../credentials/PubKeyHash.js");
var Hash32_1 = require("../hashes/Hash32/Hash32.js");
var PoolKeyHash_1 = require("../hashes/Hash28/PoolKeyHash.js");
var VRFKeyHash_1 = require("../hashes/Hash32/VRFKeyHash.js");
var cbor_1 = require("@harmoniclabs/cbor");
var hashes_1 = require("../hashes/index.js");
var ints_1 = require("../utils/ints.js");
var PoolRelay_1 = require("./PoolRelay.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var Rational_1 = require("./protocol/Rational.js");
var StakeAddress_1 = require("./StakeAddress.js");
var getCborSet_1 = require("../utils/getCborSet.js");
var getSubCborRef_1 = require("../utils/getSubCborRef.js");
function isIPoolParamsMetadata(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (typeof stuff.poolMetadataUrl === "string" &&
        (0, Hash32_1.canBeHash32)(stuff.hash));
}
exports.isIPoolParamsMetadata = isIPoolParamsMetadata;
function typedPoolParamsMetadata(_a) {
    var poolMetadataUrl = _a.poolMetadataUrl, hash = _a.hash;
    return {
        poolMetadataUrl: poolMetadataUrl,
        hash: new Hash32_1.Hash32(hash)
    };
}
exports.typedPoolParamsMetadata = typedPoolParamsMetadata;
var PoolParams = /** @class */ (function () {
    function PoolParams(params, cborRef) {
        if (cborRef === void 0) { cborRef = undefined; }
        this.cborRef = cborRef;
        if (!((0, obj_utils_1.isObject)(params) &&
            (0, obj_utils_1.hasOwn)(params, "operator") &&
            (0, obj_utils_1.hasOwn)(params, "vrfKeyHash") &&
            (0, obj_utils_1.hasOwn)(params, "pledge") &&
            (0, obj_utils_1.hasOwn)(params, "cost") &&
            (0, obj_utils_1.hasOwn)(params, "margin") &&
            (0, obj_utils_1.hasOwn)(params, "rewardAccount") &&
            (0, obj_utils_1.hasOwn)(params, "owners") &&
            (0, obj_utils_1.hasOwn)(params, "relays")))
            throw new Error("invalid pool parameters passed to construct a 'PoopParams' instance");
        var operator = params.operator, vrfKeyHash = params.vrfKeyHash, pledge = params.pledge, cost = params.cost, margin = params.margin, rewardAccount = params.rewardAccount, owners = params.owners, relays = params.relays, metadata = params.metadata;
        if (!((0, hashes_1.canBeHash28)(operator)))
            throw new Error("invalid 'operator' constructing 'PoolParams'");
        this.operator = new PoolKeyHash_1.PoolKeyHash(operator);
        if (!((0, Hash32_1.canBeHash32)(vrfKeyHash)))
            throw new Error("invalid 'vrfKeyHash' constructing 'PoolParams'");
        this.vrfKeyHash = new VRFKeyHash_1.VRFKeyHash(vrfKeyHash);
        if (!((0, ints_1.canBeUInteger)(pledge)))
            throw new Error("invalid 'pledge' constructing 'PoolParams'");
        this.pledge = (0, ints_1.forceBigUInt)(pledge);
        if (!((0, ints_1.canBeUInteger)(cost)))
            throw new Error("invalid 'cost' constructing 'PoolParams'");
        this.cost = (0, ints_1.forceBigUInt)(cost);
        if (!((0, Rational_1.isRational)(margin)))
            throw new Error("invalid 'margin' constructing 'PoolParams'");
        this.margin = (0, Rational_1.cborFromRational)(margin);
        if ((0, hashes_1.canBeHash28)(rewardAccount)) {
            this.rewardAccount = new StakeAddress_1.StakeAddress({
                network: "mainnet",
                credentials: new hashes_1.Hash28(rewardAccount),
                type: "stakeKey"
            });
        }
        else {
            if (!(rewardAccount instanceof StakeAddress_1.StakeAddress))
                throw new Error("invalid 'rewardAccount' constructing 'PoolParams'");
            this.rewardAccount = rewardAccount.clone();
        }
        if (!(Array.isArray(owners) &&
            owners.every(hashes_1.canBeHash28)))
            throw new Error("invalid 'owners' constructing 'PoolParams'");
        this.owners = owners.map(function (hash) { return new hashes_1.Hash28(hash); });
        if (!(Array.isArray(relays) &&
            relays.every(PoolRelay_1.isPoolRelay)))
            throw new Error("invalid 'relays' constructing 'PoolParams'");
        this.relays = relays;
        if (!(metadata === undefined ||
            isIPoolParamsMetadata(metadata)))
            throw new Error("invalid 'metadata' filed for 'PoolParams'");
        this.metadata = metadata === undefined ? undefined : typedPoolParamsMetadata(metadata);
        this.cborRef = cborRef !== null && cborRef !== void 0 ? cborRef : (0, getSubCborRef_1.subCborRefOrUndef)(params);
    }
    PoolParams.prototype.toCborObjArray = function () {
        return Object.freeze([
            this.operator.toCborObj(),
            this.vrfKeyHash.toCborObj(),
            new cbor_1.CborUInt(this.pledge),
            new cbor_1.CborUInt(this.cost),
            this.margin,
            this.rewardAccount.toCborObj(),
            new cbor_1.CborArray(this.owners.map(function (owner) { return owner.toCborObj(); })),
            new cbor_1.CborArray(this.relays.map(PoolRelay_1.poolRelayToCborObj)),
            this.metadata === undefined || this.metadata === null ?
                new cbor_1.CborSimple(null) :
                new cbor_1.CborArray([
                    new cbor_1.CborText(this.metadata.poolMetadataUrl),
                    this.metadata.hash.toCborObj()
                ])
        ]);
    };
    PoolParams.fromCborObjArray = function (_a) {
        var _b = __read(_a, 9), _operator = _b[0], _vrfKeyHash = _b[1], _pledge = _b[2], _cost = _b[3], _margin = _b[4], _rewAccount = _b[5], _owners = _b[6], _relays = _b[7], _metadata = _b[8];
        if (!(_pledge instanceof cbor_1.CborUInt &&
            _cost instanceof cbor_1.CborUInt &&
            // _owners instanceof CborArray &&
            _relays instanceof cbor_1.CborArray &&
            _margin instanceof cbor_1.CborTag && _margin.data instanceof cbor_1.CborArray &&
            _rewAccount instanceof cbor_1.CborBytes &&
            _margin.data.array.every(function (n) { return n instanceof cbor_1.CborUInt; }) && _margin.data.array.length >= 2))
            throw new Error("Invlid CBOR format for \"PoolParams\"");
        var _c = __read(_margin.data.array.map(function (n) { return n.num; }), 2), margin_num = _c[0], margin_den = _c[1];
        var rewAccountBytes = _rewAccount.bytes;
        var rewardAccount = rewAccountBytes.length === 28 ?
            new hashes_1.Hash28(rewAccountBytes) :
            StakeAddress_1.StakeAddress.fromBytes(rewAccountBytes);
        return new PoolParams({
            operator: PoolKeyHash_1.PoolKeyHash.fromCborObj(_operator),
            vrfKeyHash: VRFKeyHash_1.VRFKeyHash.fromCborObj(_vrfKeyHash),
            pledge: _pledge.num,
            cost: _cost.num,
            margin: new cbor_1.CborPositiveRational(margin_num, margin_den),
            rewardAccount: rewardAccount,
            owners: (0, getCborSet_1.getCborSet)(_owners).map(PubKeyHash_1.PubKeyHash.fromCborObj),
            relays: _relays.array.map(PoolRelay_1.poolRelayFromCborObj),
            metadata: (_metadata instanceof cbor_1.CborArray &&
                _metadata.array[0] instanceof cbor_1.CborText &&
                _metadata.array[1] instanceof cbor_1.CborBytes) ?
                {
                    poolMetadataUrl: _metadata.array[0].text,
                    hash: Hash32_1.Hash32.fromCborObj(_metadata.array[1])
                }
                : undefined
        });
    };
    PoolParams.prototype.toJSON = function () { return this.toJson(); };
    PoolParams.prototype.toJson = function () {
        return {
            operator: this.operator.toString(),
            vrfKeyHash: this.vrfKeyHash.toString(),
            pledge: this.pledge.toString(),
            cost: this.cost.toString(),
            margin: Number(this.margin.num) / Number(this.margin.den),
            rewardAccount: this.rewardAccount,
            owners: this.owners.map(function (owner) { return owner.toString(); }),
            relays: this.relays.map(PoolRelay_1.poolRelayToJson),
            metadata: this.metadata === undefined ? undefined : {
                poolMetadataUrl: this.metadata.poolMetadataUrl,
                hash: this.metadata.hash.toString()
            }
        };
    };
    return PoolParams;
}());
exports.PoolParams = PoolParams;
;
